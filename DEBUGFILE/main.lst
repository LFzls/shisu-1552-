

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sat Apr 27 15:38:15 2024

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F883
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	_szTemp_text,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,delta=2
    14                           	psect	text731,local,class=CODE,delta=2
    15                           	psect	text733,local,class=CODE,delta=2
    16                           	psect	text735,local,class=CODE,delta=2
    17                           	psect	text736,local,class=CODE,delta=2
    18                           	psect	text738,local,class=CODE,delta=2
    19                           	psect	text741,local,class=CODE,delta=2
    20                           	psect	text748,local,class=CODE,delta=2
    21                           	psect	text749,local,class=CODE,delta=2
    22                           	psect	text751,local,class=CODE,delta=2
    23                           	psect	text758,local,class=CODE,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	swtext1,local,class=CONST,delta=2
    26                           	psect	swtext2,local,class=CONST,delta=2
    27                           	psect	text764,local,class=CODE,delta=2
    28                           	psect	pa_nodes,global,class=CODE,delta=2
    29                           	dabs	1,0x159,11
    30                           	dabs	1,0x164,2
    31                           	dabs	1,0x7E,2
    32  000A                     
    33                           	psect	stringtext
    34  0600                     __pstringtext:	
    35  0600                     stringtab:	
    36                           ;	global	stringtab,__stringbase
    37                           
    38                           
    39                           ;	String table - string pointers are 2 bytes each
    40  0600  1BFF               	btfsc	btemp+1,7
    41  0601  2E0A               	ljmp	stringcode
    42  0602  1383               	bcf	3,7
    43  0603  187F               	btfsc	btemp+1,0
    44  0604  1783               	bsf	3,7
    45  0605  0800               	movf	0,w
    46  0606  0A84               	incf	4,f
    47  0607  1903               	skipnz
    48  0608  0AFF               	incf	btemp+1,f
    49  0609  0008               	return
    50  060A                     stringcode:	
    51  060A  087F               	movf	btemp+1,w
    52  060B  397F               	andlw	127
    53  060C  008A               	movwf	10
    54  060D  0804               	movf	4,w
    55  060E  0A84               	incf	4,f
    56  060F  1903               	skipnz
    57  0610  0AFF               	incf	btemp+1,f
    58  0611  0082               	movwf	2
    59  0612                     __stringbase:	
    60  0612                     _D_BatVol_Table:	
    61  0612  34E4               	retlw	228
    62  0613  340C               	retlw	12
    63  0614  34F2               	retlw	242
    64  0615  340C               	retlw	12
    65  0616  3400               	retlw	0
    66  0617  340D               	retlw	13
    67  0618  340E               	retlw	14
    68  0619  340D               	retlw	13
    69  061A  341C               	retlw	28
    70  061B  340D               	retlw	13
    71  061C  342A               	retlw	42
    72  061D  340D               	retlw	13
    73  061E  3438               	retlw	56
    74  061F  340D               	retlw	13
    75  0620  3446               	retlw	70
    76  0621  340D               	retlw	13
    77  0622  3454               	retlw	84
    78  0623  340D               	retlw	13
    79  0624  3462               	retlw	98
    80  0625  340D               	retlw	13
    81  0626  3470               	retlw	112
    82  0627  340D               	retlw	13
    83  0628  347A               	retlw	122
    84  0629  340D               	retlw	13
    85  062A  3484               	retlw	132
    86  062B  340D               	retlw	13
    87  062C  348E               	retlw	142
    88  062D  340D               	retlw	13
    89  062E  3498               	retlw	152
    90  062F  340D               	retlw	13
    91  0630  34A2               	retlw	162
    92  0631  340D               	retlw	13
    93  0632  34AC               	retlw	172
    94  0633  340D               	retlw	13
    95  0634  34B6               	retlw	182
    96  0635  340D               	retlw	13
    97  0636  34C0               	retlw	192
    98  0637  340D               	retlw	13
    99  0638  34CA               	retlw	202
   100  0639  340D               	retlw	13
   101  063A  34D4               	retlw	212
   102  063B  340D               	retlw	13
   103  063C  34DE               	retlw	222
   104  063D  340D               	retlw	13
   105  063E  34E8               	retlw	232
   106  063F  340D               	retlw	13
   107  0640  34F2               	retlw	242
   108  0641  340D               	retlw	13
   109  0642  34FC               	retlw	252
   110  0643  340D               	retlw	13
   111  0644  3406               	retlw	6
   112  0645  340E               	retlw	14
   113  0646  3410               	retlw	16
   114  0647  340E               	retlw	14
   115  0648  341A               	retlw	26
   116  0649  340E               	retlw	14
   117  064A  3424               	retlw	36
   118  064B  340E               	retlw	14
   119  064C  342E               	retlw	46
   120  064D  340E               	retlw	14
   121  064E  3438               	retlw	56
   122  064F  340E               	retlw	14
   123  0650  343C               	retlw	60
   124  0651  340E               	retlw	14
   125  0652  3440               	retlw	64
   126  0653  340E               	retlw	14
   127  0654  3444               	retlw	68
   128  0655  340E               	retlw	14
   129  0656  3448               	retlw	72
   130  0657  340E               	retlw	14
   131  0658  344C               	retlw	76
   132  0659  340E               	retlw	14
   133  065A  3450               	retlw	80
   134  065B  340E               	retlw	14
   135  065C  3454               	retlw	84
   136  065D  340E               	retlw	14
   137  065E  3458               	retlw	88
   138  065F  340E               	retlw	14
   139  0660  345C               	retlw	92
   140  0661  340E               	retlw	14
   141  0662  3460               	retlw	96
   142  0663  340E               	retlw	14
   143  0664  3464               	retlw	100
   144  0665  340E               	retlw	14
   145  0666  3468               	retlw	104
   146  0667  340E               	retlw	14
   147  0668  346C               	retlw	108
   148  0669  340E               	retlw	14
   149  066A  3470               	retlw	112
   150  066B  340E               	retlw	14
   151  066C  3474               	retlw	116
   152  066D  340E               	retlw	14
   153  066E  3478               	retlw	120
   154  066F  340E               	retlw	14
   155  0670  347C               	retlw	124
   156  0671  340E               	retlw	14
   157  0672  3480               	retlw	128
   158  0673  340E               	retlw	14
   159  0674  3484               	retlw	132
   160  0675  340E               	retlw	14
   161  0676  3488               	retlw	136
   162  0677  340E               	retlw	14
   163  0678  348C               	retlw	140
   164  0679  340E               	retlw	14
   165  067A  3490               	retlw	144
   166  067B  340E               	retlw	14
   167  067C  3494               	retlw	148
   168  067D  340E               	retlw	14
   169  067E  3498               	retlw	152
   170  067F  340E               	retlw	14
   171  0680  349C               	retlw	156
   172  0681  340E               	retlw	14
   173  0682  34A0               	retlw	160
   174  0683  340E               	retlw	14
   175  0684  34A4               	retlw	164
   176  0685  340E               	retlw	14
   177  0686  34A8               	retlw	168
   178  0687  340E               	retlw	14
   179  0688  34AC               	retlw	172
   180  0689  340E               	retlw	14
   181  068A  34B0               	retlw	176
   182  068B  340E               	retlw	14
   183  068C  34B4               	retlw	180
   184  068D  340E               	retlw	14
   185  068E  34B8               	retlw	184
   186  068F  340E               	retlw	14
   187  0690  34BC               	retlw	188
   188  0691  340E               	retlw	14
   189  0692  34C0               	retlw	192
   190  0693  340E               	retlw	14
   191  0694  34C4               	retlw	196
   192  0695  340E               	retlw	14
   193  0696  34C8               	retlw	200
   194  0697  340E               	retlw	14
   195  0698  34CC               	retlw	204
   196  0699  340E               	retlw	14
   197  069A  34D0               	retlw	208
   198  069B  340E               	retlw	14
   199  069C  34D4               	retlw	212
   200  069D  340E               	retlw	14
   201  069E  34D8               	retlw	216
   202  069F  340E               	retlw	14
   203  06A0  34E2               	retlw	226
   204  06A1  340E               	retlw	14
   205  06A2  34EC               	retlw	236
   206  06A3  340E               	retlw	14
   207  06A4  34F6               	retlw	246
   208  06A5  340E               	retlw	14
   209  06A6  3400               	retlw	0
   210  06A7  340F               	retlw	15
   211  06A8  340A               	retlw	10
   212  06A9  340F               	retlw	15
   213  06AA  3414               	retlw	20
   214  06AB  340F               	retlw	15
   215  06AC  341E               	retlw	30
   216  06AD  340F               	retlw	15
   217  06AE  3428               	retlw	40
   218  06AF  340F               	retlw	15
   219  06B0  3432               	retlw	50
   220  06B1  340F               	retlw	15
   221  06B2  343C               	retlw	60
   222  06B3  340F               	retlw	15
   223  06B4  3446               	retlw	70
   224  06B5  340F               	retlw	15
   225  06B6  3450               	retlw	80
   226  06B7  340F               	retlw	15
   227  06B8  345A               	retlw	90
   228  06B9  340F               	retlw	15
   229  06BA  3464               	retlw	100
   230  06BB  340F               	retlw	15
   231  06BC  346E               	retlw	110
   232  06BD  340F               	retlw	15
   233  06BE  3478               	retlw	120
   234  06BF  340F               	retlw	15
   235  06C0  3482               	retlw	130
   236  06C1  340F               	retlw	15
   237  06C2  348C               	retlw	140
   238  06C3  340F               	retlw	15
   239  06C4  3496               	retlw	150
   240  06C5  340F               	retlw	15
   241  06C6  34A0               	retlw	160
   242  06C7  340F               	retlw	15
   243  06C8  34A5               	retlw	165
   244  06C9  340F               	retlw	15
   245  06CA  34AA               	retlw	170
   246  06CB  340F               	retlw	15
   247  06CC  34AF               	retlw	175
   248  06CD  340F               	retlw	15
   249  06CE  34B4               	retlw	180
   250  06CF  340F               	retlw	15
   251  06D0  34B9               	retlw	185
   252  06D1  340F               	retlw	15
   253  06D2  34BE               	retlw	190
   254  06D3  340F               	retlw	15
   255  06D4  34C3               	retlw	195
   256  06D5  340F               	retlw	15
   257  06D6  34C8               	retlw	200
   258  06D7  340F               	retlw	15
   259  06D8  34CD               	retlw	205
   260  06D9  340F               	retlw	15
   261  06DA  342C               	retlw	44
   262  06DB  3410               	retlw	16
   263  06DC                     _ledShowIndex:	
   264  06DC  3401               	retlw	1
   265  06DD  3402               	retlw	2
   266  06DE  3401               	retlw	1
   267  06DF  3403               	retlw	3
   268  06E0  3401               	retlw	1
   269  06E1  3404               	retlw	4
   270  06E2  3401               	retlw	1
   271  06E3  3405               	retlw	5
   272  06E4  3401               	retlw	1
   273  06E5  3406               	retlw	6
   274  06E6  3401               	retlw	1
   275  06E7  3407               	retlw	7
   276  06E8  3402               	retlw	2
   277  06E9  3401               	retlw	1
   278  06EA  3402               	retlw	2
   279  06EB  3403               	retlw	3
   280  06EC  3402               	retlw	2
   281  06ED  3404               	retlw	4
   282  06EE  3402               	retlw	2
   283  06EF  3405               	retlw	5
   284  06F0  3402               	retlw	2
   285  06F1  3406               	retlw	6
   286  06F2  3402               	retlw	2
   287  06F3  3407               	retlw	7
   288  06F4  3403               	retlw	3
   289  06F5  3401               	retlw	1
   290  06F6  3403               	retlw	3
   291  06F7  3402               	retlw	2
   292  06F8  3403               	retlw	3
   293  06F9  3404               	retlw	4
   294  06FA  3403               	retlw	3
   295  06FB  3405               	retlw	5
   296  06FC  3403               	retlw	3
   297  06FD  3406               	retlw	6
   298  06FE  3403               	retlw	3
   299  06FF  3407               	retlw	7
   300  0700  3404               	retlw	4
   301  0701  3401               	retlw	1
   302  0702  3404               	retlw	4
   303  0703  3402               	retlw	2
   304  0704  3404               	retlw	4
   305  0705  3403               	retlw	3
   306  0706  3404               	retlw	4
   307  0707  3405               	retlw	5
   308  0708  3404               	retlw	4
   309  0709  3406               	retlw	6
   310  070A  3404               	retlw	4
   311  070B  3407               	retlw	7
   312  070C  3405               	retlw	5
   313  070D  3401               	retlw	1
   314  070E  3405               	retlw	5
   315  070F  3402               	retlw	2
   316  0710  3405               	retlw	5
   317  0711  3403               	retlw	3
   318  0712  3405               	retlw	5
   319  0713  3404               	retlw	4
   320  0714  3405               	retlw	5
   321  0715  3406               	retlw	6
   322  0716  3405               	retlw	5
   323  0717  3407               	retlw	7
   324  0718  3406               	retlw	6
   325  0719  3401               	retlw	1
   326  071A  3406               	retlw	6
   327  071B  3402               	retlw	2
   328  071C  3406               	retlw	6
   329  071D  3403               	retlw	3
   330  071E  3406               	retlw	6
   331  071F  3404               	retlw	4
   332  0720  3406               	retlw	6
   333  0721  3405               	retlw	5
   334  0722  3406               	retlw	6
   335  0723  3407               	retlw	7
   336  0724  3407               	retlw	7
   337  0725  3401               	retlw	1
   338  0726  3407               	retlw	7
   339  0727  3402               	retlw	2
   340  0728  3407               	retlw	7
   341  0729  3403               	retlw	3
   342  072A  3407               	retlw	7
   343  072B  3404               	retlw	4
   344  072C  3407               	retlw	7
   345  072D  3405               	retlw	5
   346  072E  3407               	retlw	7
   347  072F  3406               	retlw	6
   348  0730  3408               	retlw	8
   349  0731  3401               	retlw	1
   350  0732  3408               	retlw	8
   351  0733  3402               	retlw	2
   352  0734  3408               	retlw	8
   353  0735  3403               	retlw	3
   354  0736  3408               	retlw	8
   355  0737  3404               	retlw	4
   356  0738  3408               	retlw	8
   357  0739  3405               	retlw	5
   358  073A  3408               	retlw	8
   359  073B  3406               	retlw	6
   360  073C  3401               	retlw	1
   361  073D  3408               	retlw	8
   362  073E  3402               	retlw	2
   363  073F  3408               	retlw	8
   364  0740  3400               	retlw	0
   365  0741  3400               	retlw	0
   366  0742  3408               	retlw	8
   367  0743  3407               	retlw	7
   368  0744  3400               	retlw	0
   369  0745  3400               	retlw	0
   370  0746  3400               	retlw	0
   371  0747  3400               	retlw	0
   372  0748                     _D_LCD_Table:	
   373  0748  343F               	retlw	63
   374  0749  3406               	retlw	6
   375  074A  345B               	retlw	91
   376  074B  344F               	retlw	79
   377  074C  3466               	retlw	102
   378  074D  346D               	retlw	109
   379  074E  347D               	retlw	125
   380  074F  3407               	retlw	7
   381  0750  347F               	retlw	127
   382  0751  346F               	retlw	111
   383  0752  3477               	retlw	119
   384  0753  347C               	retlw	124
   385  0754  343A               	retlw	58
   386  0755  345E               	retlw	94
   387  0756  3479               	retlw	121
   388  0757  3471               	retlw	113
   389  0758  3400               	retlw	0
   390  0759  3438               	retlw	56
   391  075A  3476               	retlw	118
   392  075B  345C               	retlw	92
   393  0FFE                     _szTemp_absaddr	set	4094
   394  0FFE                     _szTemp_absaddr	set	4094
   395                           
   396                           	psect	_szTemp_text
   397  0FFE                     __p_szTemp_text:	
   398  0FFE                     _szTemp:	
   399  0FFE  3400               	retlw	0
   400  0FFF  3400               	retlw	0
   401  0159                     _TimeCnt	set	345	;_TimeCnt
   402  0017                     _ADCDH	set	23
   403  0018                     _ADCTL	set	24
   404  0019                     _ADCTL2	set	25
   405  000F                     _CLKCTL	set	15
   406  0004                     _FSR	set	4
   407  0000                     _INDF	set	0
   408  000B                     _INTIE	set	11
   409  000D                     _INTIE1	set	13
   410  0016                     _LVCTL	set	22
   411  0005                     _PAD	set	5
   412  0006                     _PBD	set	6
   413  0007                     _PDD	set	7
   414  0015                     _T2CTL	set	21
   415  0001                     _TM0	set	1
   416  0011                     _TM0CTL	set	17
   417  0010                     _TM0RLD	set	16
   418  0012                     _TM1	set	18
   419  0014                     _TM1CTL	set	20
   420  0013                     _TM1RLD	set	19
   421  00C3                     _ADST	set	195
   422  0074                     _CMPIF	set	116
   423  0060                     _INT0IF	set	96
   424  0061                     _INT1IF	set	97
   425  0062                     _INT2IF	set	98
   426  001F                     _IRP	set	31
   427  0068                     _LVDIE	set	104
   428  0070                     _LVDIF	set	112
   429  002A                     _PAD2	set	42
   430  002B                     _PAD3	set	43
   431  002C                     _PAD4	set	44
   432  002E                     _PAD6	set	46
   433  002F                     _PAD7	set	47
   434  0030                     _PBD0	set	48
   435  0032                     _PBD2	set	50
   436  0033                     _PBD3	set	51
   437  0034                     _PBD4	set	52
   438  0035                     _PBD5	set	53
   439  0036                     _PBD6	set	54
   440  0037                     _PBD7	set	55
   441  0038                     _PDD0	set	56
   442  0039                     _PDD1	set	57
   443  001D                     _RP0	set	29
   444  001E                     _RP1	set	30
   445  005E                     _T2IE	set	94
   446  0066                     _T2IF	set	102
   447  005C                     _TM0IE	set	92
   448  0064                     _TM0IF	set	100
   449  005D                     _TM1IE	set	93
   450  0065                     _TM1IF	set	101
   451  005B                     _WKTIE	set	91
   452  0063                     _WKTIF	set	99
   453  0081                     _OPTION	set	129
   454  0085                     _PAMOD10	set	133
   455  0086                     _PAMOD32	set	134
   456  0087                     _PAMOD54	set	135
   457  0088                     _PAMOD76	set	136
   458  008C                     _PBMOD10	set	140
   459  008D                     _PBMOD32	set	141
   460  008E                     _PBMOD54	set	142
   461  008F                     _PBMOD76	set	143
   462  0090                     _PDMOD10	set	144
   463  0105                     _PINMOD	set	261
   464  0164                     _FlagSmoke	set	356	;_FlagSmoke
   465                           
   466                           	psect	cinit
   467  05D4                     start_initialization:	
   468  05D4  3020               	movlw	low __pbssBANK0
   469                           
   470                           ; Clear objects allocated to BANK0
   471  05D5  1383               	bcf	3,7	;select IRP bank0
   472  05D6  0084               	movwf	4
   473  05D7  3045               	movlw	low (__pbssBANK0+37)
   474  05D8  118A  27F5  118A   	fcall	clear_ram
   475                           
   476                           ; Clear objects allocated to BANK1
   477  05DB  30A0               	movlw	low __pbssBANK1
   478  05DC  0084               	movwf	4
   479  05DD  30B1               	movlw	low (__pbssBANK1+17)
   480  05DE  118A  27F5  118A   	fcall	clear_ram
   481  05E1  30A0               	movlw	low __pbssBANK3
   482                           
   483                           ; Clear objects allocated to BANK3
   484  05E2  1783               	bsf	3,7	;select IRP bank2
   485  05E3  0084               	movwf	4
   486  05E4  30E0               	movlw	low (__pbssBANK3+64)
   487  05E5  118A  27F5         	fcall	clear_ram
   488  05E7                     end_of_initialization:	
   489                           ;End of C runtime variable initialization code
   490                           
   491  05E7  0183               	clrf	3
   492  05E8  158A  2CCA         	ljmp	_main	;jump to C main() function
   493                           
   494                           	psect	bssBANK0
   495  0020                     __pbssBANK0:	
   496  0020                     _RunLED:	
   497  0020                     	ds	7
   498  0027                     _RunPWM:	
   499  0027                     	ds	3
   500  002A                     _LedsInfoFlag:	
   501  002A                     	ds	1
   502  002B                     _SysInfoFlag:	
   503  002B                     	ds	1
   504  002C                     _VoutInfoFlag:	
   505  002C                     	ds	1
   506  002D                     led_matrix_run@row:	
   507  002D                     	ds	1
   508  002E                     _GetADC:	
   509  002E                     	ds	19
   510  0041                     _RunEventLED:	
   511  0041                     	ds	4
   512                           
   513                           	psect	bssBANK1
   514  00A0                     __pbssBANK1:	
   515  00A0                     _ReadPort:	
   516  00A0                     	ds	9
   517  00A9                     _led_duty_cycles_tmp:	
   518  00A9                     	ds	8
   519                           
   520                           	psect	bssBANK3
   521  01A0                     __pbssBANK3:	
   522  01A0                     _led_duty_cycles:	
   523  01A0                     	ds	64
   524                           
   525                           	psect	clrtext
   526  07F5                     clear_ram:	
   527                           ;	Called with FSR containing the base address, and
   528                           ;	W with the last address+1
   529                           
   530  07F5  0064               	clrwdt	;clear the watchdog before getting into this loop
   531  07F6                     clrloop:	
   532  07F6  0180               	clrf	0	;clear RAM location pointed to by FSR
   533  07F7  0A84               	incf	4,f	;increment pointer
   534  07F8  0604               	xorwf	4,w	;XOR with final address
   535  07F9  1903               	btfsc	3,2	;have we reached the end yet?
   536  07FA  3400               	retlw	0	;all done for this memory range, return
   537  07FB  0604               	xorwf	4,w	;XOR again to restore value
   538  07FC  2FF6               	goto	clrloop	;do the next byte
   539                           
   540                           	psect	cstackCOMMON
   541  0070                     __pcstackCOMMON:	
   542  0070                     ?_SystemClockInit:	
   543  0070                     ?_InitGpio:	
   544                           ; 0 bytes @ 0x0
   545                           
   546  0070                     ?_Init_BOD_WDT:	
   547                           ; 0 bytes @ 0x0
   548                           
   549  0070                     ?_MCU_INIT_TIMER:	
   550                           ; 0 bytes @ 0x0
   551                           
   552  0070                     ?_KeyUpStopSmoke:	
   553                           ; 0 bytes @ 0x0
   554                           
   555  0070                     ?_SetOffNotifyLED:	
   556                           ; 0 bytes @ 0x0
   557                           
   558  0070                     ?_ClearAllRAM:	
   559                           ; 0 bytes @ 0x0
   560                           
   561  0070                     ?_UpdateElectricityGrade:	
   562                           ; 0 bytes @ 0x0
   563                           
   564  0070                     ?_ReadChargerState:	
   565                           ; 0 bytes @ 0x0
   566                           
   567  0070                     ?_PlugProgress:	
   568                           ; 0 bytes @ 0x0
   569                           
   570  0070                     ?_PortScan:	
   571                           ; 0 bytes @ 0x0
   572                           
   573  0070                     ?_ShowWarnLED:	
   574                           ; 0 bytes @ 0x0
   575                           
   576  0070                     ?_ScanShowBatLxLED:	
   577                           ; 0 bytes @ 0x0
   578                           
   579  0070                     ?_PowerProgress:	
   580                           ; 0 bytes @ 0x0
   581                           
   582  0070                     ?_IdleProgress:	
   583                           ; 0 bytes @ 0x0
   584                           
   585  0070                     ?_led_matrix_run:	
   586                           ; 0 bytes @ 0x0
   587                           
   588  0070                     ?_SmokeOut:	
   589                           ; 0 bytes @ 0x0
   590                           
   591  0070                     ??_SmokeOut:	
   592                           ; 0 bytes @ 0x0
   593                           
   594  0070                     ?_SetShowLED:	
   595                           ; 0 bytes @ 0x0
   596                           
   597  0070                     ?_ShowSegmentLED:	
   598                           ; 0 bytes @ 0x0
   599                           
   600  0070                     ?_SetShowBatLxLED:	
   601                           ; 0 bytes @ 0x0
   602                           
   603  0070                     ?_EnterSleep:	
   604                           ; 0 bytes @ 0x0
   605                           
   606  0070                     ?_led_set_io_od:	
   607                           ; 0 bytes @ 0x0
   608                           
   609  0070                     ??_led_set_io_od:	
   610                           ; 0 bytes @ 0x0
   611                           
   612  0070                     ?_led_set_io_pp:	
   613                           ; 0 bytes @ 0x0
   614                           
   615  0070                     ?_main:	
   616                           ; 0 bytes @ 0x0
   617                           
   618  0070                     ?_Interrupt_ISR:	
   619                           ; 0 bytes @ 0x0
   620                           
   621  0070                     ?_Delay_16nop:	
   622                           ; 0 bytes @ 0x0
   623                           
   624  0070                     ?_gearSwitch:	
   625                           ; 0 bytes @ 0x0
   626                           
   627  0070                     ?___bmul:	
   628                           ; 0 bytes @ 0x0
   629                           
   630  0070                     led_set_io_od@io_num:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     led_set_io_pp@type:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ___bmul@multiplicand:	
   637                           ; 1 bytes @ 0x0
   638                           
   639                           
   640                           ; 1 bytes @ 0x0
   641  0070                     	ds	1
   642  0071                     ??_led_set_io_pp:	
   643  0071                     ??___bmul:	
   644                           ; 0 bytes @ 0x1
   645                           
   646  0071                     led_set_io_pp@io_num:	
   647                           ; 0 bytes @ 0x1
   648                           
   649  0071                     ___bmul@product:	
   650                           ; 1 bytes @ 0x1
   651                           
   652                           
   653                           ; 1 bytes @ 0x1
   654  0071                     	ds	1
   655  0072                     ___bmul@multiplier:	
   656                           
   657                           ; 1 bytes @ 0x2
   658  0072                     	ds	1
   659  0073                     ??_led_matrix_run:	
   660                           
   661                           ; 0 bytes @ 0x3
   662  0073                     	ds	4
   663  0077                     led_matrix_run@x:	
   664                           
   665                           ; 1 bytes @ 0x7
   666  0077                     	ds	1
   667  0078                     led_matrix_run@y:	
   668                           
   669                           ; 1 bytes @ 0x8
   670  0078                     	ds	1
   671  0079                     led_matrix_run@rowCount:	
   672                           
   673                           ; 1 bytes @ 0x9
   674  0079                     	ds	1
   675  007A                     ??_Interrupt_ISR:	
   676                           
   677                           ; 0 bytes @ 0xA
   678  007A                     	ds	4
   679                           
   680                           	psect	cstackBANK0
   681  0045                     __pcstackBANK0:	
   682  0045                     ??_SystemClockInit:	
   683  0045                     ??_InitGpio:	
   684                           ; 0 bytes @ 0x0
   685                           
   686  0045                     ??_Init_BOD_WDT:	
   687                           ; 0 bytes @ 0x0
   688                           
   689  0045                     ??_MCU_INIT_TIMER:	
   690                           ; 0 bytes @ 0x0
   691                           
   692  0045                     ??_KeyUpStopSmoke:	
   693                           ; 0 bytes @ 0x0
   694                           
   695  0045                     ??_SetOffNotifyLED:	
   696                           ; 0 bytes @ 0x0
   697                           
   698  0045                     ?_SetWarnEvent:	
   699                           ; 0 bytes @ 0x0
   700                           
   701  0045                     ??_ClearAllRAM:	
   702                           ; 0 bytes @ 0x0
   703                           
   704  0045                     ??_UpdateElectricityGrade:	
   705                           ; 0 bytes @ 0x0
   706                           
   707  0045                     ??_ScanShowBatLxLED:	
   708                           ; 0 bytes @ 0x0
   709                           
   710  0045                     ??_IdleProgress:	
   711                           ; 0 bytes @ 0x0
   712                           
   713  0045                     ??_SetShowLED:	
   714                           ; 0 bytes @ 0x0
   715                           
   716  0045                     ??_ShowSegmentLED:	
   717                           ; 0 bytes @ 0x0
   718                           
   719  0045                     ??_SetShowBatLxLED:	
   720                           ; 0 bytes @ 0x0
   721                           
   722  0045                     ??_EnterSleep:	
   723                           ; 0 bytes @ 0x0
   724                           
   725  0045                     ??_Delay_16nop:	
   726                           ; 0 bytes @ 0x0
   727                           
   728  0045                     ?_HAL_ADC_Sample:	
   729                           ; 0 bytes @ 0x0
   730                           
   731  0045                     ?___lmul:	
   732                           ; 2 bytes @ 0x0
   733                           
   734  0045                     ?___aldiv:	
   735                           ; 4 bytes @ 0x0
   736                           
   737  0045                     SetShowBatLxLED@ShowBatLx:	
   738                           ; 4 bytes @ 0x0
   739                           
   740  0045                     SetWarnEvent@WarnEvent:	
   741                           ; 1 bytes @ 0x0
   742                           
   743  0045                     ShowSegmentLED@temp_seg0:	
   744                           ; 1 bytes @ 0x0
   745                           
   746  0045                     HAL_ADC_Sample@Filter:	
   747                           ; 1 bytes @ 0x0
   748                           
   749  0045                     ___lmul@multiplier:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  0045                     ___aldiv@divisor:	
   753                           ; 4 bytes @ 0x0
   754                           
   755                           
   756                           ; 4 bytes @ 0x0
   757  0045                     	ds	1
   758  0046                     SetWarnEvent@WarnShowTime:	
   759  0046                     ShowSegmentLED@temp_seg2:	
   760                           ; 1 bytes @ 0x1
   761                           
   762                           
   763                           ; 1 bytes @ 0x1
   764  0046                     	ds	1
   765  0047                     ??_HAL_ADC_Sample:	
   766  0047                     SetWarnEvent@WarnShowCnt:	
   767                           ; 0 bytes @ 0x2
   768                           
   769  0047                     ShowSegmentLED@temp_seg3:	
   770                           ; 1 bytes @ 0x2
   771                           
   772                           
   773                           ; 1 bytes @ 0x2
   774  0047                     	ds	1
   775  0048                     ??_SetWarnEvent:	
   776  0048                     SetWarnEvent@EmRunEvent:	
   777                           ; 0 bytes @ 0x3
   778                           
   779  0048                     ShowSegmentLED@ShowEvent:	
   780                           ; 1 bytes @ 0x3
   781                           
   782  0048                     UpdateElectricityGrade@temp_TimeUp:	
   783                           ; 1 bytes @ 0x3
   784                           
   785                           
   786                           ; 2 bytes @ 0x3
   787  0048                     	ds	1
   788  0049                     ??_ReadChargerState:	
   789  0049                     ??_PlugProgress:	
   790                           ; 0 bytes @ 0x4
   791                           
   792  0049                     ??_PortScan:	
   793                           ; 0 bytes @ 0x4
   794                           
   795  0049                     ??_ShowWarnLED:	
   796                           ; 0 bytes @ 0x4
   797                           
   798  0049                     ??_gearSwitch:	
   799                           ; 0 bytes @ 0x4
   800                           
   801  0049                     HAL_ADC_Sample@ADC_CHx:	
   802                           ; 0 bytes @ 0x4
   803                           
   804  0049                     ___lmul@multiplicand:	
   805                           ; 1 bytes @ 0x4
   806                           
   807  0049                     ___aldiv@dividend:	
   808                           ; 4 bytes @ 0x4
   809                           
   810                           
   811                           ; 4 bytes @ 0x4
   812  0049                     	ds	1
   813  004A                     UpdateElectricityGrade@temp_Percent:	
   814  004A                     HAL_ADC_Sample@Value_Sum:	
   815                           ; 1 bytes @ 0x5
   816                           
   817                           
   818                           ; 2 bytes @ 0x5
   819  004A                     	ds	2
   820  004C                     HAL_ADC_Sample@i_max:	
   821                           
   822                           ; 1 bytes @ 0x7
   823  004C                     	ds	1
   824  004D                     ??___lmul:	
   825  004D                     ??___aldiv:	
   826                           ; 0 bytes @ 0x8
   827                           
   828  004D                     ___aldiv@counter:	
   829                           ; 0 bytes @ 0x8
   830                           
   831  004D                     HAL_ADC_Sample@Value_Min:	
   832                           ; 1 bytes @ 0x8
   833                           
   834  004D                     ___lmul@product:	
   835                           ; 2 bytes @ 0x8
   836                           
   837                           
   838                           ; 4 bytes @ 0x8
   839  004D                     	ds	1
   840  004E                     ___aldiv@sign:	
   841                           
   842                           ; 1 bytes @ 0x9
   843  004E                     	ds	1
   844  004F                     HAL_ADC_Sample@Value_Max:	
   845  004F                     ___aldiv@quotient:	
   846                           ; 2 bytes @ 0xA
   847                           
   848                           
   849                           ; 4 bytes @ 0xA
   850  004F                     	ds	2
   851  0051                     ?___lldiv:	
   852  0051                     HAL_ADC_Sample@Value:	
   853                           ; 4 bytes @ 0xC
   854                           
   855  0051                     ___lldiv@divisor:	
   856                           ; 2 bytes @ 0xC
   857                           
   858                           
   859                           ; 4 bytes @ 0xC
   860  0051                     	ds	4
   861  0055                     ___lldiv@dividend:	
   862                           
   863                           ; 4 bytes @ 0x10
   864  0055                     	ds	4
   865  0059                     ??___lldiv:	
   866  0059                     ___lldiv@quotient:	
   867                           ; 0 bytes @ 0x14
   868                           
   869                           
   870                           ; 4 bytes @ 0x14
   871  0059                     	ds	4
   872  005D                     ___lldiv@counter:	
   873                           
   874                           ; 1 bytes @ 0x18
   875  005D                     	ds	1
   876  005E                     ?_ReadLoadRes:	
   877                           
   878                           ; 2 bytes @ 0x19
   879  005E                     	ds	2
   880  0060                     ??_ReadLoadRes:	
   881                           
   882                           ; 0 bytes @ 0x1B
   883  0060                     	ds	2
   884  0062                     ReadLoadRes@LoadValue:	
   885                           
   886                           ; 2 bytes @ 0x1D
   887  0062                     	ds	2
   888  0064                     ??_PowerProgress:	
   889                           
   890                           ; 0 bytes @ 0x1F
   891  0064                     	ds	4
   892  0068                     PowerProgress@AD_Temp:	
   893                           
   894                           ; 2 bytes @ 0x23
   895  0068                     	ds	2
   896  006A                     ??_main:	
   897                           
   898                           	psect	maintext
   899  0CCA                     __pmaintext:	
   900                           ; 0 bytes @ 0x25
   901 ;;Data sizes: Strings 0, constant 330, data 0, bss 118, persistent 0 stack 0
   902 ;;Auto spaces:   Size  Autos    Used
   903 ;; COMMON          14     14      14
   904 ;; BANK0           80     37      74
   905 ;; BANK1           80      0      17
   906 ;; BANK3           80      0      64
   907 ;; BANK2h          10      0       0
   908 ;; BANK2l          57      0       0
   909 ;;
   910 ;; Pointer list with targets:
   911 ;; ?_ReadLoadRes	unsigned int  size(1) Largest target is 0
   912 ;;
   913 ;; ?___lmul	unsigned long  size(1) Largest target is 0
   914 ;;
   915 ;; ?___lldiv	unsigned long  size(1) Largest target is 0
   916 ;;
   917 ;; ?___aldiv	long  size(1) Largest target is 0
   918 ;;
   919 ;; ?_HAL_ADC_Sample	unsigned int  size(1) Largest target is 0
   920 ;;
   921 ;; sp__tyw_memcpy	PTR void  size(1) Largest target is 8
   922 ;;		 -> led_duty_cycles_tmp(BANK1[8]), 
   923 ;;
   924 ;; sp__tyw_memset	PTR void  size(1) Largest target is 64
   925 ;;		 -> led_duty_cycles(BANK3[64]), 
   926 ;;
   927 ;; SetWarnEvent@EmRunEvent	PTR struct . size(1) Largest target is 4
   928 ;;		 -> RunEventLED(BANK0[4]), 
   929 ;;
   930 ;;
   931 ;; Critical Paths under _main in COMMON
   932 ;;
   933 ;;   None.
   934 ;;
   935 ;; Critical Paths under _Interrupt_ISR in COMMON
   936 ;;
   937 ;;   _Interrupt_ISR->_led_matrix_run
   938 ;;   _led_matrix_run->___bmul
   939 ;;
   940 ;; Critical Paths under _main in BANK0
   941 ;;
   942 ;;   _main->_PowerProgress
   943 ;;   _PowerProgress->_ReadLoadRes
   944 ;;   _PortScan->_SetWarnEvent
   945 ;;   _PortScan->_ShowSegmentLED
   946 ;;   _ReadLoadRes->___lldiv
   947 ;;   _gearSwitch->_SetWarnEvent
   948 ;;   _gearSwitch->_ShowSegmentLED
   949 ;;   _ShowWarnLED->_ShowSegmentLED
   950 ;;   _PlugProgress->_SetWarnEvent
   951 ;;   _ReadChargerState->_SetWarnEvent
   952 ;;   ___lldiv->___lmul
   953 ;;
   954 ;; Critical Paths under _Interrupt_ISR in BANK0
   955 ;;
   956 ;;   None.
   957 ;;
   958 ;; Critical Paths under _main in BANK1
   959 ;;
   960 ;;   None.
   961 ;;
   962 ;; Critical Paths under _Interrupt_ISR in BANK1
   963 ;;
   964 ;;   None.
   965 ;;
   966 ;; Critical Paths under _main in BANK3
   967 ;;
   968 ;;   None.
   969 ;;
   970 ;; Critical Paths under _Interrupt_ISR in BANK3
   971 ;;
   972 ;;   None.
   973 ;;
   974 ;; Critical Paths under _main in BANK2h
   975 ;;
   976 ;;   None.
   977 ;;
   978 ;; Critical Paths under _Interrupt_ISR in BANK2h
   979 ;;
   980 ;;   None.
   981 ;;
   982 ;; Critical Paths under _main in BANK2l
   983 ;;
   984 ;;   None.
   985 ;;
   986 ;; Critical Paths under _Interrupt_ISR in BANK2l
   987 ;;
   988 ;;   None.
   989 ;;
   990 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   991 ;;
   992 ;;
   993 ;;Call Graph Tables:
   994 ;;
   995 ;; ---------------------------------------------------------------------------------
   996 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   997 ;; ---------------------------------------------------------------------------------
   998 ;; (0) _main                                                 0     0      0    4300
   999 ;;                    _SystemClockInit
  1000 ;;                           _InitGpio
  1001 ;;                       _Init_BOD_WDT
  1002 ;;                     _MCU_INIT_TIMER
  1003 ;;                     _KeyUpStopSmoke
  1004 ;;                    _SetOffNotifyLED
  1005 ;;                       _SetWarnEvent
  1006 ;;                        _ClearAllRAM
  1007 ;;                     _HAL_ADC_Sample
  1008 ;;                            ___aldiv
  1009 ;;             _UpdateElectricityGrade
  1010 ;;                   _ReadChargerState
  1011 ;;                       _PlugProgress
  1012 ;;                           _PortScan
  1013 ;;                        _ShowWarnLED
  1014 ;;                   _ScanShowBatLxLED
  1015 ;;                      _PowerProgress
  1016 ;;                       _IdleProgress
  1017 ;; ---------------------------------------------------------------------------------
  1018 ;; (1) _IdleProgress                                         0     0      0       0
  1019 ;;                         _EnterSleep
  1020 ;; ---------------------------------------------------------------------------------
  1021 ;; (1) _PowerProgress                                        6     6      0    1882
  1022 ;;                                             31 BANK0      6     6      0
  1023 ;;                    _SetOffNotifyLED
  1024 ;;                         _SetShowLED
  1025 ;;                       _SetWarnEvent
  1026 ;;                     _ShowSegmentLED
  1027 ;;                    _SetShowBatLxLED
  1028 ;;                        _ReadLoadRes
  1029 ;;                     _KeyUpStopSmoke
  1030 ;;                     _HAL_ADC_Sample
  1031 ;;                             ___lmul
  1032 ;;                            ___lldiv
  1033 ;; ---------------------------------------------------------------------------------
  1034 ;; (1) _PortScan                                             0     0      0     864
  1035 ;;                         _gearSwitch
  1036 ;;                     _KeyUpStopSmoke
  1037 ;;                    _SetOffNotifyLED
  1038 ;;                       _SetWarnEvent
  1039 ;;                         _SetShowLED
  1040 ;;                     _ShowSegmentLED
  1041 ;;                    _SetShowBatLxLED
  1042 ;; ---------------------------------------------------------------------------------
  1043 ;; (2) _EnterSleep                                           0     0      0       0
  1044 ;;                           _InitGpio
  1045 ;;                        _Delay_16nop
  1046 ;;                       _Init_BOD_WDT
  1047 ;;                     _MCU_INIT_TIMER
  1048 ;; ---------------------------------------------------------------------------------
  1049 ;; (2) _ReadLoadRes                                          6     4      2     715
  1050 ;;                                             25 BANK0      6     4      2
  1051 ;;                     _HAL_ADC_Sample
  1052 ;;                             ___lmul
  1053 ;;                            ___lldiv
  1054 ;; ---------------------------------------------------------------------------------
  1055 ;; (2) _gearSwitch                                           0     0      0     432
  1056 ;;                    _SetOffNotifyLED
  1057 ;;                         _SetShowLED
  1058 ;;                       _SetWarnEvent
  1059 ;;                     _ShowSegmentLED
  1060 ;;                    _SetShowBatLxLED
  1061 ;; ---------------------------------------------------------------------------------
  1062 ;; (1) _ShowWarnLED                                          0     0      0     256
  1063 ;;                         _SetShowLED
  1064 ;;                     _ShowSegmentLED
  1065 ;;                    _SetShowBatLxLED
  1066 ;; ---------------------------------------------------------------------------------
  1067 ;; (1) _PlugProgress                                         0     0      0     176
  1068 ;;                       _SetWarnEvent
  1069 ;; ---------------------------------------------------------------------------------
  1070 ;; (1) _ReadChargerState                                     0     0      0     187
  1071 ;;                       _SetWarnEvent
  1072 ;;                    _SetShowBatLxLED
  1073 ;; ---------------------------------------------------------------------------------
  1074 ;; (1) _SystemClockInit                                      0     0      0       0
  1075 ;;                        _Delay_16nop
  1076 ;; ---------------------------------------------------------------------------------
  1077 ;; (1) ___aldiv                                             14     6      8     300
  1078 ;;                                              0 BANK0     14     6      8
  1079 ;; ---------------------------------------------------------------------------------
  1080 ;; (2) ___lldiv                                             13     5      8     162
  1081 ;;                                             12 BANK0     13     5      8
  1082 ;;                             ___lmul (ARG)
  1083 ;; ---------------------------------------------------------------------------------
  1084 ;; (2) ___lmul                                              12     4      8      92
  1085 ;;                                              0 BANK0     12     4      8
  1086 ;; ---------------------------------------------------------------------------------
  1087 ;; (2) _SetShowBatLxLED                                      1     1      0      11
  1088 ;;                                              0 BANK0      1     1      0
  1089 ;; ---------------------------------------------------------------------------------
  1090 ;; (2) _ShowSegmentLED                                       4     4      0     245
  1091 ;;                                              0 BANK0      4     4      0
  1092 ;; ---------------------------------------------------------------------------------
  1093 ;; (2) _SetShowLED                                           0     0      0       0
  1094 ;; ---------------------------------------------------------------------------------
  1095 ;; (3) _Delay_16nop                                          0     0      0       0
  1096 ;; ---------------------------------------------------------------------------------
  1097 ;; (1) _ScanShowBatLxLED                                     0     0      0       0
  1098 ;; ---------------------------------------------------------------------------------
  1099 ;; (1) _UpdateElectricityGrade                               6     6      0     114
  1100 ;;                                              0 BANK0      6     6      0
  1101 ;; ---------------------------------------------------------------------------------
  1102 ;; (2) _HAL_ADC_Sample                                      14    12      2     345
  1103 ;;                                              0 BANK0     14    12      2
  1104 ;; ---------------------------------------------------------------------------------
  1105 ;; (1) _ClearAllRAM                                          0     0      0       0
  1106 ;; ---------------------------------------------------------------------------------
  1107 ;; (2) _SetWarnEvent                                         4     1      3     176
  1108 ;;                                              0 BANK0      4     1      3
  1109 ;; ---------------------------------------------------------------------------------
  1110 ;; (2) _SetOffNotifyLED                                      0     0      0       0
  1111 ;; ---------------------------------------------------------------------------------
  1112 ;; (2) _KeyUpStopSmoke                                       0     0      0       0
  1113 ;; ---------------------------------------------------------------------------------
  1114 ;; (3) _MCU_INIT_TIMER                                       0     0      0       0
  1115 ;; ---------------------------------------------------------------------------------
  1116 ;; (3) _Init_BOD_WDT                                         0     0      0       0
  1117 ;; ---------------------------------------------------------------------------------
  1118 ;; (3) _InitGpio                                             0     0      0       0
  1119 ;; ---------------------------------------------------------------------------------
  1120 ;; Estimated maximum stack depth 3
  1121 ;; ---------------------------------------------------------------------------------
  1122 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1123 ;; ---------------------------------------------------------------------------------
  1124 ;; (4) _Interrupt_ISR                                        4     4      0     561
  1125 ;;                                             10 COMMON     4     4      0
  1126 ;;                     _led_matrix_run
  1127 ;;                           _SmokeOut
  1128 ;; ---------------------------------------------------------------------------------
  1129 ;; (5) _led_matrix_run                                       7     7      0     561
  1130 ;;                                              3 COMMON     7     7      0
  1131 ;;                      _led_set_io_od
  1132 ;;                             ___bmul
  1133 ;;                      _led_set_io_pp
  1134 ;; ---------------------------------------------------------------------------------
  1135 ;; (6) ___bmul                                               3     2      1      68
  1136 ;;                                              0 COMMON     3     2      1
  1137 ;; ---------------------------------------------------------------------------------
  1138 ;; (6) _led_set_io_pp                                        2     1      1     198
  1139 ;;                                              0 COMMON     2     1      1
  1140 ;; ---------------------------------------------------------------------------------
  1141 ;; (6) _led_set_io_od                                        1     1      0      22
  1142 ;;                                              0 COMMON     1     1      0
  1143 ;; ---------------------------------------------------------------------------------
  1144 ;; (5) _SmokeOut                                             0     0      0       0
  1145 ;; ---------------------------------------------------------------------------------
  1146 ;; Estimated maximum stack depth 6
  1147 ;; ---------------------------------------------------------------------------------
  1148 ;; Call Graph Graphs:
  1149 ;; _main (ROOT)
  1150 ;;   _SystemClockInit
  1151 ;;     _Delay_16nop
  1152 ;;   _InitGpio
  1153 ;;   _Init_BOD_WDT
  1154 ;;   _MCU_INIT_TIMER
  1155 ;;   _KeyUpStopSmoke
  1156 ;;   _SetOffNotifyLED
  1157 ;;   _SetWarnEvent
  1158 ;;   _ClearAllRAM
  1159 ;;   _HAL_ADC_Sample
  1160 ;;   ___aldiv
  1161 ;;   _UpdateElectricityGrade
  1162 ;;   _ReadChargerState
  1163 ;;     _SetWarnEvent
  1164 ;;     _SetShowBatLxLED
  1165 ;;   _PlugProgress
  1166 ;;     _SetWarnEvent
  1167 ;;   _PortScan
  1168 ;;     _gearSwitch
  1169 ;;       _SetOffNotifyLED
  1170 ;;       _SetShowLED
  1171 ;;       _SetWarnEvent
  1172 ;;       _ShowSegmentLED
  1173 ;;       _SetShowBatLxLED
  1174 ;;     _KeyUpStopSmoke
  1175 ;;     _SetOffNotifyLED
  1176 ;;     _SetWarnEvent
  1177 ;;     _SetShowLED
  1178 ;;     _ShowSegmentLED
  1179 ;;     _SetShowBatLxLED
  1180 ;;   _ShowWarnLED
  1181 ;;     _SetShowLED
  1182 ;;     _ShowSegmentLED
  1183 ;;     _SetShowBatLxLED
  1184 ;;   _ScanShowBatLxLED
  1185 ;;   _PowerProgress
  1186 ;;     _SetOffNotifyLED
  1187 ;;     _SetShowLED
  1188 ;;     _SetWarnEvent
  1189 ;;     _ShowSegmentLED
  1190 ;;     _SetShowBatLxLED
  1191 ;;     _ReadLoadRes
  1192 ;;       _HAL_ADC_Sample
  1193 ;;       ___lmul
  1194 ;;       ___lldiv
  1195 ;;         ___lmul (ARG)
  1196 ;;     _KeyUpStopSmoke
  1197 ;;     _HAL_ADC_Sample
  1198 ;;     ___lmul
  1199 ;;     ___lldiv
  1200 ;;       ___lmul (ARG)
  1201 ;;   _IdleProgress
  1202 ;;     _EnterSleep
  1203 ;;       _InitGpio
  1204 ;;       _Delay_16nop
  1205 ;;       _Init_BOD_WDT
  1206 ;;       _MCU_INIT_TIMER
  1207 ;;
  1208 ;; _Interrupt_ISR (ROOT)
  1209 ;;   _led_matrix_run
  1210 ;;     _led_set_io_od
  1211 ;;     ___bmul
  1212 ;;     _led_set_io_pp
  1213 ;;   _SmokeOut
  1214 ;;
  1215 ;; Address spaces:
  1216 ;;Name               Size   Autos  Total    Cost      Usage
  1217 ;;BITCOMMON            E      0       0       0        0.0%
  1218 ;;EEDATA              80      0       0       0        0.0%
  1219 ;;NULL                 0      0       0       0        0.0%
  1220 ;;CODE                 0      0       0       0        0.0%
  1221 ;;COMMON               E      E       E       1      100.0%
  1222 ;;BITSFR0              0      0       0       1        0.0%
  1223 ;;SFR0                 0      0       0       1        0.0%
  1224 ;;BITSFR1              0      0       0       2        0.0%
  1225 ;;SFR1                 0      0       0       2        0.0%
  1226 ;;STACK                0      0       9       2        0.0%
  1227 ;;BITBANK0            50      0       0       3        0.0%
  1228 ;;BANK0               50     25      4A       4       92.5%
  1229 ;;BITSFR3              0      0       0       4        0.0%
  1230 ;;SFR3                 0      0       0       4        0.0%
  1231 ;;BANK1               50      0      11       5       21.3%
  1232 ;;BITSFR2              0      0       0       5        0.0%
  1233 ;;SFR2                 0      0       0       5        0.0%
  1234 ;;BANK3               50      0      40       6       80.0%
  1235 ;;ABS                  0      0      A9       7        0.0%
  1236 ;;BITBANK1            50      0       0       8        0.0%
  1237 ;;BITBANK3            50      0       0       9        0.0%
  1238 ;;BITBANK2h            A      0       0      10        0.0%
  1239 ;;BITBANK2l           39      0       0      11        0.0%
  1240 ;;BANK2h               A      0       0      12        0.0%
  1241 ;;BANK2l              39      0       0      13        0.0%
  1242 ;;DATA                 0      0      B2      14        0.0%
  1243                           
  1244                           
  1245 ;; *************** function _main *****************
  1246 ;; Defined at:
  1247 ;;		line 50 in file "E:\workSpace\git_work\jm\P2\code\main.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;		None
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;		None               void
  1254 ;; Registers used:
  1255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 17F/0
  1258 ;;		On exit  : 60/0
  1259 ;;		Unchanged: FFE00/0
  1260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  1261 ;;      Params:         0       0       0       0       0       0
  1262 ;;      Locals:         0       0       0       0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0
  1264 ;;      Totals:         0       0       0       0       0       0
  1265 ;;Total ram usage:        0 bytes
  1266 ;; Hardware stack levels required when called:    6
  1267 ;; This function calls:
  1268 ;;		_SystemClockInit
  1269 ;;		_InitGpio
  1270 ;;		_Init_BOD_WDT
  1271 ;;		_MCU_INIT_TIMER
  1272 ;;		_KeyUpStopSmoke
  1273 ;;		_SetOffNotifyLED
  1274 ;;		_SetWarnEvent
  1275 ;;		_ClearAllRAM
  1276 ;;		_HAL_ADC_Sample
  1277 ;;		___aldiv
  1278 ;;		_UpdateElectricityGrade
  1279 ;;		_ReadChargerState
  1280 ;;		_PlugProgress
  1281 ;;		_PortScan
  1282 ;;		_ShowWarnLED
  1283 ;;		_ScanShowBatLxLED
  1284 ;;		_PowerProgress
  1285 ;;		_IdleProgress
  1286 ;; This function is called by:
  1287 ;;		Startup code after reset
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290  0CCA                     _main:	
  1291                           
  1292                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1293  0CCA  0064               	clrwdt	;#
  1294                           
  1295                           ;main.c: 53: INTIE = 0x00;
  1296  0CCB  018B               	clrf	11	;volatile
  1297                           
  1298                           ;main.c: 54: INTIE1 = 0x00;
  1299  0CCC  1283               	bcf	3,5	;RP0=0, select bank0
  1300  0CCD  1303               	bcf	3,6	;RP1=0, select bank0
  1301  0CCE  018D               	clrf	13	;volatile
  1302                           
  1303                           ;main.c: 57: SystemClockInit();
  1304  0CCF  158A  2431  158A   	fcall	_SystemClockInit
  1305                           
  1306                           ;main.c: 58: InitGpio();
  1307  0CD2  158A  246B  158A   	fcall	_InitGpio
  1308                           
  1309                           ;main.c: 81: Init_BOD_WDT();
  1310  0CD5  158A  2492  158A   	fcall	_Init_BOD_WDT
  1311                           
  1312                           ;main.c: 85: MCU_INIT_TIMER();
  1313  0CD8  158A  24AD  158A   	fcall	_MCU_INIT_TIMER
  1314                           
  1315                           ;main.c: 88: if(FlagSmoke == 0xA55A)
  1316  0CDB  1703               	bsf	3,6	;RP1=1, select bank2
  1317  0CDC  0865               	movf	101,w	;volatile
  1318  0CDD  3AA5               	xorlw	165
  1319  0CDE  305A               	movlw	90
  1320  0CDF  1903               	skipnz
  1321  0CE0  0664               	xorwf	100,w	;volatile
  1322  0CE1  1D03               	skipz
  1323  0CE2  2D07               	goto	l16577
  1324                           
  1325                           ;main.c: 89: {
  1326                           ;main.c: 90: VoutInfoFlag.bits.b7 = 1;VoutInfoFlag.bits.b0 = 0;
  1327  0CE3  1303               	bcf	3,6	;RP1=0, select bank0
  1328  0CE4  17AC               	bsf	_VoutInfoFlag,7
  1329  0CE5  102C               	bcf	_VoutInfoFlag,0
  1330                           
  1331                           ;main.c: 91: KeyUpStopSmoke();
  1332  0CE6  118A  23A2  158A   	fcall	_KeyUpStopSmoke
  1333                           
  1334                           ;main.c: 92: SetOffNotifyLED();
  1335  0CE9  118A  2384  158A   	fcall	_SetOffNotifyLED
  1336                           
  1337                           ;main.c: 93: SetWarnEvent(&RunEventLED,14,25,8);
  1338  0CEC  300E               	movlw	14
  1339  0CED  00C5               	movwf	?_SetWarnEvent
  1340  0CEE  3019               	movlw	25
  1341  0CEF  00C6               	movwf	?_SetWarnEvent+1
  1342  0CF0  3008               	movlw	8
  1343  0CF1  00C7               	movwf	?_SetWarnEvent+2
  1344  0CF2  3041               	movlw	_RunEventLED& (0+255)
  1345  0CF3  118A  238D  158A   	fcall	_SetWarnEvent
  1346                           
  1347                           ;main.c: 94: if(PAD6 == 1) SysInfoFlag.bits.b2 = 1;
  1348  0CF6  1B05               	btfsc	5,6
  1349  0CF7  152B               	bsf	_SysInfoFlag,2
  1350                           
  1351                           ;main.c: 95: if(PBD2 == 1) ReadPort.ScanOld |= 0x01;
  1352  0CF8  1D06               	btfss	6,2
  1353  0CF9  2CFC               	goto	l16571
  1354  0CFA  1683               	bsf	3,5	;RP0=1, select bank1
  1355  0CFB  1422               	bsf	(_ReadPort^(0+128)+2),0
  1356  0CFC                     l16571:	
  1357                           
  1358                           ;main.c: 97: ReadPort.KeyState = 0x00;
  1359  0CFC  1683               	bsf	3,5	;RP0=1, select bank1
  1360  0CFD  01A4               	clrf	(_ReadPort^(0+128)+4)
  1361                           
  1362                           ;main.c: 98: ReadPort.KeyNum = 0;
  1363  0CFE  01A5               	clrf	(_ReadPort^(0+128)+5)
  1364                           
  1365                           ;main.c: 99: SysInfoFlag.bits.b4 = 0;
  1366  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
  1367  0D00  122B               	bcf	_SysInfoFlag,4
  1368                           
  1369                           ;main.c: 100: TimeCnt.SleepTime = 0;
  1370  0D01  1703               	bsf	3,6	;RP1=1, select bank2
  1371  0D02  01DC               	clrf	92
  1372  0D03  01DD               	clrf	93
  1373                           
  1374                           ;main.c: 101: SysInfoFlag.bits.b0 = 1;
  1375  0D04  1303               	bcf	3,6	;RP1=0, select bank0
  1376  0D05  142B               	bsf	_SysInfoFlag,0
  1377                           
  1378                           ;main.c: 102: }
  1379  0D06  2D25               	goto	l16589
  1380  0D07                     l16577:	
  1381                           
  1382                           ;main.c: 103: else
  1383                           ;main.c: 104: {
  1384                           ;main.c: 105: ClearAllRAM();
  1385  0D07  118A  27D1  158A   	fcall	_ClearAllRAM
  1386  0D0A  3060               	movlw	96
  1387                           
  1388                           ;main.c: 106: GetADC.Vout_Lx = 0x01;
  1389  0D0B  1303               	bcf	3,6	;RP1=0, select bank0
  1390  0D0C  01B1               	clrf	_GetADC+3
  1391  0D0D  0AB1               	incf	_GetADC+3,f
  1392                           
  1393                           ;main.c: 107: TimeCnt.SmokeTime = 0x00;
  1394  0D0E  0084               	movwf	4
  1395  0D0F  1783               	bsf	3,7	;select IRP bank2
  1396  0D10  0180               	clrf	0
  1397  0D11  0A84               	incf	4,f
  1398  0D12  0180               	clrf	0
  1399  0D13  0A84               	incf	4,f
  1400  0D14  0180               	clrf	0
  1401  0D15  0A84               	incf	4,f
  1402  0D16  0180               	clrf	0
  1403                           
  1404                           ;main.c: 108: SetOffNotifyLED();
  1405  0D17  118A  2384  158A   	fcall	_SetOffNotifyLED
  1406                           
  1407                           ;main.c: 109: SetWarnEvent(&RunEventLED,16,25,16);
  1408  0D1A  3010               	movlw	16
  1409  0D1B  00C5               	movwf	?_SetWarnEvent
  1410  0D1C  3019               	movlw	25
  1411  0D1D  00C6               	movwf	?_SetWarnEvent+1
  1412  0D1E  3010               	movlw	16
  1413  0D1F  00C7               	movwf	?_SetWarnEvent+2
  1414  0D20  3041               	movlw	_RunEventLED& (0+255)
  1415  0D21  118A  238D  158A   	fcall	_SetWarnEvent
  1416                           
  1417                           ;main.c: 110: SysInfoFlag.bits.b4 = 1;
  1418  0D24  162B               	bsf	_SysInfoFlag,4
  1419  0D25                     l16589:	
  1420                           
  1421                           ;main.c: 114: {
  1422                           ;main.c: 115: if(SysInfoFlag.bits.b6 != 0)
  1423  0D25  1F2B               	btfss	_SysInfoFlag,6
  1424  0D26  2D9C               	goto	l16631
  1425                           
  1426                           ;main.c: 116: {
  1427                           ;main.c: 117: SysInfoFlag.bits.b6 = 0;
  1428  0D27  132B               	bcf	_SysInfoFlag,6
  1429  0D28  0064               	clrwdt	;#
  1430                           
  1431                           ;main.c: 120: GetADC.BatteryVoltage = HAL_ADC_Sample(14,1 );
  1432  0D29  1283               	bcf	3,5	;RP0=0, select bank0
  1433  0D2A  300E               	movlw	14
  1434  0D2B  1303               	bcf	3,6	;RP1=0, select bank0
  1435  0D2C  01C5               	clrf	?_HAL_ADC_Sample
  1436  0D2D  0AC5               	incf	?_HAL_ADC_Sample,f
  1437  0D2E  158A  2719  158A   	fcall	_HAL_ADC_Sample
  1438  0D31  0846               	movf	?_HAL_ADC_Sample+1,w
  1439  0D32  00B3               	movwf	_GetADC+5
  1440  0D33  0845               	movf	?_HAL_ADC_Sample,w
  1441  0D34  00B2               	movwf	_GetADC+4
  1442                           
  1443                           ;main.c: 121: GetADC.BatteryVoltage = 4915200/GetADC.BatteryVoltage;
  1444  0D35  00C5               	movwf	?___aldiv
  1445  0D36  0833               	movf	_GetADC+5,w
  1446  0D37  00C6               	movwf	?___aldiv+1
  1447  0D38  304B               	movlw	75
  1448  0D39  01C7               	clrf	?___aldiv+2
  1449  0D3A  01C8               	clrf	?___aldiv+3
  1450  0D3B  01CC               	clrf	?___aldiv+7
  1451  0D3C  00CB               	movwf	?___aldiv+6
  1452  0D3D  01CA               	clrf	?___aldiv+5
  1453  0D3E  01C9               	clrf	?___aldiv+4
  1454  0D3F  118A  275C  158A   	fcall	___aldiv
  1455  0D42  0846               	movf	?___aldiv+1,w
  1456  0D43  00B3               	movwf	_GetADC+5
  1457  0D44  0845               	movf	?___aldiv,w
  1458  0D45  00B2               	movwf	_GetADC+4
  1459                           
  1460                           ;main.c: 122: UpdateElectricityGrade();
  1461  0D46  158A  25A6  158A   	fcall	_UpdateElectricityGrade
  1462                           
  1463                           ;main.c: 124: if(SysInfoFlag.bits.b4 == 0)
  1464  0D49  1283               	bcf	3,5	;RP0=0, select bank0
  1465  0D4A  1303               	bcf	3,6	;RP1=0, select bank0
  1466  0D4B  1A2B               	btfsc	_SysInfoFlag,4
  1467  0D4C  2D8D               	goto	l16621
  1468                           
  1469                           ;main.c: 125: {
  1470                           ;main.c: 126: if(VoutInfoFlag.bits.b7 != 0)
  1471  0D4D  1FAC               	btfss	_VoutInfoFlag,7
  1472  0D4E  2D84               	goto	l16619
  1473                           
  1474                           ;main.c: 127: {
  1475                           ;main.c: 128: if(GetADC.BatteryVoltage < 2800) GetADC.LowVolCnt++;
  1476  0D4F  300A               	movlw	10
  1477  0D50  0233               	subwf	_GetADC+5,w
  1478  0D51  30F0               	movlw	240
  1479  0D52  1903               	skipnz
  1480  0D53  0232               	subwf	_GetADC+4,w
  1481  0D54  1803               	skipnc
  1482  0D55  2D58               	goto	l16605
  1483  0D56  0AAE               	incf	_GetADC,f
  1484  0D57  2D59               	goto	l16607
  1485  0D58                     l16605:	
  1486                           
  1487                           ;main.c: 129: else GetADC.LowVolCnt = 0;
  1488  0D58  01AE               	clrf	_GetADC
  1489  0D59                     l16607:	
  1490                           
  1491                           ;main.c: 131: if(TimeCnt.SmokeTask < 0xEA60 )
  1492  0D59  30EA               	movlw	234
  1493  0D5A  1703               	bsf	3,6	;RP1=1, select bank2
  1494  0D5B  025F               	subwf	95,w
  1495  0D5C  3060               	movlw	96
  1496  0D5D  1903               	skipnz
  1497  0D5E  025E               	subwf	94,w
  1498  0D5F  1803               	skipnc
  1499  0D60  2D8A               	goto	l1661
  1500                           
  1501                           ;main.c: 132: {
  1502                           ;main.c: 133: TimeCnt.SmokeTask++;
  1503  0D61  0ADE               	incf	94,f
  1504  0D62  1903               	skipnz
  1505  0D63  0ADF               	incf	95,f
  1506                           
  1507                           ;main.c: 134: if(TimeCnt.SmokeTask >= 2)
  1508  0D64  3000               	movlw	0
  1509  0D65  025F               	subwf	95,w
  1510  0D66  3002               	movlw	2
  1511  0D67  1903               	skipnz
  1512  0D68  025E               	subwf	94,w
  1513  0D69  1C03               	skipc
  1514  0D6A  2D72               	goto	l1658
  1515                           
  1516                           ;main.c: 135: {
  1517                           ;main.c: 138: if(VoutInfoFlag.bits.b1 != 0) GetADC.VoutVDD = GetADC.BatteryVoltage;
  1518  0D6B  1303               	bcf	3,6	;RP1=0, select bank0
  1519  0D6C  1CAC               	btfss	_VoutInfoFlag,1
  1520  0D6D  2D72               	goto	l1658
  1521  0D6E  0833               	movf	_GetADC+5,w
  1522  0D6F  00B5               	movwf	_GetADC+7
  1523  0D70  0832               	movf	_GetADC+4,w
  1524  0D71  00B4               	movwf	_GetADC+6
  1525  0D72                     l1658:	
  1526                           
  1527                           ;main.c: 139: }
  1528                           ;main.c: 141: if(TimeCnt.SmokeTime < 0xFFFFFFFF) TimeCnt.SmokeTime++;
  1529  0D72  1703               	bsf	3,6	;RP1=1, select bank2
  1530  0D73  0A60               	incf	96,w
  1531  0D74  1903               	skipnz
  1532  0D75  0A61               	incf	97,w
  1533  0D76  1903               	skipnz
  1534  0D77  0A62               	incf	98,w
  1535  0D78  1903               	skipnz
  1536  0D79  0A63               	incf	99,w
  1537  0D7A  1903               	skipnz
  1538  0D7B  2D8A               	goto	l1661
  1539  0D7C  0AE0               	incf	96,f
  1540  0D7D  1903               	skipnz
  1541  0D7E  0AE1               	incf	97,f
  1542  0D7F  1903               	skipnz
  1543  0D80  0AE2               	incf	98,f
  1544  0D81  1903               	skipnz
  1545  0D82  0AE3               	incf	99,f
  1546  0D83  2D8A               	goto	l1661
  1547  0D84                     l16619:	
  1548                           
  1549                           ;main.c: 144: else
  1550                           ;main.c: 145: {
  1551                           ;main.c: 146: ReadChargerState();
  1552  0D84  118A  23CB  158A   	fcall	_ReadChargerState
  1553                           
  1554                           ;main.c: 147: PlugProgress();
  1555  0D87  158A  23A2  158A   	fcall	_PlugProgress
  1556  0D8A                     l1661:	
  1557                           
  1558                           ;main.c: 148: }
  1559                           ;main.c: 151: PortScan();
  1560  0D8A  118A  2013  158A   	fcall	_PortScan
  1561  0D8D                     l16621:	
  1562                           
  1563                           ;main.c: 152: }
  1564                           ;main.c: 154: if(RunEventLED.ShowTask) RunEventLED.ShowTask--;
  1565  0D8D  1283               	bcf	3,5	;RP0=0, select bank0
  1566  0D8E  1303               	bcf	3,6	;RP1=0, select bank0
  1567  0D8F  0843               	movf	_RunEventLED+2,w
  1568  0D90  1903               	btfsc	3,2
  1569  0D91  2D94               	goto	l16625
  1570  0D92  03C3               	decf	_RunEventLED+2,f
  1571  0D93  2D99               	goto	l16629
  1572  0D94                     l16625:	
  1573                           
  1574                           ;main.c: 155: else
  1575                           ;main.c: 156: {
  1576                           ;main.c: 157: RunEventLED.ShowTask = RunEventLED.ShowTime;
  1577  0D94  0841               	movf	_RunEventLED,w
  1578  0D95  00C3               	movwf	_RunEventLED+2
  1579                           
  1580                           ;main.c: 158: ShowWarnLED();
  1581  0D96  118A  2254  158A   	fcall	_ShowWarnLED
  1582  0D99                     l16629:	
  1583                           
  1584                           ;main.c: 159: }
  1585                           ;main.c: 161: ScanShowBatLxLED();
  1586  0D99  158A  2326  158A   	fcall	_ScanShowBatLxLED
  1587  0D9C                     l16631:	
  1588                           
  1589                           ;main.c: 162: }
  1590                           ;main.c: 164: if(SysInfoFlag.bits.b0 != 0) PowerProgress();
  1591  0D9C  1C2B               	btfss	_SysInfoFlag,0
  1592  0D9D  2DA2               	goto	l16635
  1593  0D9E  118A  20C1  158A   	fcall	_PowerProgress
  1594  0DA1  2D25               	goto	l16589
  1595  0DA2                     l16635:	
  1596                           
  1597                           ;main.c: 165: else IdleProgress();
  1598  0DA2  158A  2410  158A   	fcall	_IdleProgress
  1599  0DA5  2D25               	goto	l16589
  1600  0DA6                     __end_of_main:	
  1601                           
  1602                           	psect	text731
  1603  0C10                     __ptext731:	
  1604 ;; =============== function _main ends ============
  1605                           
  1606                           
  1607 ;; *************** function _IdleProgress *****************
  1608 ;; Defined at:
  1609 ;;		line 31 in file "E:\workSpace\git_work\jm\P2\code\task.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;		None
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;		None
  1614 ;; Return value:  Size  Location     Type
  1615 ;;		None               void
  1616 ;; Registers used:
  1617 ;;		wreg, status,2, status,0, pclath, cstack
  1618 ;; Tracked objects:
  1619 ;;		On entry : 60/0
  1620 ;;		On exit  : 60/0
  1621 ;;		Unchanged: FFE00/0
  1622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  1623 ;;      Params:         0       0       0       0       0       0
  1624 ;;      Locals:         0       0       0       0       0       0
  1625 ;;      Temps:          0       0       0       0       0       0
  1626 ;;      Totals:         0       0       0       0       0       0
  1627 ;;Total ram usage:        0 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; Hardware stack levels required when called:    5
  1630 ;; This function calls:
  1631 ;;		_EnterSleep
  1632 ;; This function is called by:
  1633 ;;		_main
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636  0C10                     _IdleProgress:	
  1637                           
  1638                           ;task.c: 32: if(RunEventLED.EmEvent == 0 && LedsInfoFlag.bits.b5 != 0 && SysInfoFlag.bit
      +                          s.b5 != 0)
  1639                           
  1640                           ; Regs used in _IdleProgress: [wreg+status,2+status,0+pclath+cstack]
  1641  0C10  08C4               	movf	_RunEventLED+3,f
  1642  0C11  1903               	btfsc	3,2
  1643  0C12  1EAA               	btfss	_LedsInfoFlag,5
  1644  0C13  0008               	return
  1645  0C14  1EAB               	btfss	_SysInfoFlag,5
  1646  0C15  0008               	return
  1647                           
  1648                           ;task.c: 33: {
  1649                           ;task.c: 34: EnterSleep();
  1650  0C16  2440  158A         	fcall	_EnterSleep
  1651                           
  1652                           ;task.c: 35: TimeCnt.SleepTime = 2;
  1653  0C18  3002               	movlw	2
  1654  0C19  1703               	bsf	3,6	;RP1=1, select bank2
  1655  0C1A  00DC               	movwf	92
  1656  0C1B  01DD               	clrf	93
  1657  0C1C                     l16543:	
  1658                           ;task.c: 36: while(TimeCnt.SleepTime)
  1659                           
  1660  0C1C  1703               	bsf	3,6	;RP1=1, select bank2
  1661  0C1D  085D               	movf	93,w
  1662  0C1E  045C               	iorwf	92,w
  1663                           
  1664                           ;task.c: 37: {
  1665                           ;task.c: 38: if(SysInfoFlag.bits.b6 != 0)
  1666  0C1F  1303               	bcf	3,6	;RP1=0, select bank0
  1667  0C20  1903               	btfsc	3,2
  1668  0C21  2C2F               	goto	L1
  1669  0C22  1F2B               	btfss	_SysInfoFlag,6
  1670  0C23  2C1C               	goto	l16543
  1671                           
  1672                           ;task.c: 39: {
  1673                           ;task.c: 40: SysInfoFlag.bits.b6 = 0;
  1674  0C24  132B               	bcf	_SysInfoFlag,6
  1675  0C25  0064               	clrwdt	;#
  1676                           
  1677                           ;task.c: 42: TimeCnt.SleepTime--;
  1678  0C26  3001               	movlw	1
  1679  0C27  1283               	bcf	3,5	;RP0=0, select bank2
  1680  0C28  1703               	bsf	3,6	;RP1=1, select bank2
  1681  0C29  02DC               	subwf	92,f
  1682  0C2A  3000               	movlw	0
  1683  0C2B  1C03               	skipc
  1684  0C2C  03DD               	decf	93,f
  1685  0C2D  02DD               	subwf	93,f
  1686  0C2E  2C1C               	goto	l16543
  1687  0C2F                     L1:	
  1688                           ;task.c: 43: }
  1689                           ;task.c: 44: }
  1690                           ;task.c: 45: SysInfoFlag.bits.b0 = 1;
  1691                           
  1692  0C2F  142B               	bsf	_SysInfoFlag,0
  1693  0C30  0008               	return
  1694  0C31                     __end_of_IdleProgress:	
  1695  0C31                     __ptext740:	
  1696 ;; =============== function _ReadChargerState ends ============
  1697                           
  1698                           
  1699 ;; *************** function _SystemClockInit *****************
  1700 ;; Defined at:
  1701 ;;		line 40 in file "E:\workSpace\git_work\jm\P2\code\init.c"
  1702 ;; Parameters:    Size  Location     Type
  1703 ;;		None
  1704 ;; Auto vars:     Size  Location     Type
  1705 ;;		None
  1706 ;; Return value:  Size  Location     Type
  1707 ;;		None               void
  1708 ;; Registers used:
  1709 ;;		wreg, status,2, status,0, pclath, cstack
  1710 ;; Tracked objects:
  1711 ;;		On entry : 60/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: FFE00/0
  1714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  1715 ;;      Params:         0       0       0       0       0       0
  1716 ;;      Locals:         0       0       0       0       0       0
  1717 ;;      Temps:          0       0       0       0       0       0
  1718 ;;      Totals:         0       0       0       0       0       0
  1719 ;;Total ram usage:        0 bytes
  1720 ;; Hardware stack levels used:    1
  1721 ;; Hardware stack levels required when called:    4
  1722 ;; This function calls:
  1723 ;;		_Delay_16nop
  1724 ;; This function is called by:
  1725 ;;		_main
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728  0C31                     _SystemClockInit:	
  1729                           
  1730                           ;init.c: 46: CLKCTL = (CLKCTL&0xFC)|0x03;
  1731                           
  1732                           ; Regs used in _SystemClockInit: [wreg+status,2+status,0+pclath+cstack]
  1733  0C31  080F               	movf	15,w
  1734  0C32  39FC               	andlw	252
  1735  0C33  3803               	iorlw	3
  1736  0C34  008F               	movwf	15	;volatile
  1737                           
  1738                           ;init.c: 47: Delay_16nop();
  1739  0C35  245A  158A         	fcall	_Delay_16nop
  1740                           
  1741                           ;init.c: 49: CLKCTL = (CLKCTL&0xF7);
  1742  0C37  1283               	bcf	3,5	;RP0=0, select bank0
  1743  0C38  1303               	bcf	3,6	;RP1=0, select bank0
  1744  0C39  118F               	bcf	15,3	;volatile
  1745                           
  1746                           ;init.c: 50: Delay_16nop();
  1747  0C3A  245A  158A         	fcall	_Delay_16nop
  1748                           
  1749                           ;init.c: 52: CLKCTL = (CLKCTL|0x04);
  1750  0C3C  1283               	bcf	3,5	;RP0=0, select bank0
  1751  0C3D  1303               	bcf	3,6	;RP1=0, select bank0
  1752  0C3E  150F               	bsf	15,2	;volatile
  1753                           
  1754                           ;init.c: 53: Delay_16nop();
  1755  0C3F  2C5A               	ljmp	l15629
  1756  0C40                     __end_of_SystemClockInit:	
  1757  0C40                     __ptext734:	
  1758 ;; =============== function _PortScan ends ============
  1759                           
  1760                           
  1761 ;; *************** function _EnterSleep *****************
  1762 ;; Defined at:
  1763 ;;		line 59 in file "E:\workSpace\git_work\jm\P2\code\task.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;		None
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;		None
  1768 ;; Return value:  Size  Location     Type
  1769 ;;		None               void
  1770 ;; Registers used:
  1771 ;;		wreg, status,2, status,0, pclath, cstack
  1772 ;; Tracked objects:
  1773 ;;		On entry : 60/0
  1774 ;;		On exit  : 60/0
  1775 ;;		Unchanged: FFE00/0
  1776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  1777 ;;      Params:         0       0       0       0       0       0
  1778 ;;      Locals:         0       0       0       0       0       0
  1779 ;;      Temps:          0       0       0       0       0       0
  1780 ;;      Totals:         0       0       0       0       0       0
  1781 ;;Total ram usage:        0 bytes
  1782 ;; Hardware stack levels used:    1
  1783 ;; Hardware stack levels required when called:    4
  1784 ;; This function calls:
  1785 ;;		_InitGpio
  1786 ;;		_Delay_16nop
  1787 ;;		_Init_BOD_WDT
  1788 ;;		_MCU_INIT_TIMER
  1789 ;; This function is called by:
  1790 ;;		_IdleProgress
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793  0C40                     _EnterSleep:	
  1794                           
  1795                           ;task.c: 60: if(SysInfoFlag.bits.b4 != 0)
  1796                           
  1797                           ; Regs used in _EnterSleep: [wreg+status,2+status,0+pclath+cstack]
  1798  0C40  1A2B               	btfsc	_SysInfoFlag,4
  1799                           
  1800                           ;task.c: 61: {
  1801                           ;task.c: 62: SysInfoFlag.bits.b4 = 0;
  1802  0C41  122B               	bcf	_SysInfoFlag,4
  1803                           
  1804                           ;task.c: 74: }
  1805                           ;task.c: 76: if(PAD6 == 1 || PAD6 == 0) return;
  1806  0C42  1F05               	btfss	5,6
  1807  0C43  1F05               	btfss	5,6
  1808  0C44  0008               	return
  1809                           
  1810                           ;task.c: 79: TM0CTL |= 0x40;TM1CTL |= 0x40;T2CTL |= 0x10;
  1811  0C45  1711               	bsf	17,6	;volatile
  1812  0C46  1714               	bsf	20,6	;volatile
  1813  0C47  1615               	bsf	21,4	;volatile
  1814                           
  1815                           ;task.c: 83: InitGpio();
  1816  0C48  246B  158A         	fcall	_InitGpio
  1817                           
  1818                           ;task.c: 84: INTIE = 0x00;
  1819  0C4A  018B               	clrf	11	;volatile
  1820                           
  1821                           ;task.c: 85: INTIE1 = 0x00;
  1822  0C4B  018D               	clrf	13	;volatile
  1823                           
  1824                           ;task.c: 87: CLKCTL = (CLKCTL|0x10);
  1825  0C4C  160F               	bsf	15,4	;volatile
  1826                           
  1827                           ;task.c: 88: Delay_16nop();
  1828  0C4D  245A  158A         	fcall	_Delay_16nop
  1829  0C4F  0063               	sleep	;#
  1830                           
  1831                           ;task.c: 90: CLKCTL = (CLKCTL&0xEF);
  1832  0C50  1283               	bcf	3,5	;RP0=0, select bank0
  1833  0C51  1303               	bcf	3,6	;RP1=0, select bank0
  1834  0C52  120F               	bcf	15,4	;volatile
  1835                           
  1836                           ;task.c: 91: Delay_16nop();
  1837  0C53  245A  158A         	fcall	_Delay_16nop
  1838                           
  1839                           ;task.c: 93: Init_BOD_WDT();
  1840  0C55  2492  158A         	fcall	_Init_BOD_WDT
  1841                           
  1842                           ;task.c: 94: InitGpio();
  1843  0C57  246B  158A         	fcall	_InitGpio
  1844                           
  1845                           ;task.c: 98: MCU_INIT_TIMER();
  1846  0C59  2CAD               	ljmp	l15237
  1847  0C5A                     __end_of_EnterSleep:	
  1848  0C5A                     __ptext747:	
  1849 ;; =============== function _SetShowLED ends ============
  1850                           
  1851                           
  1852 ;; *************** function _Delay_16nop *****************
  1853 ;; Defined at:
  1854 ;;		line 23 in file "E:\workSpace\git_work\jm\P2\code\init.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;		None
  1859 ;; Return value:  Size  Location     Type
  1860 ;;		None               void
  1861 ;; Registers used:
  1862 ;;		None
  1863 ;; Tracked objects:
  1864 ;;		On entry : 60/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: FFE00/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  1868 ;;      Params:         0       0       0       0       0       0
  1869 ;;      Locals:         0       0       0       0       0       0
  1870 ;;      Temps:          0       0       0       0       0       0
  1871 ;;      Totals:         0       0       0       0       0       0
  1872 ;;Total ram usage:        0 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    3
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_SystemClockInit
  1879 ;;		_EnterSleep
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882  0C5A                     _Delay_16nop:	
  1883  0C5A                     l15629:	
  1884                           ; Regs used in _Delay_16nop: []
  1885                           
  1886  0C5A  0000               	nop	;#
  1887  0C5B  0000               	nop	;#
  1888  0C5C  0000               	nop	;#
  1889  0C5D  0000               	nop	;#
  1890  0C5E  0000               	nop	;#
  1891  0C5F  0000               	nop	;#
  1892  0C60  0000               	nop	;#
  1893  0C61  0000               	nop	;#
  1894  0C62  0000               	nop	;#
  1895  0C63  0000               	nop	;#
  1896  0C64  0000               	nop	;#
  1897  0C65  0000               	nop	;#
  1898  0C66  0000               	nop	;#
  1899  0C67  0000               	nop	;#
  1900  0C68  0000               	nop	;#
  1901  0C69  0000               	nop	;#
  1902  0C6A  0008               	return
  1903  0C6B                     __end_of_Delay_16nop:	
  1904  0C6B                     __ptext757:	
  1905 ;; =============== function _Init_BOD_WDT ends ============
  1906                           
  1907                           
  1908 ;; *************** function _InitGpio *****************
  1909 ;; Defined at:
  1910 ;;		line 94 in file "E:\workSpace\git_work\jm\P2\code\init.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;		None
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;		None               void
  1917 ;; Registers used:
  1918 ;;		wreg, status,2, status,0
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 60/0
  1922 ;;		Unchanged: FFF9F/0
  1923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  1924 ;;      Params:         0       0       0       0       0       0
  1925 ;;      Locals:         0       0       0       0       0       0
  1926 ;;      Temps:          0       0       0       0       0       0
  1927 ;;      Totals:         0       0       0       0       0       0
  1928 ;;Total ram usage:        0 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:    3
  1931 ;; This function calls:
  1932 ;;		Nothing
  1933 ;; This function is called by:
  1934 ;;		_main
  1935 ;;		_EnterSleep
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938  0C6B                     _InitGpio:	
  1939                           
  1940                           ;init.c: 96: PAD = 0xE8;
  1941                           
  1942                           ; Regs used in _InitGpio: [wreg+status,2+status,0]
  1943  0C6B  30E8               	movlw	232
  1944  0C6C  1283               	bcf	3,5	;RP0=0, select bank0
  1945  0C6D  1303               	bcf	3,6	;RP1=0, select bank0
  1946  0C6E  0085               	movwf	5	;volatile
  1947                           
  1948                           ;init.c: 97: PAMOD76 = PAMOD76 & 0x00 | 0x80 | 0x09;
  1949  0C6F  3089               	movlw	137
  1950  0C70  1683               	bsf	3,5	;RP0=1, select bank1
  1951  0C71  0088               	movwf	8	;volatile
  1952                           
  1953                           ;init.c: 98: PAMOD54 = PAMOD54 & 0x00 | 0x30 | 0x06;
  1954  0C72  3036               	movlw	54
  1955  0C73  0087               	movwf	7	;volatile
  1956                           
  1957                           ;init.c: 99: PAMOD32 = PAMOD32 & 0x00 | 0x30 | 0x06;
  1958  0C74  0086               	movwf	6	;volatile
  1959                           
  1960                           ;init.c: 100: PAMOD10 = PAMOD10 & 0x00 | 0x10 | 0x01;
  1961  0C75  3011               	movlw	17
  1962  0C76  0085               	movwf	5	;volatile
  1963                           
  1964                           ;init.c: 103: PBD = 0x04;
  1965  0C77  3004               	movlw	4
  1966  0C78  1283               	bcf	3,5	;RP0=0, select bank0
  1967  0C79  0086               	movwf	6	;volatile
  1968                           
  1969                           ;init.c: 104: PBMOD76 = PBMOD76 & 0x00 | 0x60 | 0x06;
  1970  0C7A  3066               	movlw	102
  1971  0C7B  1683               	bsf	3,5	;RP0=1, select bank1
  1972  0C7C  008F               	movwf	15	;volatile
  1973                           
  1974                           ;init.c: 105: PBMOD54 = PBMOD54 & 0x00 | 0x60 | 0x06;
  1975  0C7D  008E               	movwf	14	;volatile
  1976                           
  1977                           ;init.c: 106: PBMOD32 = PBMOD32 & 0x00 | 0x60 | 0x90;
  1978  0C7E  30F0               	movlw	240
  1979  0C7F  008D               	movwf	13	;volatile
  1980                           
  1981                           ;init.c: 107: PBMOD10 = PBMOD10 & 0x00 | 0x60 | 0x06;
  1982  0C80  3066               	movlw	102
  1983  0C81  008C               	movwf	12	;volatile
  1984                           
  1985                           ;init.c: 109: PDD = 0x00;
  1986  0C82  1283               	bcf	3,5	;RP0=0, select bank0
  1987  0C83  0187               	clrf	7	;volatile
  1988                           
  1989                           ;init.c: 110: PDMOD10 = PDMOD10 & 0x00 | 0x60 | 0x06;
  1990  0C84  1683               	bsf	3,5	;RP0=1, select bank1
  1991  0C85  0090               	movwf	16	;volatile
  1992                           
  1993                           ;init.c: 112: PINMOD &= 0xD8;
  1994  0C86  30D8               	movlw	216
  1995  0C87  1283               	bcf	3,5	;RP0=0, select bank2
  1996  0C88  1703               	bsf	3,6	;RP1=1, select bank2
  1997  0C89  0585               	andwf	5,f	;volatile
  1998                           
  1999                           ;init.c: 125: ADCTL &= 0xF8;
  2000  0C8A  30F8               	movlw	248
  2001  0C8B  1303               	bcf	3,6	;RP1=0, select bank0
  2002  0C8C  0598               	andwf	24,f	;volatile
  2003                           
  2004                           ;init.c: 126: ADCTL |= 0x05;
  2005  0C8D  3005               	movlw	5
  2006  0C8E  0498               	iorwf	24,f	;volatile
  2007                           
  2008                           ;init.c: 127: ADCTL2 &= 0x3F;
  2009  0C8F  303F               	movlw	63
  2010  0C90  0599               	andwf	25,f	;volatile
  2011  0C91  0008               	return
  2012  0C92                     __end_of_InitGpio:	
  2013  0C92                     __ptext756:	
  2014 ;; =============== function _MCU_INIT_TIMER ends ============
  2015                           
  2016                           
  2017 ;; *************** function _Init_BOD_WDT *****************
  2018 ;; Defined at:
  2019 ;;		line 65 in file "E:\workSpace\git_work\jm\P2\code\init.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;		None
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;		None
  2024 ;; Return value:  Size  Location     Type
  2025 ;;		None               void
  2026 ;; Registers used:
  2027 ;;		wreg, status,2, status,0
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 60/20
  2031 ;;		Unchanged: FFE00/0
  2032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  2033 ;;      Params:         0       0       0       0       0       0
  2034 ;;      Locals:         0       0       0       0       0       0
  2035 ;;      Temps:          0       0       0       0       0       0
  2036 ;;      Totals:         0       0       0       0       0       0
  2037 ;;Total ram usage:        0 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; Hardware stack levels required when called:    3
  2040 ;; This function calls:
  2041 ;;		Nothing
  2042 ;; This function is called by:
  2043 ;;		_main
  2044 ;;		_EnterSleep
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047  0C92                     _Init_BOD_WDT:	
  2048                           
  2049                           ;init.c: 67: LVDIE = 0;
  2050                           
  2051                           ; Regs used in _Init_BOD_WDT: [wreg+status,2+status,0]
  2052  0C92  1283               	bcf	3,5	;RP0=0, select bank0
  2053  0C93  30F0               	movlw	240
  2054  0C94  1303               	bcf	3,6	;RP1=0, select bank0
  2055  0C95  100D               	bcf	13,0
  2056                           
  2057                           ;init.c: 68: LVDIF = 0;
  2058  0C96  100E               	bcf	14,0
  2059                           
  2060                           ;init.c: 69: LVCTL &= 0xF0;LVCTL |= 0x03;
  2061  0C97  0596               	andwf	22,f	;volatile
  2062  0C98  3003               	movlw	3
  2063  0C99  0496               	iorwf	22,f	;volatile
  2064                           
  2065                           ;init.c: 70: LVCTL |= 0x40;
  2066  0C9A  1716               	bsf	22,6	;volatile
  2067                           
  2068                           ;init.c: 71: LVCTL |= 0x20;
  2069  0C9B  1696               	bsf	22,5	;volatile
  2070                           
  2071                           ;init.c: 72: LVCTL |= 0x10;
  2072  0C9C  1616               	bsf	22,4	;volatile
  2073                           
  2074                           ;init.c: 75: OPTION &= 0xF3;
  2075  0C9D  30F3               	movlw	243
  2076  0C9E  1683               	bsf	3,5	;RP0=1, select bank1
  2077  0C9F  0581               	andwf	1,f	;volatile
  2078                           
  2079                           ;init.c: 76: OPTION |= 0x0C;
  2080  0CA0  300C               	movlw	12
  2081  0CA1  0481               	iorwf	1,f	;volatile
  2082  0CA2  0064               	clrwdt	;#
  2083                           
  2084                           ;init.c: 79: WKTIE = 0;
  2085  0CA3  118B               	bcf	11,3
  2086                           
  2087                           ;init.c: 80: WKTIF = 0;
  2088  0CA4  1283               	bcf	3,5	;RP0=0, select bank0
  2089  0CA5  30FC               	movlw	252
  2090  0CA6  1303               	bcf	3,6	;RP1=0, select bank0
  2091  0CA7  118C               	bcf	12,3
  2092                           
  2093                           ;init.c: 81: OPTION &= 0xFC;
  2094  0CA8  1683               	bsf	3,5	;RP0=1, select bank1
  2095  0CA9  0581               	andwf	1,f	;volatile
  2096                           
  2097                           ;init.c: 82: OPTION |= 0x03;
  2098  0CAA  3003               	movlw	3
  2099  0CAB  0481               	iorwf	1,f	;volatile
  2100  0CAC  0008               	return
  2101  0CAD                     __end_of_Init_BOD_WDT:	
  2102  0CAD                     __ptext755:	
  2103 ;; =============== function _KeyUpStopSmoke ends ============
  2104                           
  2105                           
  2106 ;; *************** function _MCU_INIT_TIMER *****************
  2107 ;; Defined at:
  2108 ;;		line 139 in file "E:\workSpace\git_work\jm\P2\code\init.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;		None               void
  2115 ;; Registers used:
  2116 ;;		wreg, status,2, status,0
  2117 ;; Tracked objects:
  2118 ;;		On entry : 40/20
  2119 ;;		On exit  : 60/0
  2120 ;;		Unchanged: FFF9F/0
  2121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  2122 ;;      Params:         0       0       0       0       0       0
  2123 ;;      Locals:         0       0       0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0       0
  2125 ;;      Totals:         0       0       0       0       0       0
  2126 ;;Total ram usage:        0 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    3
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_main
  2133 ;;		_EnterSleep
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136  0CAD                     _MCU_INIT_TIMER:	
  2137  0CAD                     l15237:	
  2138                           ; Regs used in _MCU_INIT_TIMER: [wreg+status,2+status,0]
  2139                           
  2140                           
  2141                           ;init.c: 141: TM0CTL |= 0x40;
  2142  0CAD  1283               	bcf	3,5	;RP0=0, select bank0
  2143  0CAE  1711               	bsf	17,6	;volatile
  2144                           
  2145                           ;init.c: 142: TM0IE = 0;
  2146  0CAF  120B               	bcf	11,4
  2147                           
  2148                           ;init.c: 143: TM0IF = 0;
  2149  0CB0  120C               	bcf	12,4
  2150                           
  2151                           ;init.c: 144: TM0CTL &= 0xEF;
  2152  0CB1  1211               	bcf	17,4	;volatile
  2153                           
  2154                           ;init.c: 145: TM0CTL &= 0xF0;TM0CTL |= 0x02;
  2155  0CB2  30F0               	movlw	240
  2156  0CB3  0591               	andwf	17,f	;volatile
  2157  0CB4  1491               	bsf	17,1	;volatile
  2158                           
  2159                           ;init.c: 146: TM0 = 256 - 100;
  2160  0CB5  309C               	movlw	156
  2161  0CB6  0081               	movwf	1	;volatile
  2162                           
  2163                           ;init.c: 147: TM0RLD = 256 - 100;
  2164  0CB7  0090               	movwf	16	;volatile
  2165                           
  2166                           ;init.c: 150: TM1CTL |= 0x40;
  2167  0CB8  1714               	bsf	20,6	;volatile
  2168  0CB9  30F0               	movlw	240
  2169                           
  2170                           ;init.c: 151: TM1IE = 0;
  2171  0CBA  128B               	bcf	11,5
  2172  0CBB  128C               	bcf	12,5
  2173                           
  2174                           ;init.c: 153: TM1CTL &= 0xF0;TM1CTL |= 0x05;
  2175  0CBC  0594               	andwf	20,f	;volatile
  2176  0CBD  3005               	movlw	5
  2177  0CBE  0494               	iorwf	20,f	;volatile
  2178                           
  2179                           ;init.c: 154: TM1 = 256 - 125;
  2180  0CBF  3083               	movlw	131
  2181  0CC0  0092               	movwf	18	;volatile
  2182                           
  2183                           ;init.c: 155: TM1RLD = 256 - 125;
  2184  0CC1  0093               	movwf	19	;volatile
  2185                           
  2186                           ;init.c: 158: T2CTL |= 0x10;
  2187  0CC2  1615               	bsf	21,4	;volatile
  2188  0CC3  30FC               	movlw	252
  2189                           
  2190                           ;init.c: 159: T2IE = 0;
  2191  0CC4  130B               	bcf	11,6
  2192  0CC5  130C               	bcf	12,6
  2193                           
  2194                           ;init.c: 161: T2CTL &= 0xFC;
  2195  0CC6  0595               	andwf	21,f	;volatile
  2196                           
  2197                           ;init.c: 164: TM0IE = 1;
  2198  0CC7  160B               	bsf	11,4
  2199                           
  2200                           ;init.c: 165: TM0CTL &= 0xBF;
  2201  0CC8  1311               	bcf	17,6	;volatile
  2202  0CC9  0008               	return
  2203  0CCA                     __end_of_MCU_INIT_TIMER:	
  2204                           
  2205                           	psect	text733
  2206  0013                     __ptext733:	
  2207 ;; =============== function _PowerProgress ends ============
  2208                           
  2209                           
  2210 ;; *************** function _PortScan *****************
  2211 ;; Defined at:
  2212 ;;		line 67 in file "E:\workSpace\git_work\jm\P2\code\key.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;		None
  2215 ;; Auto vars:     Size  Location     Type
  2216 ;;		None
  2217 ;; Return value:  Size  Location     Type
  2218 ;;		None               void
  2219 ;; Registers used:
  2220 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2221 ;; Tracked objects:
  2222 ;;		On entry : 20/40
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: FFE9F/0
  2225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  2226 ;;      Params:         0       0       0       0       0       0
  2227 ;;      Locals:         0       0       0       0       0       0
  2228 ;;      Temps:          0       0       0       0       0       0
  2229 ;;      Totals:         0       0       0       0       0       0
  2230 ;;Total ram usage:        0 bytes
  2231 ;; Hardware stack levels used:    1
  2232 ;; Hardware stack levels required when called:    5
  2233 ;; This function calls:
  2234 ;;		_gearSwitch
  2235 ;;		_KeyUpStopSmoke
  2236 ;;		_SetOffNotifyLED
  2237 ;;		_SetWarnEvent
  2238 ;;		_SetShowLED
  2239 ;;		_ShowSegmentLED
  2240 ;;		_SetShowBatLxLED
  2241 ;; This function is called by:
  2242 ;;		_main
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245  0013                     _PortScan:	
  2246                           
  2247                           ;key.c: 68: if(PBD2 == 1) ReadPort.ScanNew |= 0x01;
  2248                           
  2249                           ; Regs used in _PortScan: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2250  0013  1303               	bcf	3,6	;RP1=0, select bank0
  2251  0014  1D06               	btfss	6,2
  2252  0015  2819               	goto	l4937
  2253  0016  1683               	bsf	3,5	;RP0=1, select bank1
  2254  0017  1421               	bsf	(_ReadPort^(0+128)+1),0
  2255  0018  281B               	goto	l4938
  2256  0019                     l4937:	
  2257                           
  2258                           ;key.c: 69: else ReadPort.ScanNew &= 0xFE;
  2259  0019  1683               	bsf	3,5	;RP0=1, select bank1
  2260  001A  1021               	bcf	(_ReadPort^(0+128)+1),0
  2261  001B                     l4938:	
  2262                           
  2263                           ;key.c: 71: if(PAD7 == 0) ReadPort.ScanNew |= 0x02;
  2264  001B  1283               	bcf	3,5	;RP0=0, select bank0
  2265  001C  1B85               	btfsc	5,7
  2266  001D  2821               	goto	l4939
  2267  001E  1683               	bsf	3,5	;RP0=1, select bank1
  2268  001F  14A1               	bsf	(_ReadPort^(0+128)+1),1
  2269  0020  2823               	goto	l16185
  2270  0021                     l4939:	
  2271                           
  2272                           ;key.c: 72: else ReadPort.ScanNew &= 0xFD;
  2273  0021  1683               	bsf	3,5	;RP0=1, select bank1
  2274  0022  10A1               	bcf	(_ReadPort^(0+128)+1),1
  2275  0023                     l16185:	
  2276                           
  2277                           ;key.c: 78: if(ReadPort.ScanNew != ReadPort.ScanOld)
  2278  0023  0821               	movf	(_ReadPort^(0+128)+1),w
  2279  0024  0622               	xorwf	(_ReadPort^(0+128)+2),w
  2280  0025  1903               	skipnz
  2281  0026  285D               	goto	l16231
  2282  0027  3002               	movlw	2
  2283                           
  2284                           ;key.c: 79: {
  2285                           ;key.c: 80: ReadPort.ScanCnt++;
  2286  0028  0AA3               	incf	(_ReadPort^(0+128)+3),f
  2287                           
  2288                           ;key.c: 81: if(ReadPort.ScanCnt >= 2)
  2289  0029  0223               	subwf	(_ReadPort^(0+128)+3),w
  2290  002A  1C03               	skipc
  2291  002B  285E               	goto	l16233
  2292                           
  2293                           ;key.c: 82: {
  2294                           ;key.c: 83: if((ReadPort.ScanOld&0x02) == 0 && (ReadPort.ScanNew&0x02) != 0)
  2295  002C  1CA2               	btfss	(_ReadPort^(0+128)+2),1
  2296  002D  1CA1               	btfss	(_ReadPort^(0+128)+1),1
  2297  002E  2839               	goto	l4943
  2298  002F  3032               	movlw	50
  2299                           
  2300                           ;key.c: 84: {
  2301                           ;key.c: 85: ReadPort.KeyNum++;
  2302  0030  0AA5               	incf	(_ReadPort^(0+128)+5),f
  2303                           
  2304                           ;key.c: 86: ReadPort.KeyIntervalTime = 50;
  2305  0031  00A6               	movwf	(_ReadPort^(0+128)+6)
  2306                           
  2307                           ;key.c: 87: ReadPort.KeyState |= 0x01;
  2308  0032  1424               	bsf	(_ReadPort^(0+128)+4),0
  2309                           
  2310                           ;key.c: 88: ReadPort.KeyLongTime = 0;
  2311  0033  01A7               	clrf	(_ReadPort^(0+128)+7)
  2312  0034  01A8               	clrf	((_ReadPort+1)^(0+128)+7)
  2313                           
  2314                           ;key.c: 89: gearSwitch();
  2315  0035  158A  2364  118A   	fcall	_gearSwitch
  2316                           
  2317                           ;key.c: 92: }
  2318  0038  283D               	goto	l4944
  2319  0039                     l4943:	
  2320                           
  2321                           ;key.c: 93: else if((ReadPort.ScanOld&0x02) != 0 && (ReadPort.ScanNew&0x02) == 0)
  2322  0039  18A2               	btfsc	(_ReadPort^(0+128)+2),1
  2323  003A  18A1               	btfsc	(_ReadPort^(0+128)+1),1
  2324  003B  283D               	goto	l4944
  2325                           
  2326                           ;key.c: 94: {
  2327                           ;key.c: 95: ReadPort.KeyState &= 0xFE;
  2328  003C  1024               	bcf	(_ReadPort^(0+128)+4),0
  2329  003D                     l4944:	
  2330                           
  2331                           ;key.c: 96: }
  2332                           ;key.c: 98: if((ReadPort.ScanOld&0x01) == 0 && (ReadPort.ScanNew&0x01) != 0)
  2333  003D  1683               	bsf	3,5	;RP0=1, select bank1
  2334  003E  1C22               	btfss	(_ReadPort^(0+128)+2),0
  2335  003F  1C21               	btfss	(_ReadPort^(0+128)+1),0
  2336  0040  2849               	goto	l4946
  2337                           
  2338                           ;key.c: 99: {
  2339                           ;key.c: 100: if((ReadPort.KeyState&0x10) == 0)
  2340  0041  1A24               	btfsc	(_ReadPort^(0+128)+4),4
  2341  0042  2853               	goto	l16225
  2342                           
  2343                           ;key.c: 101: {
  2344                           ;key.c: 102: ReadPort.KeyState |= 0x20;
  2345  0043  16A4               	bsf	(_ReadPort^(0+128)+4),5
  2346                           
  2347                           ;key.c: 103: VoutInfoFlag.bits.b0 = 1;
  2348  0044  1283               	bcf	3,5	;RP0=0, select bank0
  2349  0045  142C               	bsf	_VoutInfoFlag,0
  2350                           
  2351                           ;key.c: 104: ReadPort.KeyState &= 0x7F;
  2352  0046  1683               	bsf	3,5	;RP0=1, select bank1
  2353  0047  13A4               	bcf	(_ReadPort^(0+128)+4),7
  2354  0048  2853               	goto	l16225
  2355  0049                     l4946:	
  2356                           
  2357                           ;key.c: 107: else if((ReadPort.ScanOld&0x01) != 0 && (ReadPort.ScanNew&0x01) == 0)
  2358  0049  1822               	btfsc	(_ReadPort^(0+128)+2),0
  2359  004A  1821               	btfsc	(_ReadPort^(0+128)+1),0
  2360  004B  2853               	goto	l16225
  2361                           
  2362                           ;key.c: 108: {
  2363                           ;key.c: 109: if((ReadPort.KeyState&0x20) != 0)
  2364  004C  1EA4               	btfss	(_ReadPort^(0+128)+4),5
  2365  004D  2853               	goto	l16225
  2366                           
  2367                           ;key.c: 110: {
  2368                           ;key.c: 111: KeyUpStopSmoke();
  2369  004E  23A2  118A         	fcall	_KeyUpStopSmoke
  2370                           
  2371                           ;key.c: 112: VoutInfoFlag.bits.b0 = 0;
  2372  0050  102C               	bcf	_VoutInfoFlag,0
  2373                           
  2374                           ;key.c: 113: ReadPort.KeyState &= 0xDF;
  2375  0051  1683               	bsf	3,5	;RP0=1, select bank1
  2376  0052  12A4               	bcf	(_ReadPort^(0+128)+4),5
  2377  0053                     l16225:	
  2378                           
  2379                           ;key.c: 114: }
  2380                           ;key.c: 115: }
  2381                           ;key.c: 117: TimeCnt.SleepTime = 0;
  2382  0053  1283               	bcf	3,5	;RP0=0, select bank2
  2383  0054  1703               	bsf	3,6	;RP1=1, select bank2
  2384  0055  01DC               	clrf	92
  2385  0056  01DD               	clrf	93
  2386                           
  2387                           ;key.c: 118: ReadPort.ScanCnt = 0;
  2388  0057  1683               	bsf	3,5	;RP0=1, select bank1
  2389  0058  1303               	bcf	3,6	;RP1=0, select bank1
  2390  0059  01A3               	clrf	(_ReadPort^(0+128)+3)
  2391                           
  2392                           ;key.c: 119: ReadPort.ScanOld = ReadPort.ScanNew;
  2393  005A  0821               	movf	(_ReadPort^(0+128)+1),w
  2394  005B  00A2               	movwf	(_ReadPort^(0+128)+2)
  2395  005C  285E               	goto	l16233
  2396  005D                     l16231:	
  2397                           
  2398                           ;key.c: 122: else ReadPort.ScanCnt = 0;
  2399  005D  01A3               	clrf	(_ReadPort^(0+128)+3)
  2400  005E                     l16233:	
  2401                           
  2402                           ;key.c: 124: if(ReadPort.KeyIntervalTime) ReadPort.KeyIntervalTime--;
  2403  005E  0826               	movf	(_ReadPort^(0+128)+6),w
  2404  005F  1903               	btfsc	3,2
  2405  0060  2863               	goto	l16237
  2406  0061  03A6               	decf	(_ReadPort^(0+128)+6),f
  2407  0062  2884               	goto	l16263
  2408  0063                     l16237:	
  2409                           
  2410                           ;key.c: 125: else
  2411                           ;key.c: 126: {
  2412                           ;key.c: 127: if((ReadPort.KeyState&0x31) == 0 && SysInfoFlag.bits.b7 == 0 && VoutInfoFla
      +                          g.bits.b7 == 0)
  2413  0063  0824               	movf	(_ReadPort^(0+128)+4),w
  2414  0064  3931               	andlw	49
  2415  0065  1D03               	btfss	3,2
  2416  0066  2882               	goto	l16261
  2417  0067  1283               	bcf	3,5	;RP0=0, select bank0
  2418  0068  1FAB               	btfss	_SysInfoFlag,7
  2419  0069  1BAC               	btfsc	_VoutInfoFlag,7
  2420  006A  2882               	goto	l16261
  2421                           
  2422                           ;key.c: 128: {
  2423                           ;key.c: 129: if(ReadPort.KeyNum == 1)
  2424  006B  1683               	bsf	3,5	;RP0=1, select bank1
  2425  006C  0B25               	decfsz	(_ReadPort^(0+128)+5),w
  2426  006D  2882               	goto	l16261
  2427                           
  2428                           ;key.c: 130: {
  2429                           ;key.c: 131: if(RunEventLED.EmEvent < 7 || RunEventLED.EmEvent == 17)
  2430  006E  3007               	movlw	7
  2431  006F  1283               	bcf	3,5	;RP0=0, select bank0
  2432  0070  0244               	subwf	_RunEventLED+3,w
  2433  0071  1C03               	skipc
  2434  0072  2877               	goto	l16249
  2435  0073  0844               	movf	_RunEventLED+3,w
  2436  0074  3A11               	xorlw	17
  2437  0075  1D03               	skipz
  2438  0076  2882               	goto	l16261
  2439  0077                     l16249:	
  2440                           
  2441                           ;key.c: 132: {
  2442                           ;key.c: 133: SetOffNotifyLED();
  2443  0077  2384  118A         	fcall	_SetOffNotifyLED
  2444  0079  3011               	movlw	17
  2445                           
  2446                           ;key.c: 134: LedsInfoFlag.bits.b3 = 0;
  2447  007A  11AA               	bcf	_LedsInfoFlag,3
  2448                           
  2449                           ;key.c: 135: RunLED.ShowBatLxCnt = 0x00;
  2450  007B  01A5               	clrf	_RunLED+5
  2451                           
  2452                           ;key.c: 136: RunLED.TaskBatLx = 0;
  2453  007C  01A6               	clrf	_RunLED+6
  2454                           
  2455                           ;key.c: 137: SetWarnEvent(&RunEventLED,17,25,8);
  2456  007D  2407  118A         	fcall	PL4	;call to abstracted procedure
  2457  007F  238D  118A         	fcall	_SetWarnEvent
  2458                           
  2459                           ;key.c: 138: RunEventLED.ShowTask = 0;
  2460  0081  01C3               	clrf	_RunEventLED+2
  2461  0082                     l16261:	
  2462                           
  2463                           ;key.c: 139: }
  2464                           ;key.c: 140: }
  2465                           ;key.c: 141: }
  2466                           ;key.c: 143: ReadPort.KeyNum = 0;
  2467  0082  1683               	bsf	3,5	;RP0=1, select bank1
  2468  0083  01A5               	clrf	(_ReadPort^(0+128)+5)
  2469  0084                     l16263:	
  2470                           
  2471                           ;key.c: 144: }
  2472                           ;key.c: 146: if((ReadPort.KeyState&0x01) != 0)
  2473  0084  1C24               	btfss	(_ReadPort^(0+128)+4),0
  2474  0085  28B3               	goto	l16297
  2475                           
  2476                           ;key.c: 147: {
  2477                           ;key.c: 148: if(ReadPort.KeyLongTime<150)
  2478  0086  3000               	movlw	0
  2479  0087  0228               	subwf	((_ReadPort+1)^(0+128)+7),w
  2480  0088  3096               	movlw	150
  2481  0089  1903               	skipnz
  2482  008A  0227               	subwf	(_ReadPort^(0+128)+7),w
  2483  008B  1803               	skipnc
  2484  008C  2895               	goto	l4960
  2485                           
  2486                           ;key.c: 149: {
  2487                           ;key.c: 150: ReadPort.KeyLongTime++;
  2488  008D  0AA7               	incf	(_ReadPort^(0+128)+7),f
  2489  008E  1903               	skipnz
  2490  008F  0AA8               	incf	((_ReadPort+1)^(0+128)+7),f
  2491                           
  2492                           ;key.c: 151: TimeCnt.SleepTime = 0;
  2493  0090  1283               	bcf	3,5	;RP0=0, select bank2
  2494  0091  1703               	bsf	3,6	;RP1=1, select bank2
  2495  0092  01DC               	clrf	92
  2496  0093  01DD               	clrf	93
  2497                           
  2498                           ;key.c: 152: }
  2499  0094  28B3               	goto	l16297
  2500  0095                     l4960:	
  2501                           
  2502                           ;key.c: 153: else
  2503                           ;key.c: 154: {
  2504                           ;key.c: 155: ReadPort.KeyState &= 0xFE;
  2505  0095  1024               	bcf	(_ReadPort^(0+128)+4),0
  2506                           
  2507                           ;key.c: 156: ReadPort.KeyNum = 0;
  2508  0096  01A5               	clrf	(_ReadPort^(0+128)+5)
  2509                           
  2510                           ;key.c: 157: KeyUpStopSmoke();
  2511  0097  23A2  118A         	fcall	_KeyUpStopSmoke
  2512                           
  2513                           ;key.c: 158: VoutInfoFlag.bits.b0 = 0;
  2514  0099  102C               	bcf	_VoutInfoFlag,0
  2515                           
  2516                           ;key.c: 159: SetOffNotifyLED();
  2517  009A  2384  118A         	fcall	_SetOffNotifyLED
  2518                           
  2519                           ;key.c: 160: SetShowLED(0x00);
  2520  009C  3000               	movlw	0
  2521                           
  2522                           ;key.c: 161: if(SysInfoFlag.bits.b7 != 0)
  2523  009D  1FAB               	btfss	_SysInfoFlag,7
  2524  009E  28A2               	goto	l4962
  2525  009F  300C               	movlw	12
  2526                           
  2527                           ;key.c: 162: {
  2528                           ;key.c: 163: SysInfoFlag.bits.b7 = 0;
  2529  00A0  13AB               	bcf	_SysInfoFlag,7
  2530                           
  2531                           ;key.c: 164: SetWarnEvent(&RunEventLED,12,25,10);
  2532  00A1  28A4               	goto	L5
  2533  00A2                     l4962:	
  2534                           ;key.c: 165: }
  2535                           
  2536  00A2  300B               	movlw	11
  2537                           
  2538                           ;key.c: 166: else
  2539                           ;key.c: 167: {
  2540                           ;key.c: 168: SysInfoFlag.bits.b7 = 1;
  2541  00A3  17AB               	bsf	_SysInfoFlag,7
  2542  00A4                     L5:	
  2543                           ;key.c: 169: SetWarnEvent(&RunEventLED,11,25,10);
  2544                           
  2545  00A4  00C5               	movwf	?_SetWarnEvent
  2546  00A5  3019               	movlw	25
  2547  00A6  00C6               	movwf	?_SetWarnEvent+1
  2548  00A7  300A               	movlw	10
  2549  00A8  00C7               	movwf	?_SetWarnEvent+2
  2550  00A9  3041               	movlw	_RunEventLED& (0+255)
  2551  00AA  238D  118A         	fcall	_SetWarnEvent
  2552                           
  2553                           ;key.c: 170: }
  2554                           ;key.c: 171: ShowSegmentLED(0x00);
  2555  00AC  3000               	movlw	0
  2556  00AD  2319  118A         	fcall	_ShowSegmentLED
  2557                           
  2558                           ;key.c: 172: LedsInfoFlag.bits.b3 = 0;
  2559                           
  2560                           ;key.c: 173: RunLED.ShowBatLxCnt = 0x00;
  2561                           
  2562                           ;key.c: 174: RunLED.TaskBatLx = 0;
  2563  00AF  23C6  118A         	fcall	PL8	;call to abstracted procedure
  2564                           
  2565                           ;key.c: 175: SetShowBatLxLED(0x00);
  2566  00B1  2381  118A         	fcall	_SetShowBatLxLED
  2567  00B3                     l16297:	
  2568                           
  2569                           ;key.c: 176: }
  2570                           ;key.c: 177: }
  2571                           ;key.c: 180: if(ReadPort.KeyNum != 0 || (ReadPort.ScanNew&0x05) != 0) TimeCnt.SleepTime 
      +                          = 0;
  2572  00B3  1683               	bsf	3,5	;RP0=1, select bank1
  2573  00B4  1303               	bcf	3,6	;RP1=0, select bank1
  2574  00B5  08A5               	movf	(_ReadPort^(0+128)+5),f
  2575  00B6  1D03               	skipz
  2576  00B7  28BC               	goto	l16301
  2577  00B8  0821               	movf	(_ReadPort^(0+128)+1),w
  2578  00B9  3905               	andlw	5
  2579  00BA  1903               	btfsc	3,2
  2580  00BB  0008               	return
  2581  00BC                     l16301:	
  2582  00BC  1283               	bcf	3,5	;RP0=0, select bank2
  2583  00BD  1703               	bsf	3,6	;RP1=1, select bank2
  2584  00BE  01DC               	clrf	92
  2585  00BF  01DD               	clrf	93
  2586  00C0  0008               	return
  2587  00C1                     __end_of_PortScan:	
  2588  00C1                     __ptext732:	
  2589 ;; =============== function _IdleProgress ends ============
  2590                           
  2591                           
  2592 ;; *************** function _PowerProgress *****************
  2593 ;; Defined at:
  2594 ;;		line 110 in file "E:\workSpace\git_work\jm\P2\code\task.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;		None
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;  AD_Temp         2   35[BANK0 ] unsigned int 
  2599 ;; Return value:  Size  Location     Type
  2600 ;;		None               void
  2601 ;; Registers used:
  2602 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2603 ;; Tracked objects:
  2604 ;;		On entry : 60/0
  2605 ;;		On exit  : 60/0
  2606 ;;		Unchanged: FFE9F/0
  2607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  2608 ;;      Params:         0       0       0       0       0       0
  2609 ;;      Locals:         0       2       0       0       0       0
  2610 ;;      Temps:          0       4       0       0       0       0
  2611 ;;      Totals:         0       6       0       0       0       0
  2612 ;;Total ram usage:        6 bytes
  2613 ;; Hardware stack levels used:    1
  2614 ;; Hardware stack levels required when called:    5
  2615 ;; This function calls:
  2616 ;;		_SetOffNotifyLED
  2617 ;;		_SetShowLED
  2618 ;;		_SetWarnEvent
  2619 ;;		_ShowSegmentLED
  2620 ;;		_SetShowBatLxLED
  2621 ;;		_ReadLoadRes
  2622 ;;		_KeyUpStopSmoke
  2623 ;;		_HAL_ADC_Sample
  2624 ;;		___lmul
  2625 ;;		___lldiv
  2626 ;; This function is called by:
  2627 ;;		_main
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630  00C1                     _PowerProgress:	
  2631                           
  2632                           ;task.c: 111: uint16_t AD_Temp;
  2633                           ;task.c: 113: if(VoutInfoFlag.bits.b0 != 0)
  2634                           
  2635                           ; Regs used in _PowerProgress: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2636  00C1  1C2C               	btfss	_VoutInfoFlag,0
  2637  00C2  2946               	goto	l10115
  2638  00C3  3007               	movlw	7
  2639                           
  2640                           ;task.c: 114: {
  2641                           ;task.c: 115: VoutInfoFlag.bits.b0 = 0;
  2642  00C4  102C               	bcf	_VoutInfoFlag,0
  2643                           
  2644                           ;task.c: 116: if(RunEventLED.EmEvent < 7 || RunEventLED.EmEvent == 10 || RunEventLED.EmE
      +                          vent == 17 )
  2645  00C5  0244               	subwf	_RunEventLED+3,w
  2646  00C6  1C03               	skipc
  2647  00C7  28D0               	goto	l10118
  2648  00C8  0844               	movf	_RunEventLED+3,w
  2649  00C9  3A0A               	xorlw	10
  2650  00CA  1903               	skipnz
  2651  00CB  28D0               	goto	l10118
  2652  00CC  0844               	movf	_RunEventLED+3,w
  2653  00CD  3A11               	xorlw	17
  2654  00CE  1D03               	skipz
  2655  00CF  0008               	return
  2656  00D0                     l10118:	
  2657                           
  2658                           ;task.c: 117: {
  2659                           ;task.c: 118: if(SysInfoFlag.bits.b7 == 0 )
  2660  00D0  1FAB               	btfss	_SysInfoFlag,7
  2661                           
  2662                           ;task.c: 119: {
  2663                           ;task.c: 120: if(VoutInfoFlag.bits.b7 == 0)
  2664  00D1  1BAC               	btfsc	_VoutInfoFlag,7
  2665  00D2  0008               	return
  2666                           
  2667                           ;task.c: 121: {
  2668                           ;task.c: 122: if( GetADC.BatteryPercent==0 || VoutInfoFlag.bits.b3 != 0)
  2669  00D3  083A               	movf	_GetADC+12,w
  2670  00D4  1D03               	skipz
  2671  00D5  19AC               	btfsc	_VoutInfoFlag,3
  2672  00D6  28D8               	goto	l16319
  2673  00D7  28EB               	goto	l10121
  2674  00D8                     l16319:	
  2675                           
  2676                           ;task.c: 123: {
  2677                           ;task.c: 124: SetOffNotifyLED();
  2678  00D8  2384               	fcall	_SetOffNotifyLED
  2679                           
  2680                           ;task.c: 125: SetShowLED(0x00);
  2681  00D9  3000               	movlw	0
  2682                           
  2683                           ;task.c: 126: SetWarnEvent(&RunEventLED,7,25,20);
  2684  00DA  3007               	movlw	7
  2685  00DB  158A  240A  118A   	fcall	PL5	;call to abstracted procedure
  2686  00DE  238D  118A         	fcall	_SetWarnEvent
  2687                           
  2688                           ;task.c: 127: ShowSegmentLED(0x00);
  2689  00E0  3000               	movlw	0
  2690  00E1  2319  118A         	fcall	_ShowSegmentLED
  2691                           
  2692                           ;task.c: 128: GetADC.BatteryPercent = 0;
  2693  00E3  01BA               	clrf	_GetADC+12
  2694                           
  2695                           ;task.c: 130: if(RunEventLED.EmEvent == 1)
  2696  00E4  0B44               	decfsz	_RunEventLED+3,w
  2697  00E5  0008               	return
  2698  00E6  3000               	movlw	0
  2699                           
  2700                           ;task.c: 131: {
  2701                           ;task.c: 132: LedsInfoFlag.bits.b3 = 0;
  2702  00E7  11AA               	bcf	_LedsInfoFlag,3
  2703                           
  2704                           ;task.c: 133: RunLED.ShowBatLxCnt = 0x00;
  2705  00E8  01A5               	clrf	_RunLED+5
  2706                           
  2707                           ;task.c: 134: RunLED.TaskBatLx = 0;
  2708  00E9  01A6               	clrf	_RunLED+6
  2709                           
  2710                           ;task.c: 135: SetShowBatLxLED(0x00);
  2711  00EA  2B81               	ljmp	l15677
  2712  00EB                     l10121:	
  2713                           
  2714                           ;task.c: 138: else if(PAD3 == 1)
  2715  00EB  1D85               	btfss	5,3
  2716  00EC  28FB               	goto	l16347
  2717                           
  2718                           ;task.c: 139: {
  2719                           ;task.c: 140: SetOffNotifyLED();
  2720  00ED  2384  118A         	fcall	_SetOffNotifyLED
  2721                           
  2722                           ;task.c: 141: SetShowLED(0x00);
  2723  00EF  3000               	movlw	0
  2724                           
  2725                           ;task.c: 142: SetWarnEvent(&RunEventLED,13,25,4);
  2726  00F0  300D               	movlw	13
  2727  00F1  23C0  118A         	fcall	PL6	;call to abstracted procedure
  2728  00F3  238D  118A         	fcall	_SetWarnEvent
  2729                           
  2730                           ;task.c: 143: ShowSegmentLED(0x00);
  2731  00F5  3000               	movlw	0
  2732  00F6  2319  118A         	fcall	_ShowSegmentLED
  2733                           
  2734                           ;task.c: 144: LedsInfoFlag.bits.b3 = 0;
  2735                           
  2736                           ;task.c: 145: RunLED.ShowBatLxCnt = 0x00;
  2737  00F8  23C6  118A         	fcall	PL8	;call to abstracted procedure
  2738                           
  2739                           ;task.c: 147: SetShowBatLxLED(0x00);
  2740  00FA  2B81               	ljmp	l15677
  2741  00FB                     l16347:	
  2742                           ;task.c: 148: }
  2743                           
  2744                           
  2745                           ;task.c: 149: else
  2746                           ;task.c: 150: {
  2747                           ;task.c: 151: GetADC.LoadRes = ReadLoadRes();
  2748  00FB  158A  26BA  118A   	fcall	_ReadLoadRes
  2749  00FE  085F               	movf	?_ReadLoadRes+1,w
  2750  00FF  00B9               	movwf	_GetADC+11
  2751  0100  085E               	movf	?_ReadLoadRes,w
  2752  0101  00B8               	movwf	_GetADC+10
  2753                           
  2754                           ;task.c: 152: if(GetADC.LoadRes < 380)
  2755  0102  3001               	movlw	1
  2756  0103  0239               	subwf	_GetADC+11,w
  2757  0104  307C               	movlw	124
  2758  0105  1903               	skipnz
  2759  0106  0238               	subwf	_GetADC+10,w
  2760  0107  1803               	skipnc
  2761  0108  2914               	goto	l16363
  2762  0109                     l16351:	
  2763                           
  2764                           ;task.c: 153: {
  2765                           ;task.c: 154: SetOffNotifyLED();
  2766  0109  2384  118A         	fcall	_SetOffNotifyLED
  2767                           
  2768                           ;task.c: 155: SetWarnEvent(&RunEventLED,14,25,8);
  2769  010B  300E               	movlw	14
  2770  010C  2407  118A         	fcall	PL4	;call to abstracted procedure
  2771  010E  238D               	fcall	_SetWarnEvent
  2772                           
  2773                           ;task.c: 156: RunEventLED.ShowTask = 0;
  2774  010F  01C3               	clrf	_RunEventLED+2
  2775                           
  2776                           ;task.c: 157: LedsInfoFlag.bits.b3 = 0;
  2777  0110  11AA               	bcf	_LedsInfoFlag,3
  2778                           
  2779                           ;task.c: 158: RunLED.ShowBatLxCnt = 0x00;
  2780  0111  01A5               	clrf	_RunLED+5
  2781                           
  2782                           ;task.c: 159: RunLED.TaskBatLx = 0;
  2783  0112  01A6               	clrf	_RunLED+6
  2784                           
  2785                           ;task.c: 160: }
  2786  0113  0008               	return
  2787  0114                     l16363:	
  2788                           
  2789                           ;task.c: 161: else
  2790                           ;task.c: 162: {
  2791                           ;task.c: 163: FlagSmoke = 0xA55A;
  2792  0114  305A               	movlw	90
  2793  0115  1703               	bsf	3,6	;RP1=1, select bank2
  2794  0116  00E4               	movwf	100	;volatile
  2795  0117  30A5               	movlw	165
  2796  0118  00E5               	movwf	101	;volatile
  2797                           
  2798                           ;task.c: 164: LVDIF = 0;
  2799  0119  1303               	bcf	3,6	;RP1=0, select bank0
  2800  011A  100E               	bcf	14,0
  2801                           
  2802                           ;task.c: 165: LVDIE = 1;
  2803  011B  140D               	bsf	13,0
  2804                           
  2805                           ;task.c: 166: PAMOD54 = PAMOD54 & 0x0F | 0x30;
  2806  011C  1683               	bsf	3,5	;RP0=1, select bank1
  2807  011D  0807               	movf	7,w
  2808  011E  390F               	andlw	15
  2809  011F  3830               	iorlw	48
  2810  0120  0087               	movwf	7	;volatile
  2811                           
  2812                           ;task.c: 168: ReadPort.ChargerCnt = 0;
  2813  0121  01A0               	clrf	_ReadPort^(0+128)
  2814                           
  2815                           ;task.c: 169: TimeCnt.RechgFullTime = 0;
  2816  0122  1283               	bcf	3,5	;RP0=0, select bank2
  2817  0123  1703               	bsf	3,6	;RP1=1, select bank2
  2818  0124  01DA               	clrf	90
  2819  0125  01DB               	clrf	91
  2820                           
  2821                           ;task.c: 170: GetADC.VoutOld = GetADC.BatteryVoltage;
  2822  0126  1303               	bcf	3,6	;RP1=0, select bank0
  2823  0127  0833               	movf	_GetADC+5,w
  2824  0128  00B7               	movwf	_GetADC+9
  2825  0129  0832               	movf	_GetADC+4,w
  2826  012A  00B6               	movwf	_GetADC+8
  2827                           
  2828                           ;task.c: 171: if(SysInfoFlag.bits.b1 != 0)
  2829  012B  1CAB               	btfss	_SysInfoFlag,1
  2830  012C  2932               	goto	l16379
  2831                           
  2832                           ;task.c: 172: {
  2833                           ;task.c: 173: GetADC.BatteryVoltageOld = GetADC.BatteryVoltage;
  2834  012D  0833               	movf	_GetADC+5,w
  2835  012E  00C0               	movwf	_GetADC+18
  2836  012F  0832               	movf	_GetADC+4,w
  2837  0130  00BF               	movwf	_GetADC+17
  2838                           
  2839                           ;task.c: 174: SysInfoFlag.bits.b1 = 0;
  2840  0131  10AB               	bcf	_SysInfoFlag,1
  2841  0132                     l16379:	
  2842  0132  30C8               	movlw	200
  2843                           
  2844                           ;task.c: 175: }
  2845                           ;task.c: 176: PAD4 = 0;
  2846  0133  1205               	bcf	5,4
  2847                           
  2848                           ;task.c: 177: RunPWM.BuckPwmDuty = RunPWM.BuckPwmDutyBuff = 200;
  2849  0134  00A9               	movwf	_RunPWM+2
  2850  0135  00A8               	movwf	_RunPWM+1
  2851  0136  3032               	movlw	50
  2852                           
  2853                           ;task.c: 178: RunPWM.BuckPwmCycleCnt = 0;
  2854  0137  01A7               	clrf	_RunPWM
  2855                           
  2856                           ;task.c: 179: GetADC.LowVolCnt = 0;
  2857  0138  01AE               	clrf	_GetADC
  2858                           
  2859                           ;task.c: 180: GetADC.VoutVDD = 0;
  2860  0139  01B4               	clrf	_GetADC+6
  2861  013A  01B5               	clrf	_GetADC+7
  2862                           
  2863                           ;task.c: 181: VoutInfoFlag.bits.b5 = 0;VoutInfoFlag.bits.b1 = 0;
  2864  013B  12AC               	bcf	_VoutInfoFlag,5
  2865  013C  10AC               	bcf	_VoutInfoFlag,1
  2866                           
  2867                           ;task.c: 182: TM0IE = 0;
  2868  013D  120B               	bcf	11,4
  2869  013E  1703               	bsf	3,6	;RP1=1, select bank2
  2870  013F  01DE               	clrf	94
  2871  0140  01DF               	clrf	95
  2872                           
  2873                           ;task.c: 184: TimeCnt.TimeBase = 50;
  2874  0141  00D9               	movwf	89
  2875                           
  2876                           ;task.c: 185: TM0IE = 1;
  2877  0142  160B               	bsf	11,4
  2878                           
  2879                           ;task.c: 186: VoutInfoFlag.bits.b7 = 1;
  2880  0143  1303               	bcf	3,6	;RP1=0, select bank0
  2881  0144  17AC               	bsf	_VoutInfoFlag,7
  2882  0145  0008               	return
  2883  0146                     l10115:	
  2884                           
  2885                           ;task.c: 193: else if(VoutInfoFlag.bits.b7 != 0)
  2886  0146  1FAC               	btfss	_VoutInfoFlag,7
  2887  0147  0008               	return
  2888                           
  2889                           ;task.c: 194: {
  2890                           ;task.c: 195: if(VoutInfoFlag.bits.b6 != 0)
  2891  0148  1F2C               	btfss	_VoutInfoFlag,6
  2892  0149  294D               	goto	l16413
  2893                           
  2894                           ;task.c: 196: {
  2895                           ;task.c: 197: KeyUpStopSmoke();
  2896  014A  23A2  118A         	fcall	_KeyUpStopSmoke
  2897  014C  2909               	goto	l16351
  2898  014D                     l16413:	
  2899                           ;task.c: 199: SetWarnEvent(&RunEventLED,14,25,8);
  2900                           
  2901                           ;task.c: 198: SetOffNotifyLED();
  2902                           
  2903                           
  2904                           ;task.c: 205: else if(GetADC.LowVolCnt >= 10)
  2905  014D  300A               	movlw	10
  2906  014E  022E               	subwf	_GetADC,w
  2907  014F  1C03               	skipc
  2908  0150  2964               	goto	l16431
  2909                           
  2910                           ;task.c: 206: {
  2911                           ;task.c: 207: KeyUpStopSmoke();
  2912  0151  23A2  118A         	fcall	_KeyUpStopSmoke
  2913                           
  2914                           ;task.c: 208: SetOffNotifyLED();
  2915  0153  2384               	fcall	_SetOffNotifyLED
  2916                           
  2917                           ;task.c: 209: SetShowLED(0x00);
  2918  0154  3000               	movlw	0
  2919                           
  2920                           ;task.c: 210: SetWarnEvent(&RunEventLED,7,25,20);
  2921  0155  3007               	movlw	7
  2922  0156  158A  240A  118A   	fcall	PL5	;call to abstracted procedure
  2923  0159  238D  118A         	fcall	_SetWarnEvent
  2924                           
  2925                           ;task.c: 211: ShowSegmentLED(0x00);
  2926  015B  3000               	movlw	0
  2927  015C  2319  118A         	fcall	_ShowSegmentLED
  2928  015E  3000               	movlw	0
  2929                           
  2930                           ;task.c: 212: GetADC.BatteryPercent = 0;
  2931  015F  01BA               	clrf	_GetADC+12
  2932                           
  2933                           ;task.c: 213: LedsInfoFlag.bits.b3 = 0;
  2934  0160  11AA               	bcf	_LedsInfoFlag,3
  2935                           
  2936                           ;task.c: 214: RunLED.ShowBatLxCnt = 0x00;
  2937  0161  01A5               	clrf	_RunLED+5
  2938                           
  2939                           ;task.c: 215: RunLED.TaskBatLx = 0;
  2940  0162  01A6               	clrf	_RunLED+6
  2941                           
  2942                           ;task.c: 216: SetShowBatLxLED(0x00);
  2943  0163  2B81               	ljmp	l15677
  2944  0164                     l16431:	
  2945                           ;task.c: 218: }
  2946                           
  2947                           
  2948                           ;task.c: 219: else if(TimeCnt.SmokeTask >= 1000 && (ReadPort.KeyState&0x80) == 0)
  2949  0164  3003               	movlw	3
  2950  0165  1703               	bsf	3,6	;RP1=1, select bank2
  2951  0166  025F               	subwf	95,w
  2952  0167  30E8               	movlw	232
  2953  0168  1903               	skipnz
  2954  0169  025E               	subwf	94,w
  2955  016A  1C03               	skipc
  2956  016B  2980               	goto	l16447
  2957  016C  1683               	bsf	3,5	;RP0=1, select bank1
  2958  016D  1303               	bcf	3,6	;RP1=0, select bank1
  2959  016E  1BA4               	btfsc	(_ReadPort^(0+128)+4),7
  2960  016F  2980               	goto	l16447
  2961                           
  2962                           ;task.c: 220: {
  2963                           ;task.c: 221: KeyUpStopSmoke();
  2964  0170  23A2  118A         	fcall	_KeyUpStopSmoke
  2965                           
  2966                           ;task.c: 222: SetOffNotifyLED();
  2967  0172  2384  118A         	fcall	_SetOffNotifyLED
  2968                           
  2969                           ;task.c: 223: SetShowLED(0x00);
  2970  0174  3000               	movlw	0
  2971                           
  2972                           ;task.c: 224: SetWarnEvent(&RunEventLED,15,25,4);
  2973  0175  300F               	movlw	15
  2974  0176  23C0  118A         	fcall	PL6	;call to abstracted procedure
  2975  0178  238D  118A         	fcall	_SetWarnEvent
  2976                           
  2977                           ;task.c: 225: ShowSegmentLED(0x00);
  2978  017A  3000               	movlw	0
  2979  017B  2319  118A         	fcall	_ShowSegmentLED
  2980                           
  2981                           ;task.c: 226: LedsInfoFlag.bits.b3 = 0;
  2982                           
  2983                           ;task.c: 227: RunLED.ShowBatLxCnt = 0x00;
  2984  017D  23C6  118A         	fcall	PL8	;call to abstracted procedure
  2985                           
  2986                           ;task.c: 229: SetShowBatLxLED(0x00);
  2987  017F  2B81               	ljmp	l15677
  2988  0180                     l16447:	
  2989                           ;task.c: 230: }
  2990                           
  2991                           
  2992                           ;task.c: 231: else if(TimeCnt.SmokeTask >= 1500 && (ReadPort.KeyState&0x80) != 0)
  2993  0180  3005               	movlw	5
  2994  0181  1283               	bcf	3,5	;RP0=0, select bank2
  2995  0182  1703               	bsf	3,6	;RP1=1, select bank2
  2996  0183  025F               	subwf	95,w
  2997  0184  30DC               	movlw	220
  2998  0185  1903               	skipnz
  2999  0186  025E               	subwf	94,w
  3000  0187  1C03               	skipc
  3001  0188  299F               	goto	l10139
  3002  0189  1683               	bsf	3,5	;RP0=1, select bank1
  3003  018A  1303               	bcf	3,6	;RP1=0, select bank1
  3004  018B  1FA4               	btfss	(_ReadPort^(0+128)+4),7
  3005  018C  299F               	goto	l10139
  3006                           
  3007                           ;task.c: 232: {
  3008                           ;task.c: 233: KeyUpStopSmoke();
  3009  018D  23A2  118A         	fcall	_KeyUpStopSmoke
  3010                           
  3011                           ;task.c: 234: SetOffNotifyLED();
  3012  018F  2384  118A         	fcall	_SetOffNotifyLED
  3013                           
  3014                           ;task.c: 235: SetShowLED(0x00);
  3015  0191  3000               	movlw	0
  3016  0192  3019               	movlw	25
  3017                           
  3018                           ;task.c: 236: SetWarnEvent(&RunEventLED,0,25,0);
  3019  0193  01C5               	clrf	?_SetWarnEvent
  3020  0194  00C6               	movwf	?_SetWarnEvent+1
  3021  0195  3041               	movlw	_RunEventLED& (0+255)
  3022  0196  01C7               	clrf	?_SetWarnEvent+2
  3023  0197  238D  118A         	fcall	_SetWarnEvent
  3024                           
  3025                           ;task.c: 237: ShowSegmentLED(0x00);
  3026  0199  3000               	movlw	0
  3027  019A  2319  118A         	fcall	_ShowSegmentLED
  3028                           
  3029                           ;task.c: 238: LedsInfoFlag.bits.b3 = 0;
  3030                           
  3031                           ;task.c: 239: RunLED.ShowBatLxCnt = 0x00;
  3032  019C  23C6  118A         	fcall	PL8	;call to abstracted procedure
  3033                           
  3034                           ;task.c: 241: SetShowBatLxLED(0x00);
  3035  019E  2B81               	ljmp	l15677
  3036  019F                     l10139:	
  3037                           ;task.c: 242: }
  3038                           
  3039                           
  3040                           ;task.c: 243: else
  3041                           ;task.c: 244: {
  3042                           ;task.c: 245: if(VoutInfoFlag.bits.b1 != 0)
  3043  019F  1283               	bcf	3,5	;RP0=0, select bank0
  3044  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  3045  01A1  1CAC               	btfss	_VoutInfoFlag,1
  3046  01A2  0008               	return
  3047  01A3  3003               	movlw	3
  3048                           
  3049                           ;task.c: 246: {
  3050                           ;task.c: 247: GetADC.LoadRes = HAL_ADC_Sample(3,0);
  3051  01A4  01C5               	clrf	?_HAL_ADC_Sample
  3052  01A5  158A  2719  118A   	fcall	_HAL_ADC_Sample
  3053  01A8  0846               	movf	?_HAL_ADC_Sample+1,w
  3054  01A9  00B9               	movwf	_GetADC+11
  3055  01AA  0845               	movf	?_HAL_ADC_Sample,w
  3056  01AB  00B8               	movwf	_GetADC+10
  3057                           
  3058                           ;task.c: 249: if(VoutInfoFlag.bits.b1 != 0)
  3059  01AC  1CAC               	btfss	_VoutInfoFlag,1
  3060  01AD  0008               	return
  3061                           
  3062                           ;task.c: 250: {
  3063                           ;task.c: 251: if(VoutInfoFlag.bits.b5 != 0)
  3064  01AE  1EAC               	btfss	_VoutInfoFlag,5
  3065  01AF  2A31               	goto	l16497
  3066                           
  3067                           ;task.c: 252: {
  3068                           ;task.c: 253: if(GetADC.LoadRes < 3800)
  3069  01B0  300E               	movlw	14
  3070  01B1  0239               	subwf	_GetADC+11,w
  3071  01B2  30D8               	movlw	216
  3072  01B3  1903               	skipnz
  3073  01B4  0238               	subwf	_GetADC+10,w
  3074  01B5  1803               	skipnc
  3075  01B6  29BA               	goto	l16473
  3076  01B7                     l16471:	
  3077                           
  3078                           ;task.c: 254: {
  3079                           ;task.c: 255: VoutInfoFlag.bits.b6 = 1;
  3080  01B7  172C               	bsf	_VoutInfoFlag,6
  3081                           
  3082                           ;task.c: 256: PAD4 = 1;
  3083  01B8  1605               	bsf	5,4
  3084                           
  3085                           ;task.c: 257: }
  3086  01B9  0008               	return
  3087  01BA                     l16473:	
  3088                           
  3089                           ;task.c: 258: else
  3090                           ;task.c: 259: {
  3091                           ;task.c: 260: if(GetADC.VoutVDD)
  3092  01BA  3006               	movlw	6
  3093  01BB  3E2E               	addlw	_GetADC& (0+255)
  3094  01BC  0084               	movwf	4
  3095  01BD  1383               	bcf	3,7	;select IRP bank0
  3096  01BE  0800               	movf	0,w
  3097  01BF  0A84               	incf	4,f
  3098  01C0  0400               	iorwf	0,w
  3099  01C1  1903               	skipnz
  3100  01C2  0008               	return
  3101                           
  3102                           ;task.c: 261: {
  3103                           ;task.c: 271: AD_Temp = ((uint32_t)GetADC.LoadRes*GetADC.VoutVDD)/4096;
  3104  01C3  0838               	movf	_GetADC+10,w
  3105  01C4  00C5               	movwf	?___lmul
  3106  01C5  0839               	movf	_GetADC+11,w
  3107  01C6  00C6               	movwf	?___lmul+1
  3108  01C7  01C7               	clrf	?___lmul+2
  3109  01C8  01C8               	clrf	?___lmul+3
  3110  01C9  0834               	movf	_GetADC+6,w
  3111  01CA  00C9               	movwf	?___lmul+4
  3112  01CB  0835               	movf	_GetADC+7,w
  3113  01CC  00CA               	movwf	?___lmul+5
  3114  01CD  01CB               	clrf	?___lmul+6
  3115  01CE  01CC               	clrf	?___lmul+7
  3116  01CF  158A  2783  118A   	fcall	___lmul
  3117  01D2  0845               	movf	?___lmul,w
  3118  01D3  00E4               	movwf	??_PowerProgress
  3119  01D4  0846               	movf	?___lmul+1,w
  3120  01D5  00E5               	movwf	??_PowerProgress+1
  3121  01D6  0847               	movf	?___lmul+2,w
  3122  01D7  00E6               	movwf	??_PowerProgress+2
  3123  01D8  0848               	movf	?___lmul+3,w
  3124  01D9  00E7               	movwf	??_PowerProgress+3
  3125  01DA  300C               	movlw	12
  3126  01DB                     u4345:	
  3127  01DB  1003               	clrc
  3128  01DC  0CE7               	rrf	??_PowerProgress+3,f
  3129  01DD  0CE6               	rrf	??_PowerProgress+2,f
  3130  01DE  0CE5               	rrf	??_PowerProgress+1,f
  3131  01DF  0CE4               	rrf	??_PowerProgress,f
  3132  01E0  3EFF               	addlw	-1
  3133  01E1  1D03               	skipz
  3134  01E2  29DB               	goto	u4345
  3135  01E3  0865               	movf	??_PowerProgress+1,w
  3136  01E4  00E9               	movwf	PowerProgress@AD_Temp+1
  3137  01E5  0864               	movf	??_PowerProgress,w
  3138  01E6  00E8               	movwf	PowerProgress@AD_Temp
  3139                           
  3140                           ;task.c: 272: if(GetADC.Vout_Lx == 0x01)
  3141  01E7  0B31               	decfsz	_GetADC+3,w
  3142  01E8  2A06               	goto	l16485
  3143                           
  3144                           ;task.c: 273: {
  3145                           ;task.c: 274: if(GetADC.VoutOld >= 4050)
  3146  01E9  300F               	movlw	15
  3147  01EA  0237               	subwf	_GetADC+9,w
  3148  01EB  30D2               	movlw	210
  3149  01EC  1903               	skipnz
  3150  01ED  0236               	subwf	_GetADC+8,w
  3151                           
  3152                           ;task.c: 275: {
  3153                           ;task.c: 276: AD_Temp = 610000UL/AD_Temp;
  3154  01EE  0868               	movf	PowerProgress@AD_Temp,w
  3155  01EF  00D1               	movwf	?___lldiv
  3156  01F0  0869               	movf	PowerProgress@AD_Temp+1,w
  3157  01F1  00D2               	movwf	?___lldiv+1
  3158  01F2  1C03               	skipc
  3159  01F3  29FD               	goto	L4
  3160  01F4  3009               	movlw	9
  3161  01F5  01D3               	clrf	?___lldiv+2
  3162  01F6  01D4               	clrf	?___lldiv+3
  3163  01F7  01D8               	clrf	?___lldiv+7
  3164  01F8  00D7               	movwf	?___lldiv+6
  3165  01F9  304E               	movlw	78
  3166  01FA  00D6               	movwf	?___lldiv+5
  3167  01FB  30D0               	movlw	208
  3168  01FC  2A12               	goto	L2
  3169  01FD                     L4:	
  3170                           ;task.c: 278: else
  3171                           ;task.c: 279: {
  3172                           ;task.c: 280: AD_Temp = 670000UL/AD_Temp;
  3173                           
  3174                           ;task.c: 277: }
  3175                           
  3176  01FD  300A               	movlw	10
  3177  01FE  01D3               	clrf	?___lldiv+2
  3178  01FF  01D4               	clrf	?___lldiv+3
  3179  0200  01D8               	clrf	?___lldiv+7
  3180  0201  00D7               	movwf	?___lldiv+6
  3181  0202  3039               	movlw	57
  3182  0203  00D6               	movwf	?___lldiv+5
  3183  0204  3030               	movlw	48
  3184  0205  2A12               	goto	L2
  3185  0206                     l16485:	
  3186                           
  3187                           ;task.c: 283: else
  3188                           ;task.c: 284: {
  3189                           ;task.c: 285: AD_Temp = 550000UL/AD_Temp;
  3190  0206  0868               	movf	PowerProgress@AD_Temp,w
  3191  0207  00D1               	movwf	?___lldiv
  3192  0208  0869               	movf	PowerProgress@AD_Temp+1,w
  3193  0209  00D2               	movwf	?___lldiv+1
  3194  020A  3008               	movlw	8
  3195  020B  01D3               	clrf	?___lldiv+2
  3196  020C  01D4               	clrf	?___lldiv+3
  3197  020D  01D8               	clrf	?___lldiv+7
  3198  020E  00D7               	movwf	?___lldiv+6
  3199  020F  3064               	movlw	100
  3200  0210  00D6               	movwf	?___lldiv+5
  3201  0211  3070               	movlw	112
  3202  0212                     L2:	
  3203  0212  00D5               	movwf	?___lldiv+4
  3204  0213  158A  27B6  118A   	fcall	___lldiv
  3205  0216  0852               	movf	?___lldiv+1,w
  3206  0217  00E9               	movwf	PowerProgress@AD_Temp+1
  3207  0218  0851               	movf	?___lldiv,w
  3208  0219  00E8               	movwf	PowerProgress@AD_Temp
  3209                           
  3210                           ;task.c: 286: }
  3211                           ;task.c: 288: if(AD_Temp>=200) RunPWM.BuckPwmDutyBuff = 200;
  3212  021A  3000               	movlw	0
  3213  021B  0269               	subwf	PowerProgress@AD_Temp+1,w
  3214  021C  30C8               	movlw	200
  3215  021D  1903               	skipnz
  3216  021E  0268               	subwf	PowerProgress@AD_Temp,w
  3217  021F  1C03               	skipc
  3218  0220  2A24               	goto	l16491
  3219  0221  30C8               	movlw	200
  3220  0222  00A9               	movwf	_RunPWM+2
  3221  0223  0008               	return
  3222  0224                     l16491:	
  3223                           
  3224                           ;task.c: 289: else if(AD_Temp < 60) RunPWM.BuckPwmDutyBuff = 60;
  3225  0224  3000               	movlw	0
  3226  0225  0269               	subwf	PowerProgress@AD_Temp+1,w
  3227  0226  303C               	movlw	60
  3228  0227  1903               	skipnz
  3229  0228  0268               	subwf	PowerProgress@AD_Temp,w
  3230  0229  1803               	skipnc
  3231  022A  2A2E               	goto	l16495
  3232  022B  303C               	movlw	60
  3233  022C  00A9               	movwf	_RunPWM+2
  3234  022D  0008               	return
  3235  022E                     l16495:	
  3236                           
  3237                           ;task.c: 290: else RunPWM.BuckPwmDutyBuff = AD_Temp;
  3238  022E  0868               	movf	PowerProgress@AD_Temp,w
  3239  022F  00A9               	movwf	_RunPWM+2
  3240  0230  0008               	return
  3241  0231                     l16497:	
  3242                           
  3243                           ;task.c: 294: else
  3244                           ;task.c: 295: {
  3245                           ;task.c: 296: if(GetADC.LoadRes < 3810)
  3246  0231  300E               	movlw	14
  3247  0232  0239               	subwf	_GetADC+11,w
  3248  0233  30E2               	movlw	226
  3249  0234  1903               	skipnz
  3250  0235  0238               	subwf	_GetADC+10,w
  3251  0236  1C03               	btfss	3,0
  3252  0237  29B7               	goto	l16471
  3253                           
  3254                           ;task.c: 301: else
  3255                           ;task.c: 302: {
  3256                           ;task.c: 303: VoutInfoFlag.bits.b5 = 1;
  3257  0238  16AC               	bsf	_VoutInfoFlag,5
  3258                           
  3259                           ;task.c: 304: GetADC.VoutOpenCnt = 0;
  3260  0239  01B0               	clrf	_GetADC+2
  3261                           
  3262                           ;task.c: 305: LedsInfoFlag.bits.b0 = 0;
  3263  023A  102A               	bcf	_LedsInfoFlag,0
  3264                           
  3265                           ;task.c: 306: LedsInfoFlag.bits.b6 = 0;
  3266  023B  132A               	bcf	_LedsInfoFlag,6
  3267                           
  3268                           ;task.c: 307: LedsInfoFlag.bits.b2 = 0;
  3269  023C  112A               	bcf	_LedsInfoFlag,2
  3270                           
  3271                           ;task.c: 308: LedsInfoFlag.bits.b1 = 1;
  3272  023D  14AA               	bsf	_LedsInfoFlag,1
  3273                           
  3274                           ;task.c: 309: if(LedsInfoFlag.bits.b7 == 0)
  3275  023E  1BAA               	btfsc	_LedsInfoFlag,7
  3276  023F  2A45               	goto	L3
  3277                           
  3278                           ;task.c: 310: {
  3279                           ;task.c: 311: RunLED.NotifyLedDuty = 0;
  3280  0240  01A1               	clrf	_RunLED+1
  3281                           
  3282                           ;task.c: 312: LedsInfoFlag.bits.b3 = 0;
  3283  0241  11AA               	bcf	_LedsInfoFlag,3
  3284                           
  3285                           ;task.c: 313: RunLED.ShowBatLxCnt = 0x00;
  3286  0242  01A5               	clrf	_RunLED+5
  3287                           
  3288                           ;task.c: 314: RunLED.TaskBatLx = 0;
  3289  0243  01A6               	clrf	_RunLED+6
  3290                           
  3291                           ;task.c: 315: }
  3292                           ;task.c: 316: LedsInfoFlag.bits.b7 = 1;
  3293  0244  17AA               	bsf	_LedsInfoFlag,7
  3294  0245                     L3:	
  3295  0245  3019               	movlw	25
  3296                           
  3297                           ;task.c: 317: LedsInfoFlag.bits.b0 = 1;
  3298  0246  142A               	bsf	_LedsInfoFlag,0
  3299                           
  3300                           ;task.c: 318: LedsInfoFlag.bits.b3 = 1;
  3301  0247  15AA               	bsf	_LedsInfoFlag,3
  3302  0248  01C5               	clrf	?_SetWarnEvent
  3303  0249  0AC5               	incf	?_SetWarnEvent,f
  3304  024A  00C6               	movwf	?_SetWarnEvent+1
  3305  024B  30C8               	movlw	200
  3306  024C  00C7               	movwf	?_SetWarnEvent+2
  3307  024D  3041               	movlw	_RunEventLED& (0+255)
  3308  024E  238D               	fcall	_SetWarnEvent
  3309                           
  3310                           ;task.c: 320: GetADC.BatteryLevel = GetADC.BatteryPercent;
  3311  024F  083A               	movf	_GetADC+12,w
  3312  0250  00AF               	movwf	_GetADC+1
  3313                           
  3314                           ;task.c: 321: RunEventLED.ShowTask = 2;
  3315  0251  3002               	movlw	2
  3316  0252  00C3               	movwf	_RunEventLED+2
  3317  0253  0008               	return
  3318  0254                     __end_of_PowerProgress:	
  3319  0254                     __ptext737:	
  3320 ;; =============== function _gearSwitch ends ============
  3321                           
  3322                           
  3323 ;; *************** function _ShowWarnLED *****************
  3324 ;; Defined at:
  3325 ;;		line 112 in file "E:\workSpace\git_work\jm\P2\code\LED.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;		None
  3328 ;; Auto vars:     Size  Location     Type
  3329 ;;		None
  3330 ;; Return value:  Size  Location     Type
  3331 ;;		None               void
  3332 ;; Registers used:
  3333 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3334 ;; Tracked objects:
  3335 ;;		On entry : 60/0
  3336 ;;		On exit  : 60/0
  3337 ;;		Unchanged: FFF9F/0
  3338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  3339 ;;      Params:         0       0       0       0       0       0
  3340 ;;      Locals:         0       0       0       0       0       0
  3341 ;;      Temps:          0       0       0       0       0       0
  3342 ;;      Totals:         0       0       0       0       0       0
  3343 ;;Total ram usage:        0 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; Hardware stack levels required when called:    4
  3346 ;; This function calls:
  3347 ;;		_SetShowLED
  3348 ;;		_ShowSegmentLED
  3349 ;;		_SetShowBatLxLED
  3350 ;; This function is called by:
  3351 ;;		_main
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354  0254                     _ShowWarnLED:	
  3355                           
  3356                           ;LED.c: 113: if(RunEventLED.EmEvent != 0)
  3357                           
  3358                           ; Regs used in _ShowWarnLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3359  0254  0844               	movf	_RunEventLED+3,w
  3360  0255  1903               	btfsc	3,2
  3361  0256  0008               	return
  3362                           
  3363                           ;LED.c: 114: {
  3364                           ;LED.c: 115: if(RunEventLED.FlashTimes)
  3365  0257  0842               	movf	_RunEventLED+1,w
  3366  0258  1903               	btfsc	3,2
  3367  0259  2AF0               	goto	l16069
  3368  025A  2AC5               	goto	l16065
  3369  025B                     l15991:	
  3370                           
  3371                           ;LED.c: 120: if(RunEventLED.FlashTimes < 9)
  3372  025B  3009               	movlw	9
  3373  025C  0242               	subwf	_RunEventLED+1,w
  3374  025D  1803               	skipnc
  3375  025E  2AEE               	goto	l16067
  3376                           
  3377                           ;LED.c: 121: {
  3378                           ;LED.c: 122: SetShowLED(0x07);
  3379  025F  3007               	movlw	7
  3380                           
  3381                           ;LED.c: 123: ShowSegmentLED(0xFF);
  3382  0260  30FF               	movlw	255
  3383  0261  2319  118A         	fcall	_ShowSegmentLED
  3384                           
  3385                           ;LED.c: 124: SetShowBatLxLED(0xFF);
  3386  0263  30FF               	movlw	255
  3387  0264  2381  118A         	fcall	_SetShowBatLxLED
  3388  0266  2AEE               	goto	l16067
  3389  0267                     l15999:	
  3390                           
  3391                           ;LED.c: 128: ShowSegmentLED(0x0E);
  3392  0267  300E               	movlw	14
  3393  0268  2319  118A         	fcall	_ShowSegmentLED
  3394                           
  3395                           ;LED.c: 129: break;
  3396  026A  2AEE               	goto	l16067
  3397  026B                     l16001:	
  3398                           
  3399                           ;LED.c: 131: GetADC.BatteryLevel = GetADC.BatteryPercent;
  3400  026B  083A               	movf	_GetADC+12,w
  3401  026C  00AF               	movwf	_GetADC+1
  3402                           
  3403                           ;LED.c: 132: RunLED.ShowEventOld ^= 0x01;
  3404  026D  3001               	movlw	1
  3405  026E  06A4               	xorwf	_RunLED+4,f
  3406                           
  3407                           ;LED.c: 133: ShowSegmentLED((0x0C|RunLED.ShowEventOld));
  3408  026F  0824               	movf	_RunLED+4,w
  3409  0270  380C               	iorlw	12
  3410  0271  2319  118A         	fcall	_ShowSegmentLED
  3411                           
  3412                           ;LED.c: 134: if((RunEventLED.FlashTimes&0x01) == 0)
  3413  0273  1842               	btfsc	_RunEventLED+1,0
  3414  0274  2AEE               	goto	l16067
  3415                           
  3416                           ;LED.c: 135: {
  3417                           ;LED.c: 136: RunEventLED.FlashTimes = 20;
  3418  0275  3014               	movlw	20
  3419  0276  00C2               	movwf	_RunEventLED+1
  3420  0277  2AEE               	goto	l16067
  3421  0278                     l6621:	
  3422                           ;LED.c: 139: case 7:
  3423                           
  3424                           
  3425                           ;LED.c: 140: if((RunEventLED.FlashTimes&0x01) != 0)
  3426  0278  1C42               	btfss	_RunEventLED+1,0
  3427  0279  2A7F               	goto	l16015
  3428                           
  3429                           ;LED.c: 141: {
  3430                           ;LED.c: 142: SetShowLED(0x00);
  3431  027A  3000               	movlw	0
  3432                           
  3433                           ;LED.c: 143: ShowSegmentLED(0x08);
  3434  027B  3008               	movlw	8
  3435  027C  2319  118A         	fcall	_ShowSegmentLED
  3436                           
  3437                           ;LED.c: 144: }
  3438  027E  2AEE               	goto	l16067
  3439  027F                     l16015:	
  3440                           
  3441                           ;LED.c: 145: else
  3442                           ;LED.c: 146: {
  3443                           ;LED.c: 147: SetShowLED(0x01);
  3444  027F  3001               	movlw	1
  3445  0280  300C               	movlw	12
  3446                           
  3447                           ;LED.c: 148: GetADC.BatteryLevel = 0x00;
  3448  0281  01AF               	clrf	_GetADC+1
  3449                           
  3450                           ;LED.c: 149: ShowSegmentLED(0x0C);
  3451  0282  2319  118A         	fcall	_ShowSegmentLED
  3452  0284  2AEE               	goto	l16067
  3453  0285                     l6624:	
  3454                           ;LED.c: 152: case 15:
  3455                           
  3456                           
  3457                           ;LED.c: 153: if((RunEventLED.FlashTimes&0x01) != 0)
  3458  0285  1C42               	btfss	_RunEventLED+1,0
  3459  0286  2A89               	goto	l16023
  3460                           
  3461                           ;LED.c: 154: {
  3462                           ;LED.c: 155: SetShowLED(0x00);
  3463  0287  3000               	movlw	0
  3464  0288  2A8A               	goto	L6
  3465  0289                     l16023:	
  3466                           ;LED.c: 156: }
  3467                           
  3468                           
  3469                           ;LED.c: 157: else
  3470                           ;LED.c: 158: {
  3471                           ;LED.c: 159: SetShowLED(GetADC.Vout_Lx);
  3472  0289  0831               	movf	_GetADC+3,w
  3473  028A                     L6:	
  3474                           
  3475                           ;LED.c: 160: }
  3476                           ;LED.c: 161: ShowSegmentLED(0x10);
  3477  028A  3010               	movlw	16
  3478  028B  2319  118A         	fcall	_ShowSegmentLED
  3479                           
  3480                           ;LED.c: 162: break;
  3481  028D  2AEE               	goto	l16067
  3482  028E                     l6628:	
  3483                           
  3484                           ;LED.c: 164: case 13:
  3485                           ;LED.c: 165: if((RunEventLED.FlashTimes&0x01) != 0)
  3486  028E  1C42               	btfss	_RunEventLED+1,0
  3487  028F  2AA4               	goto	l16041
  3488                           
  3489                           ;LED.c: 166: {
  3490                           ;LED.c: 167: if(RunEventLED.EmEvent == 14)
  3491  0290  0844               	movf	_RunEventLED+3,w
  3492  0291  3A0E               	xorlw	14
  3493  0292  1D03               	skipz
  3494  0293  2A9C               	goto	l16035
  3495                           
  3496                           ;LED.c: 168: {
  3497                           ;LED.c: 169: SetShowLED(0x07);
  3498  0294  3007               	movlw	7
  3499                           
  3500                           ;LED.c: 170: ShowSegmentLED(0x0E);
  3501  0295  300E               	movlw	14
  3502  0296  2319  118A         	fcall	_ShowSegmentLED
  3503                           
  3504                           ;LED.c: 171: SetShowBatLxLED(0xFF);
  3505  0298  30FF               	movlw	255
  3506  0299  2381  118A         	fcall	_SetShowBatLxLED
  3507                           
  3508                           ;LED.c: 172: }
  3509  029B  2AEE               	goto	l16067
  3510  029C                     l16035:	
  3511                           
  3512                           ;LED.c: 173: else
  3513                           ;LED.c: 174: {
  3514                           ;LED.c: 175: SetShowLED(0x00);
  3515  029C  3000               	movlw	0
  3516                           
  3517                           ;LED.c: 176: ShowSegmentLED(0x00);
  3518  029D  3000               	movlw	0
  3519  029E  2319  118A         	fcall	_ShowSegmentLED
  3520                           
  3521                           ;LED.c: 177: SetShowBatLxLED(0x00);
  3522  02A0  3000               	movlw	0
  3523  02A1  2381  118A         	fcall	_SetShowBatLxLED
  3524  02A3  2AEE               	goto	l16067
  3525  02A4                     l16041:	
  3526                           
  3527                           ;LED.c: 180: else
  3528                           ;LED.c: 181: {
  3529                           ;LED.c: 182: SetShowLED(0x07);
  3530  02A4  3007               	movlw	7
  3531                           
  3532                           ;LED.c: 183: ShowSegmentLED(0x0E);
  3533  02A5  300E               	movlw	14
  3534  02A6  2319  118A         	fcall	_ShowSegmentLED
  3535                           
  3536                           ;LED.c: 184: SetShowBatLxLED(0xFF);
  3537  02A8  30FF               	movlw	255
  3538  02A9  2381  118A         	fcall	_SetShowBatLxLED
  3539  02AB  2AEE               	goto	l16067
  3540  02AC                     l6635:	
  3541                           
  3542                           ;LED.c: 188: case 12:
  3543                           ;LED.c: 189: case 11:
  3544                           ;LED.c: 190: if((RunEventLED.FlashTimes&0x01) != 0)
  3545  02AC  1C42               	btfss	_RunEventLED+1,0
  3546  02AD  2AB0               	goto	l16049
  3547                           
  3548                           ;LED.c: 191: {
  3549                           ;LED.c: 192: SetShowLED(0x00);
  3550  02AE  3000               	movlw	0
  3551                           
  3552                           ;LED.c: 193: }
  3553  02AF  2AEE               	goto	l16067
  3554  02B0                     l16049:	
  3555                           
  3556                           ;LED.c: 194: else
  3557                           ;LED.c: 195: {
  3558                           ;LED.c: 196: SetShowLED(GetADC.Vout_Lx);
  3559  02B0  0831               	movf	_GetADC+3,w
  3560  02B1  2AEE               	goto	l16067
  3561  02B2                     l16051:	
  3562                           
  3563                           ;LED.c: 200: SetShowLED(GetADC.Vout_Lx);
  3564  02B2  0831               	movf	_GetADC+3,w
  3565                           
  3566                           ;LED.c: 201: ShowSegmentLED(0x0E);
  3567  02B3  300E               	movlw	14
  3568  02B4  2319  118A         	fcall	_ShowSegmentLED
  3569                           
  3570                           ;LED.c: 202: SetShowBatLxLED(0xFF);
  3571  02B6  30FF               	movlw	255
  3572  02B7  2381  118A         	fcall	_SetShowBatLxLED
  3573                           
  3574                           ;LED.c: 203: break;
  3575  02B9  2AEE               	goto	l16067
  3576  02BA                     l16057:	
  3577                           
  3578                           ;LED.c: 205: ShowSegmentLED(0x0E);
  3579  02BA  300E               	movlw	14
  3580  02BB  2319  118A         	fcall	_ShowSegmentLED
  3581                           
  3582                           ;LED.c: 206: break;
  3583  02BD  2AEE               	goto	l16067
  3584  02BE                     l16059:	
  3585                           
  3586                           ;LED.c: 208: ShowSegmentLED(0x0D);
  3587  02BE  300D               	movlw	13
  3588  02BF  2319  118A         	fcall	_ShowSegmentLED
  3589                           
  3590                           ;LED.c: 209: SetShowBatLxLED(0xFF);
  3591  02C1  30FF               	movlw	255
  3592  02C2  2381  118A         	fcall	_SetShowBatLxLED
  3593                           
  3594                           ;LED.c: 210: break;
  3595  02C4  2AEE               	goto	l16067
  3596  02C5                     l16065:	
  3597  02C5  0844               	movf	_RunEventLED+3,w
  3598                           
  3599                           ; Switch size 1, requested type "space"
  3600                           ; Number of cases is 13, Range of values is 1 to 17
  3601                           ; switch strategies available:
  3602                           ; Name         Instructions Cycles
  3603                           ; simple_byte           40    21 (average)
  3604                           ; direct_byte           44    10 (fixed)
  3605                           ; jumptable            263     9 (fixed)
  3606                           ;	Chosen strategy is simple_byte
  3607  02C6  3A01               	xorlw	1	; case 1
  3608  02C7  1903               	skipnz
  3609  02C8  2A67               	goto	l15999
  3610  02C9  3A05               	xorlw	5	; case 4
  3611  02CA  1903               	skipnz
  3612  02CB  2A6B               	goto	l16001
  3613  02CC  3A01               	xorlw	1	; case 5
  3614  02CD  1903               	skipnz
  3615  02CE  2ABE               	goto	l16059
  3616  02CF  3A03               	xorlw	3	; case 6
  3617  02D0  1903               	skipnz
  3618  02D1  2ABA               	goto	l16057
  3619  02D2  3A01               	xorlw	1	; case 7
  3620  02D3  1903               	skipnz
  3621  02D4  2A78               	goto	l6621
  3622  02D5  3A0D               	xorlw	13	; case 10
  3623  02D6  1903               	skipnz
  3624  02D7  2AAC               	goto	l6635
  3625  02D8  3A01               	xorlw	1	; case 11
  3626  02D9  1903               	skipnz
  3627  02DA  2AAC               	goto	l6635
  3628  02DB  3A07               	xorlw	7	; case 12
  3629  02DC  1903               	skipnz
  3630  02DD  2AAC               	goto	l6635
  3631  02DE  3A01               	xorlw	1	; case 13
  3632  02DF  1903               	skipnz
  3633  02E0  2A8E               	goto	l6628
  3634  02E1  3A03               	xorlw	3	; case 14
  3635  02E2  1903               	skipnz
  3636  02E3  2A8E               	goto	l6628
  3637  02E4  3A01               	xorlw	1	; case 15
  3638  02E5  1903               	skipnz
  3639  02E6  2A85               	goto	l6624
  3640  02E7  3A1F               	xorlw	31	; case 16
  3641  02E8  1903               	skipnz
  3642  02E9  2A5B               	goto	l15991
  3643  02EA  3A01               	xorlw	1	; case 17
  3644  02EB  1903               	skipnz
  3645  02EC  2AB2               	goto	l16051
  3646  02ED  2AEE               	goto	l16067
  3647  02EE                     l16067:	
  3648                           
  3649                           ;LED.c: 215: RunEventLED.FlashTimes--;
  3650  02EE  03C2               	decf	_RunEventLED+1,f
  3651                           
  3652                           ;LED.c: 216: }
  3653  02EF  0008               	return
  3654  02F0                     l16069:	
  3655                           
  3656                           ;LED.c: 217: else
  3657                           ;LED.c: 218: {
  3658                           ;LED.c: 219: if(RunEventLED.EmEvent >= 14 || RunEventLED.EmEvent < 7)
  3659  02F0  300E               	movlw	14
  3660  02F1  0244               	subwf	_RunEventLED+3,w
  3661  02F2  1803               	skipnc
  3662  02F3  2AF8               	goto	l16073
  3663  02F4  3007               	movlw	7
  3664  02F5  0244               	subwf	_RunEventLED+3,w
  3665  02F6  1803               	skipnc
  3666  02F7  2AFB               	goto	l16075
  3667  02F8                     l16073:	
  3668                           
  3669                           ;LED.c: 220: {
  3670                           ;LED.c: 221: ShowSegmentLED(0x00);
  3671  02F8  3000               	movlw	0
  3672  02F9  2319  118A         	fcall	_ShowSegmentLED
  3673  02FB                     l16075:	
  3674                           
  3675                           ;LED.c: 222: }
  3676                           ;LED.c: 224: if(RunEventLED.EmEvent == 14 || RunEventLED.EmEvent == 16 || RunEventLED.Em
      +                          Event == 17)
  3677  02FB  0844               	movf	_RunEventLED+3,w
  3678  02FC  3A0E               	xorlw	14
  3679  02FD  1903               	skipnz
  3680  02FE  2B07               	goto	l16081
  3681  02FF  0844               	movf	_RunEventLED+3,w
  3682  0300  3A10               	xorlw	16
  3683  0301  1903               	skipnz
  3684  0302  2B07               	goto	l16081
  3685  0303  0844               	movf	_RunEventLED+3,w
  3686  0304  3A11               	xorlw	17
  3687  0305  1D03               	skipz
  3688  0306  2B0B               	goto	l16083
  3689  0307                     l16081:	
  3690                           
  3691                           ;LED.c: 225: {
  3692                           ;LED.c: 226: SetShowLED(0x00);
  3693  0307  3000               	movlw	0
  3694                           
  3695                           ;LED.c: 227: SetShowBatLxLED(0x00);
  3696  0308  3000               	movlw	0
  3697  0309  2381  118A         	fcall	_SetShowBatLxLED
  3698  030B                     l16083:	
  3699                           
  3700                           ;LED.c: 228: }
  3701                           ;LED.c: 230: if(RunEventLED.EmEvent == 1 || RunEventLED.EmEvent == 5)
  3702  030B  0344               	decf	_RunEventLED+3,w
  3703  030C  1903               	skipnz
  3704  030D  2B12               	goto	l6651
  3705  030E  0844               	movf	_RunEventLED+3,w
  3706  030F  3A05               	xorlw	5
  3707  0310  1D03               	skipz
  3708  0311  2B17               	goto	l16091
  3709  0312                     l6651:	
  3710  0312  3000               	movlw	0
  3711                           
  3712                           ;LED.c: 231: {
  3713                           ;LED.c: 232: LedsInfoFlag.bits.b3 = 0;
  3714  0313  11AA               	bcf	_LedsInfoFlag,3
  3715                           
  3716                           ;LED.c: 233: RunLED.ShowBatLxCnt = 0x00;
  3717  0314  01A5               	clrf	_RunLED+5
  3718                           
  3719                           ;LED.c: 234: RunLED.TaskBatLx = 0;
  3720  0315  01A6               	clrf	_RunLED+6
  3721                           
  3722                           ;LED.c: 235: SetShowBatLxLED(0x00);
  3723  0316  2381               	fcall	_SetShowBatLxLED
  3724  0317                     l16091:	
  3725                           
  3726                           ;LED.c: 236: }
  3727                           ;LED.c: 238: RunEventLED.EmEvent = 0;
  3728  0317  01C4               	clrf	_RunEventLED+3
  3729  0318  0008               	return
  3730  0319                     __end_of_ShowWarnLED:	
  3731  0319                     __ptext745:	
  3732 ;; =============== function _SetShowBatLxLED ends ============
  3733                           
  3734                           
  3735 ;; *************** function _ShowSegmentLED *****************
  3736 ;; Defined at:
  3737 ;;		line 252 in file "E:\workSpace\git_work\jm\P2\code\LED.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;  ShowEvent       1    wreg     unsigned char 
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;  ShowEvent       1    3[BANK0 ] unsigned char 
  3742 ;;  temp_seg3       1    2[BANK0 ] unsigned char 
  3743 ;;  temp_seg2       1    1[BANK0 ] unsigned char 
  3744 ;;  temp_seg0       1    0[BANK0 ] unsigned char 
  3745 ;; Return value:  Size  Location     Type
  3746 ;;		None               void
  3747 ;; Registers used:
  3748 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3749 ;; Tracked objects:
  3750 ;;		On entry : 60/0
  3751 ;;		On exit  : 60/0
  3752 ;;		Unchanged: FFF9F/0
  3753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  3754 ;;      Params:         0       0       0       0       0       0
  3755 ;;      Locals:         0       4       0       0       0       0
  3756 ;;      Temps:          0       0       0       0       0       0
  3757 ;;      Totals:         0       4       0       0       0       0
  3758 ;;Total ram usage:        4 bytes
  3759 ;; Hardware stack levels used:    1
  3760 ;; Hardware stack levels required when called:    3
  3761 ;; This function calls:
  3762 ;;		Nothing
  3763 ;; This function is called by:
  3764 ;;		_gearSwitch
  3765 ;;		_PortScan
  3766 ;;		_ShowWarnLED
  3767 ;;		_PowerProgress
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770  0319                     _ShowSegmentLED:	
  3771                           
  3772                           ; Regs used in _ShowSegmentLED: [wreg-fsr0h+status,2+status,0]
  3773                           ;ShowSegmentLED@ShowEvent stored from wreg
  3774  0319  00C8               	movwf	ShowSegmentLED@ShowEvent
  3775                           
  3776                           ;LED.c: 253: unsigned char temp_seg0 = 0,temp_seg2 = 0,temp_seg3 = 0;
  3777  031A  01C5               	clrf	ShowSegmentLED@temp_seg0
  3778  031B  01C7               	clrf	ShowSegmentLED@temp_seg3
  3779                           
  3780                           ;LED.c: 255: LedsInfoFlag.bits.b4 = 0;
  3781  031C  122A               	bcf	_LedsInfoFlag,4
  3782                           
  3783                           ;LED.c: 256: switch(ShowEvent)
  3784  031D  2B65               	goto	l15669
  3785  031E                     l6664:	
  3786                           ;LED.c: 293: default:
  3787                           
  3788                           
  3789                           ;LED.c: 294: if((ShowEvent & 0x04) != 0)
  3790  031E  1D48               	btfss	ShowSegmentLED@ShowEvent,2
  3791  031F  2B35               	goto	l6671
  3792                           
  3793                           ;LED.c: 295: {
  3794                           ;LED.c: 296: temp_seg3 = GetADC.BatteryLevel;
  3795  0320  082F               	movf	_GetADC+1,w
  3796  0321  00C7               	movwf	ShowSegmentLED@temp_seg3
  3797                           
  3798                           ;LED.c: 298: if(temp_seg3 >= 100)
  3799  0322  3064               	movlw	100
  3800  0323  0247               	subwf	ShowSegmentLED@temp_seg3,w
  3801  0324  1C03               	skipc
  3802  0325  2B29               	goto	l15641
  3803                           
  3804                           ;LED.c: 299: {
  3805                           ;LED.c: 300: temp_seg0 |= 0x06;
  3806  0326  3006               	movlw	6
  3807  0327  04C5               	iorwf	ShowSegmentLED@temp_seg0,f
  3808                           
  3809                           ;LED.c: 302: }
  3810  0328  2B35               	goto	l6671
  3811  0329                     l15641:	
  3812                           
  3813                           ;LED.c: 303: else
  3814                           ;LED.c: 304: {
  3815                           ;LED.c: 305: for(temp_seg2=0;temp_seg2<10;temp_seg2++)
  3816  0329  01C6               	clrf	ShowSegmentLED@temp_seg2
  3817  032A                     l15647:	
  3818                           
  3819                           ;LED.c: 306: {
  3820                           ;LED.c: 307: if(temp_seg3 < 10) break;
  3821  032A  300A               	movlw	10
  3822  032B  0247               	subwf	ShowSegmentLED@temp_seg3,w
  3823  032C  1C03               	btfss	3,0
  3824  032D  2B35               	goto	l6671
  3825                           
  3826                           ;LED.c: 308: temp_seg3 -= 10;
  3827  032E  300A               	movlw	10
  3828  032F  02C7               	subwf	ShowSegmentLED@temp_seg3,f
  3829  0330  300A               	movlw	10
  3830  0331  0AC6               	incf	ShowSegmentLED@temp_seg2,f
  3831  0332  0246               	subwf	ShowSegmentLED@temp_seg2,w
  3832  0333  1C03               	skipc
  3833  0334  2B2A               	goto	l15647
  3834  0335                     l6671:	
  3835                           
  3836                           ;LED.c: 319: }
  3837                           ;LED.c: 321: if((ShowEvent & 0x08) != 0)
  3838  0335  19C8               	btfsc	ShowSegmentLED@ShowEvent,3
  3839                           
  3840                           ;LED.c: 322: {
  3841                           ;LED.c: 323: temp_seg0 |= 0x01;
  3842  0336  1445               	bsf	ShowSegmentLED@temp_seg0,0
  3843                           
  3844                           ;LED.c: 324: }
  3845                           ;LED.c: 326: if((ShowEvent & 0x01) != 0)
  3846  0337  1848               	btfsc	ShowSegmentLED@ShowEvent,0
  3847                           
  3848                           ;LED.c: 327: {
  3849                           ;LED.c: 328: temp_seg0 |= 0x80;
  3850  0338  17C5               	bsf	ShowSegmentLED@temp_seg0,7
  3851                           
  3852                           ;LED.c: 329: }
  3853                           ;LED.c: 331: if((ShowEvent & 0x02) != 0)
  3854  0339  1CC8               	btfss	ShowSegmentLED@ShowEvent,1
  3855  033A  2B7C               	goto	l15671
  3856                           
  3857                           ;LED.c: 332: {
  3858                           ;LED.c: 333: if(TimeCnt.SmokeTime < (200UL*275)) temp_seg0 |= 0x70;
  3859  033B  3000               	movlw	0
  3860  033C  1703               	bsf	3,6	;RP1=1, select bank2
  3861  033D  0263               	subwf	99,w
  3862  033E  1D03               	skipz
  3863  033F  2B4A               	goto	u3105
  3864  0340  3000               	movlw	0
  3865  0341  0262               	subwf	98,w
  3866  0342  1D03               	skipz
  3867  0343  2B4A               	goto	u3105
  3868  0344  30D6               	movlw	214
  3869  0345  0261               	subwf	97,w
  3870  0346  1D03               	skipz
  3871  0347  2B4A               	goto	u3105
  3872  0348  30D8               	movlw	216
  3873  0349  0260               	subwf	96,w
  3874  034A                     u3105:	
  3875  034A  1803               	skipnc
  3876  034B  2B4E               	goto	l15663
  3877  034C  3070               	movlw	112
  3878  034D  2B5F               	goto	L11
  3879  034E                     l15663:	
  3880                           
  3881                           ;LED.c: 334: else if(TimeCnt.SmokeTime < (200UL*510)) temp_seg0 |= 0x30;
  3882  034E  3000               	movlw	0
  3883  034F  0263               	subwf	99,w
  3884  0350  1D03               	skipz
  3885  0351  2B5C               	goto	u3115
  3886  0352  3001               	movlw	1
  3887  0353  0262               	subwf	98,w
  3888  0354  1D03               	skipz
  3889  0355  2B5C               	goto	u3115
  3890  0356  308E               	movlw	142
  3891  0357  0261               	subwf	97,w
  3892  0358  1D03               	skipz
  3893  0359  2B5C               	goto	u3115
  3894  035A  3070               	movlw	112
  3895  035B  0260               	subwf	96,w
  3896  035C                     u3115:	
  3897  035C  1803               	skipnc
  3898  035D  2B62               	goto	l6677
  3899  035E  3030               	movlw	48
  3900  035F                     L11:	
  3901  035F  1303               	bcf	3,6	;RP1=0, select bank0
  3902  0360  04C5               	iorwf	ShowSegmentLED@temp_seg0,f
  3903  0361  2B7C               	goto	l15671
  3904  0362                     l6677:	
  3905                           
  3906                           ;LED.c: 335: else temp_seg0 |= 0x10;
  3907  0362  1303               	bcf	3,6	;RP1=0, select bank0
  3908  0363  1645               	bsf	ShowSegmentLED@temp_seg0,4
  3909  0364  2B7C               	goto	l15671
  3910  0365                     l15669:	
  3911  0365  0848               	movf	ShowSegmentLED@ShowEvent,w
  3912                           
  3913                           ; Switch size 1, requested type "space"
  3914                           ; Number of cases is 7, Range of values is 0 to 255
  3915                           ; switch strategies available:
  3916                           ; Name         Instructions Cycles
  3917                           ; simple_byte           22    12 (average)
  3918                           ; jumptable            260     6 (fixed)
  3919                           ; rangetable           260     6 (fixed)
  3920                           ; spacedrange          518     9 (fixed)
  3921                           ; locatedrange         256     3 (fixed)
  3922                           ;	Chosen strategy is simple_byte
  3923  0366  3A00               	xorlw	0	; case 0
  3924  0367  1903               	skipnz
  3925  0368  2B7C               	goto	l15671
  3926  0369  3A0F               	xorlw	15	; case 15
  3927  036A  1903               	skipnz
  3928  036B  2B7C               	goto	l15671
  3929  036C  3A1F               	xorlw	31	; case 16
  3930  036D  1903               	skipnz
  3931  036E  2B7C               	goto	l15671
  3932  036F  3A50               	xorlw	80	; case 64
  3933  0370  1903               	skipnz
  3934  0371  2B7C               	goto	l15671
  3935  0372  3AC0               	xorlw	192	; case 128
  3936  0373  1903               	skipnz
  3937  0374  2B7C               	goto	l15671
  3938  0375  3A40               	xorlw	64	; case 192
  3939  0376  1903               	skipnz
  3940  0377  2B7C               	goto	l15671
  3941  0378  3A3F               	xorlw	63	; case 255
  3942  0379  1903               	skipnz
  3943  037A  2B7C               	goto	l15671
  3944  037B  2B1E               	goto	l6664
  3945  037C                     l15671:	
  3946                           
  3947                           ;LED.c: 341: RunLED.DisplayCnt = 0;
  3948  037C  01A3               	clrf	_RunLED+3
  3949                           
  3950                           ;LED.c: 342: LedsInfoFlag.bits.b5 = 0;
  3951  037D  12AA               	bcf	_LedsInfoFlag,5
  3952                           
  3953                           ;LED.c: 343: LedsInfoFlag.bits.b4 = 1;
  3954  037E  162A               	bsf	_LedsInfoFlag,4
  3955  037F  0008               	return
  3956  0380                     __end_of_ShowSegmentLED:	
  3957  0380                     __ptext746:	
  3958 ;; =============== function _ShowSegmentLED ends ============
  3959                           
  3960                           
  3961 ;; *************** function _SetShowLED *****************
  3962 ;; Defined at:
  3963 ;;		line 46 in file "E:\workSpace\git_work\jm\P2\code\LED.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  LED_color       1    wreg     unsigned char 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;		None
  3968 ;; Return value:  Size  Location     Type
  3969 ;;		None               void
  3970 ;; Registers used:
  3971 ;;		wreg
  3972 ;; Tracked objects:
  3973 ;;		On entry : 60/0
  3974 ;;		On exit  : 60/0
  3975 ;;		Unchanged: FFFFFF9F/0
  3976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  3977 ;;      Params:         0       0       0       0       0       0
  3978 ;;      Locals:         0       0       0       0       0       0
  3979 ;;      Temps:          0       0       0       0       0       0
  3980 ;;      Totals:         0       0       0       0       0       0
  3981 ;;Total ram usage:        0 bytes
  3982 ;; Hardware stack levels used:    1
  3983 ;; Hardware stack levels required when called:    3
  3984 ;; This function calls:
  3985 ;;		Nothing
  3986 ;; This function is called by:
  3987 ;;		_gearSwitch
  3988 ;;		_PortScan
  3989 ;;		_ShowWarnLED
  3990 ;;		_PowerProgress
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993  0380                     _SetShowLED:	
  3994                           
  3995                           ; Regs used in _SetShowLED: [wreg]
  3996  0380  0008               	return
  3997  0381                     __end_of_SetShowLED:	
  3998  0381                     __ptext744:	
  3999 ;; =============== function ___lmul ends ============
  4000                           
  4001                           
  4002 ;; *************** function _SetShowBatLxLED *****************
  4003 ;; Defined at:
  4004 ;;		line 78 in file "E:\workSpace\git_work\jm\P2\code\LED.c"
  4005 ;; Parameters:    Size  Location     Type
  4006 ;;  ShowBatLx       1    wreg     unsigned char 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  ShowBatLx       1    0[BANK0 ] unsigned char 
  4009 ;; Return value:  Size  Location     Type
  4010 ;;		None               void
  4011 ;; Registers used:
  4012 ;;		wreg
  4013 ;; Tracked objects:
  4014 ;;		On entry : 60/0
  4015 ;;		On exit  : 60/0
  4016 ;;		Unchanged: FFF9F/0
  4017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  4018 ;;      Params:         0       0       0       0       0       0
  4019 ;;      Locals:         0       1       0       0       0       0
  4020 ;;      Temps:          0       0       0       0       0       0
  4021 ;;      Totals:         0       1       0       0       0       0
  4022 ;;Total ram usage:        1 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; Hardware stack levels required when called:    3
  4025 ;; This function calls:
  4026 ;;		Nothing
  4027 ;; This function is called by:
  4028 ;;		_gearSwitch
  4029 ;;		_PortScan
  4030 ;;		_ReadChargerState
  4031 ;;		_ShowWarnLED
  4032 ;;		_PowerProgress
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035  0381                     _SetShowBatLxLED:	
  4036  0381                     l15677:	
  4037                           ; Regs used in _SetShowBatLxLED: [wreg]
  4038                           
  4039                           
  4040                           ;LED.c: 80: Com4SegLED.FlagByte = ShowBatLx;
  4041  0381  122A               	bcf	_LedsInfoFlag,4
  4042                           
  4043                           ;LED.c: 81: LedsInfoFlag.bits.b4 = 1;
  4044  0382  162A               	bsf	_LedsInfoFlag,4
  4045  0383  0008               	return
  4046  0384                     __end_of_SetShowBatLxLED:	
  4047  0384                     __ptext753:	
  4048 ;; =============== function _SetWarnEvent ends ============
  4049                           
  4050                           
  4051 ;; *************** function _SetOffNotifyLED *****************
  4052 ;; Defined at:
  4053 ;;		line 59 in file "E:\workSpace\git_work\jm\P2\code\LED.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;		None
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;		None
  4058 ;; Return value:  Size  Location     Type
  4059 ;;		None               void
  4060 ;; Registers used:
  4061 ;;		wreg, status,2
  4062 ;; Tracked objects:
  4063 ;;		On entry : 60/0
  4064 ;;		On exit  : 60/0
  4065 ;;		Unchanged: FFF9F/0
  4066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  4067 ;;      Params:         0       0       0       0       0       0
  4068 ;;      Locals:         0       0       0       0       0       0
  4069 ;;      Temps:          0       0       0       0       0       0
  4070 ;;      Totals:         0       0       0       0       0       0
  4071 ;;Total ram usage:        0 bytes
  4072 ;; Hardware stack levels used:    1
  4073 ;; Hardware stack levels required when called:    3
  4074 ;; This function calls:
  4075 ;;		Nothing
  4076 ;; This function is called by:
  4077 ;;		_main
  4078 ;;		_gearSwitch
  4079 ;;		_PortScan
  4080 ;;		_PowerProgress
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083  0384                     _SetOffNotifyLED:	
  4084  0384  3064               	movlw	100
  4085                           
  4086                           ;LED.c: 60: LedsInfoFlag.bits.b0 = 0;
  4087                           
  4088                           ; Regs used in _SetOffNotifyLED: [wreg+status,2]
  4089  0385  102A               	bcf	_LedsInfoFlag,0
  4090                           
  4091                           ;LED.c: 61: LedsInfoFlag.bits.b6 = 0;
  4092  0386  132A               	bcf	_LedsInfoFlag,6
  4093                           
  4094                           ;LED.c: 62: LedsInfoFlag.bits.b7 = 0;
  4095  0387  13AA               	bcf	_LedsInfoFlag,7
  4096                           
  4097                           ;LED.c: 63: LedsInfoFlag.bits.b2 = 0;
  4098  0388  112A               	bcf	_LedsInfoFlag,2
  4099                           
  4100                           ;LED.c: 64: LedsInfoFlag.bits.b1 = 1;
  4101  0389  14AA               	bsf	_LedsInfoFlag,1
  4102                           
  4103                           ;LED.c: 65: RunLED.NotifyLedCycle = 100;
  4104  038A  00A2               	movwf	_RunLED+2
  4105                           
  4106                           ;LED.c: 66: RunLED.NotifyLedDuty = 0;
  4107  038B  01A1               	clrf	_RunLED+1
  4108  038C  0008               	return
  4109  038D                     __end_of_SetOffNotifyLED:	
  4110  038D                     __ptext752:	
  4111 ;; =============== function _ClearAllRAM ends ============
  4112                           
  4113                           
  4114 ;; *************** function _SetWarnEvent *****************
  4115 ;; Defined at:
  4116 ;;		line 96 in file "E:\workSpace\git_work\jm\P2\code\LED.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  EmRunEvent      1    wreg     PTR struct .
  4119 ;;		 -> RunEventLED(4), 
  4120 ;;  WarnEvent       1    0[BANK0 ] unsigned char 
  4121 ;;  WarnShowTime    1    1[BANK0 ] unsigned char 
  4122 ;;  WarnShowCnt     1    2[BANK0 ] unsigned char 
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;  EmRunEvent      1    3[BANK0 ] PTR struct .
  4125 ;;		 -> RunEventLED(4), 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;		None               void
  4128 ;; Registers used:
  4129 ;;		wreg, fsr0l, fsr0h
  4130 ;; Tracked objects:
  4131 ;;		On entry : 60/0
  4132 ;;		On exit  : 160/0
  4133 ;;		Unchanged: FFE9F/0
  4134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  4135 ;;      Params:         0       3       0       0       0       0
  4136 ;;      Locals:         0       1       0       0       0       0
  4137 ;;      Temps:          0       0       0       0       0       0
  4138 ;;      Totals:         0       4       0       0       0       0
  4139 ;;Total ram usage:        4 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:    3
  4142 ;; This function calls:
  4143 ;;		Nothing
  4144 ;; This function is called by:
  4145 ;;		_main
  4146 ;;		_gearSwitch
  4147 ;;		_PortScan
  4148 ;;		_ReadChargerState
  4149 ;;		_PowerProgress
  4150 ;;		_PlugProgress
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153  038D                     _SetWarnEvent:	
  4154                           
  4155                           ; Regs used in _SetWarnEvent: [wregfsr0]
  4156                           ;SetWarnEvent@EmRunEvent stored from wreg
  4157  038D  00C8               	movwf	SetWarnEvent@EmRunEvent
  4158                           
  4159                           ;LED.c: 97: EmRunEvent->EmEvent = WarnEvent;
  4160  038E  3E03               	addlw	3
  4161  038F  0084               	movwf	4
  4162  0390  0845               	movf	SetWarnEvent@WarnEvent,w
  4163  0391  1383               	bcf	3,7	;select IRP bank0
  4164  0392  0080               	movwf	0
  4165                           
  4166                           ;LED.c: 98: EmRunEvent->FlashTimes = WarnShowCnt;
  4167  0393  0848               	movf	SetWarnEvent@EmRunEvent,w
  4168  0394  3E01               	addlw	1
  4169  0395  0084               	movwf	4
  4170  0396  0847               	movf	SetWarnEvent@WarnShowCnt,w
  4171  0397  0080               	movwf	0
  4172                           
  4173                           ;LED.c: 99: EmRunEvent->ShowTime = WarnShowTime;
  4174  0398  0848               	movf	SetWarnEvent@EmRunEvent,w
  4175  0399  0084               	movwf	4
  4176  039A  0846               	movf	SetWarnEvent@WarnShowTime,w
  4177  039B  0080               	movwf	0
  4178                           
  4179                           ;LED.c: 100: EmRunEvent->ShowTask = WarnShowTime;
  4180  039C  0848               	movf	SetWarnEvent@EmRunEvent,w
  4181  039D  3E02               	addlw	2
  4182  039E  0084               	movwf	4
  4183  039F  0846               	movf	SetWarnEvent@WarnShowTime,w
  4184  03A0  0080               	movwf	0
  4185  03A1  0008               	return
  4186  03A2                     __end_of_SetWarnEvent:	
  4187  03A2                     __ptext754:	
  4188 ;; =============== function _SetOffNotifyLED ends ============
  4189                           
  4190                           
  4191 ;; *************** function _KeyUpStopSmoke *****************
  4192 ;; Defined at:
  4193 ;;		line 192 in file "E:\workSpace\git_work\jm\P2\code\key.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;		None               void
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0
  4202 ;; Tracked objects:
  4203 ;;		On entry : 40/0
  4204 ;;		On exit  : 60/0
  4205 ;;		Unchanged: FFF9F/0
  4206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  4207 ;;      Params:         0       0       0       0       0       0
  4208 ;;      Locals:         0       0       0       0       0       0
  4209 ;;      Temps:          0       0       0       0       0       0
  4210 ;;      Totals:         0       0       0       0       0       0
  4211 ;;Total ram usage:        0 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    3
  4214 ;; This function calls:
  4215 ;;		Nothing
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;;		_PortScan
  4219 ;;		_PowerProgress
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222  03A2                     _KeyUpStopSmoke:	
  4223                           
  4224                           ;key.c: 193: if(VoutInfoFlag.bits.b7 != 0)
  4225                           
  4226                           ; Regs used in _KeyUpStopSmoke: [wreg+status,2+status,0]
  4227  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  4228  03A3  1FAC               	btfss	_VoutInfoFlag,7
  4229  03A4  0008               	return
  4230                           
  4231                           ;key.c: 194: {
  4232                           ;key.c: 195: VoutInfoFlag.bits.b7 = 0;
  4233  03A5  13AC               	bcf	_VoutInfoFlag,7
  4234                           
  4235                           ;key.c: 196: LVDIE = 0;
  4236  03A6  100D               	bcf	13,0
  4237                           
  4238                           ;key.c: 197: VoutInfoFlag.bits.b6 = 0;
  4239  03A7  132C               	bcf	_VoutInfoFlag,6
  4240                           
  4241                           ;key.c: 198: PAD4 = 1;
  4242  03A8  1605               	bsf	5,4
  4243                           
  4244                           ;key.c: 199: FlagSmoke = 0x0000;
  4245  03A9  1703               	bsf	3,6	;RP1=1, select bank2
  4246  03AA  01E4               	clrf	100	;volatile
  4247  03AB  01E5               	clrf	101	;volatile
  4248                           
  4249                           ;key.c: 200: ReadPort.KeyState &= 0x4F;
  4250  03AC  304F               	movlw	79
  4251  03AD  1683               	bsf	3,5	;RP0=1, select bank1
  4252  03AE  1303               	bcf	3,6	;RP1=0, select bank1
  4253  03AF  05A4               	andwf	(_ReadPort^(0+128)+4),f
  4254                           
  4255                           ;key.c: 201: PAMOD54 = PAMOD54 & 0x0F | 0x90;
  4256  03B0  0807               	movf	7,w
  4257  03B1  390F               	andlw	15
  4258  03B2  3890               	iorlw	144
  4259  03B3  0087               	movwf	7	;volatile
  4260                           
  4261                           ;key.c: 202: PAD3 = 1;
  4262  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  4263  03B5  3008               	movlw	8
  4264  03B6  1585               	bsf	5,3
  4265                           
  4266                           ;key.c: 203: LedsInfoFlag.bits.b0 = 0;
  4267  03B7  102A               	bcf	_LedsInfoFlag,0
  4268                           
  4269                           ;key.c: 204: LedsInfoFlag.bits.b6 = 0;
  4270  03B8  132A               	bcf	_LedsInfoFlag,6
  4271                           
  4272                           ;key.c: 205: LedsInfoFlag.bits.b1 = 0;
  4273  03B9  10AA               	bcf	_LedsInfoFlag,1
  4274                           
  4275                           ;key.c: 206: LedsInfoFlag.bits.b2 = 1;
  4276  03BA  152A               	bsf	_LedsInfoFlag,2
  4277                           
  4278                           ;key.c: 207: LedsInfoFlag.bits.b7 = 1;
  4279  03BB  17AA               	bsf	_LedsInfoFlag,7
  4280                           
  4281                           ;key.c: 208: LedsInfoFlag.bits.b0 = 1;
  4282  03BC  142A               	bsf	_LedsInfoFlag,0
  4283                           
  4284                           ;key.c: 209: RunEventLED.FlashTimes = 8;
  4285  03BD  00C2               	movwf	_RunEventLED+1
  4286                           
  4287                           ;key.c: 210: RunEventLED.ShowTask = 0;
  4288  03BE  01C3               	clrf	_RunEventLED+2
  4289  03BF  0008               	return
  4290  03C0                     __end_of_KeyUpStopSmoke:	
  4291  03C0                     PL6:	
  4292  03C0  00C5               	movwf	?_SetWarnEvent
  4293  03C1  3019               	movlw	25
  4294  03C2  00C6               	movwf	?_SetWarnEvent+1
  4295  03C3  3004               	movlw	4
  4296  03C4  00C7               	movwf	?_SetWarnEvent+2
  4297  03C5  3441               	retlw	_RunEventLED& (0+255)
  4298  03C6                     PL8:	
  4299  03C6  3000               	movlw	0
  4300  03C7  11AA               	bcf	_LedsInfoFlag,3
  4301  03C8  01A5               	clrf	_RunLED+5
  4302  03C9  01A6               	clrf	_RunLED+6
  4303  03CA  0008               	return
  4304  03CB                     __ptext739:	
  4305 ;; =============== function _PlugProgress ends ============
  4306                           
  4307                           
  4308 ;; *************** function _ReadChargerState *****************
  4309 ;; Defined at:
  4310 ;;		line 224 in file "E:\workSpace\git_work\jm\P2\code\key.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;		None
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;		None
  4315 ;; Return value:  Size  Location     Type
  4316 ;;		None               void
  4317 ;; Registers used:
  4318 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 60/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: FFE9F/0
  4323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  4324 ;;      Params:         0       0       0       0       0       0
  4325 ;;      Locals:         0       0       0       0       0       0
  4326 ;;      Temps:          0       0       0       0       0       0
  4327 ;;      Totals:         0       0       0       0       0       0
  4328 ;;Total ram usage:        0 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    4
  4331 ;; This function calls:
  4332 ;;		_SetWarnEvent
  4333 ;;		_SetShowBatLxLED
  4334 ;; This function is called by:
  4335 ;;		_main
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338  03CB                     _ReadChargerState:	
  4339                           
  4340                           ;key.c: 225: if(SysInfoFlag.bits.b2 != 0)
  4341                           
  4342                           ; Regs used in _ReadChargerState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4343  03CB  1D2B               	btfss	_SysInfoFlag,2
  4344  03CC  2BF5               	goto	l4974
  4345                           
  4346                           ;key.c: 226: {
  4347                           ;key.c: 227: if(PAD6 == 0)
  4348  03CD  1B05               	btfsc	5,6
  4349  03CE  2BF2               	goto	l15913
  4350                           
  4351                           ;key.c: 228: {
  4352                           ;key.c: 229: ReadPort.ChargerCnt++;
  4353  03CF  1683               	bsf	3,5	;RP0=1, select bank1
  4354  03D0  3003               	movlw	3
  4355  03D1  0AA0               	incf	_ReadPort^(0+128),f
  4356                           
  4357                           ;key.c: 230: if(ReadPort.ChargerCnt >= 3)
  4358  03D2  0220               	subwf	_ReadPort^(0+128),w
  4359  03D3  1C03               	skipc
  4360  03D4  0008               	return
  4361                           
  4362                           ;key.c: 231: {
  4363                           ;key.c: 232: SysInfoFlag.bits.b2 = 0;
  4364  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  4365  03D6  112B               	bcf	_SysInfoFlag,2
  4366                           
  4367                           ;key.c: 233: SysInfoFlag.bits.b3 = 0;
  4368  03D7  11AB               	bcf	_SysInfoFlag,3
  4369                           
  4370                           ;key.c: 234: ReadPort.ChargerCnt = 0;
  4371  03D8  1683               	bsf	3,5	;RP0=1, select bank1
  4372  03D9  01A0               	clrf	_ReadPort^(0+128)
  4373                           
  4374                           ;key.c: 235: TimeCnt.SleepTime = 0;
  4375  03DA  1283               	bcf	3,5	;RP0=0, select bank2
  4376  03DB  3004               	movlw	4
  4377  03DC  1703               	bsf	3,6	;RP1=1, select bank2
  4378  03DD  01DC               	clrf	92
  4379  03DE  01DD               	clrf	93
  4380                           
  4381                           ;key.c: 237: if(RunEventLED.EmEvent >= 4 || RunEventLED.EmEvent < 7)
  4382  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  4383  03E0  0244               	subwf	_RunEventLED+3,w
  4384  03E1  1803               	skipnc
  4385  03E2  2BE7               	goto	l15901
  4386  03E3  3007               	movlw	7
  4387  03E4  0244               	subwf	_RunEventLED+3,w
  4388  03E5  1803               	skipnc
  4389  03E6  0008               	return
  4390  03E7                     l15901:	
  4391                           
  4392                           ;key.c: 238: {
  4393                           ;key.c: 239: SetWarnEvent(&RunEventLED,6,25,8);
  4394  03E7  3006               	movlw	6
  4395  03E8  2407  118A         	fcall	PL4	;call to abstracted procedure
  4396  03EA  238D  118A         	fcall	_SetWarnEvent
  4397  03EC  3000               	movlw	0
  4398                           
  4399                           ;key.c: 241: RunEventLED.ShowTask = 0;
  4400  03ED  01C3               	clrf	_RunEventLED+2
  4401                           
  4402                           ;key.c: 242: LedsInfoFlag.bits.b3 = 0;
  4403  03EE  11AA               	bcf	_LedsInfoFlag,3
  4404                           
  4405                           ;key.c: 243: RunLED.ShowBatLxCnt = 0x00;
  4406  03EF  01A5               	clrf	_RunLED+5
  4407                           
  4408                           ;key.c: 244: RunLED.TaskBatLx = 0;
  4409  03F0  01A6               	clrf	_RunLED+6
  4410                           
  4411                           ;key.c: 245: SetShowBatLxLED(0x00);
  4412  03F1  2B81               	ljmp	l15677
  4413  03F2                     l15913:	
  4414                           
  4415                           ;key.c: 249: else ReadPort.ChargerCnt = 0;
  4416  03F2  1683               	bsf	3,5	;RP0=1, select bank1
  4417  03F3  01A0               	clrf	_ReadPort^(0+128)
  4418  03F4  0008               	return
  4419  03F5                     l4974:	
  4420                           ;key.c: 250: }
  4421                           
  4422                           
  4423                           ;key.c: 251: else
  4424                           ;key.c: 252: {
  4425                           ;key.c: 253: if(PAD6 == 1)
  4426  03F5  1F05               	btfss	5,6
  4427  03F6  2BF2               	goto	l15913
  4428                           
  4429                           ;key.c: 254: {
  4430                           ;key.c: 255: ReadPort.ChargerCnt++;
  4431  03F7  1683               	bsf	3,5	;RP0=1, select bank1
  4432  03F8  3003               	movlw	3
  4433  03F9  0AA0               	incf	_ReadPort^(0+128),f
  4434                           
  4435                           ;key.c: 256: if(ReadPort.ChargerCnt >= 3)
  4436  03FA  0220               	subwf	_ReadPort^(0+128),w
  4437  03FB  1C03               	skipc
  4438  03FC  0008               	return
  4439                           
  4440                           ;key.c: 257: {
  4441                           ;key.c: 258: SysInfoFlag.bits.b2 = 1;
  4442  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  4443  03FE  152B               	bsf	_SysInfoFlag,2
  4444                           
  4445                           ;key.c: 259: SysInfoFlag.bits.b3 = 0;
  4446  03FF  11AB               	bcf	_SysInfoFlag,3
  4447                           
  4448                           ;key.c: 260: ReadPort.ChargerCnt = 0;
  4449  0400  1683               	bsf	3,5	;RP0=1, select bank1
  4450  0401  01A0               	clrf	_ReadPort^(0+128)
  4451                           
  4452                           ;key.c: 261: TimeCnt.RechgFullTime = 0;
  4453  0402  1283               	bcf	3,5	;RP0=0, select bank2
  4454  0403  1703               	bsf	3,6	;RP1=1, select bank2
  4455  0404  01DA               	clrf	90
  4456  0405  01DB               	clrf	91
  4457  0406  0008               	return
  4458  0407                     __end_of_ReadChargerState:	
  4459  0407                     PL4:	
  4460  0407  00C5               	movwf	?_SetWarnEvent
  4461  0408  3019               	movlw	25
  4462  0409  00C6               	movwf	?_SetWarnEvent+1
  4463  040A  3008               	movlw	8
  4464  040B  00C7               	movwf	?_SetWarnEvent+2
  4465  040C  3441               	retlw	_RunEventLED& (0+255)
  4466                           
  4467                           	psect	text735
  4468  0EBA                     __ptext735:	
  4469 ;; =============== function _EnterSleep ends ============
  4470                           
  4471                           
  4472 ;; *************** function _ReadLoadRes *****************
  4473 ;; Defined at:
  4474 ;;		line 245 in file "E:\workSpace\git_work\jm\P2\code\modular.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;		None
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;  LoadValue       2   29[BANK0 ] unsigned int 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;                  2   25[BANK0 ] unsigned int 
  4481 ;; Registers used:
  4482 ;;		wreg, status,2, status,0, pclath, cstack
  4483 ;; Tracked objects:
  4484 ;;		On entry : 60/0
  4485 ;;		On exit  : 60/0
  4486 ;;		Unchanged: FFF9F/0
  4487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  4488 ;;      Params:         0       2       0       0       0       0
  4489 ;;      Locals:         0       2       0       0       0       0
  4490 ;;      Temps:          0       2       0       0       0       0
  4491 ;;      Totals:         0       6       0       0       0       0
  4492 ;;Total ram usage:        6 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    4
  4495 ;; This function calls:
  4496 ;;		_HAL_ADC_Sample
  4497 ;;		___lmul
  4498 ;;		___lldiv
  4499 ;; This function is called by:
  4500 ;;		_PowerProgress
  4501 ;; This function uses a non-reentrant model
  4502 ;;
  4503  0EBA                     _ReadLoadRes:	
  4504                           
  4505                           ;modular.c: 248: PAMOD54 = PAMOD54 & 0x0F | 0x30;
  4506                           
  4507                           ; Regs used in _ReadLoadRes: [wreg+status,2+status,0+pclath+cstack]
  4508  0EBA  1683               	bsf	3,5	;RP0=1, select bank1
  4509  0EBB  0807               	movf	7,w
  4510  0EBC  390F               	andlw	15
  4511  0EBD  3830               	iorlw	48
  4512  0EBE  0087               	movwf	7	;volatile
  4513                           
  4514                           ;modular.c: 249: PAD3 = 0;
  4515  0EBF  1283               	bcf	3,5	;RP0=0, select bank0
  4516  0EC0  3003               	movlw	3
  4517  0EC1  1185               	bcf	5,3
  4518  0EC2  01C5               	clrf	?_HAL_ADC_Sample
  4519  0EC3  0AC5               	incf	?_HAL_ADC_Sample,f
  4520  0EC4  2719  158A         	fcall	_HAL_ADC_Sample
  4521  0EC6  3003               	movlw	3
  4522                           
  4523                           ;modular.c: 251: LoadValue = HAL_ADC_Sample(3,1);
  4524  0EC7  01C5               	clrf	?_HAL_ADC_Sample
  4525  0EC8  0AC5               	incf	?_HAL_ADC_Sample,f
  4526  0EC9  2719  158A         	fcall	_HAL_ADC_Sample
  4527  0ECB  0846               	movf	?_HAL_ADC_Sample+1,w
  4528  0ECC  00E3               	movwf	ReadLoadRes@LoadValue+1
  4529  0ECD  0845               	movf	?_HAL_ADC_Sample,w
  4530  0ECE  00E2               	movwf	ReadLoadRes@LoadValue
  4531                           
  4532                           ;modular.c: 252: PAD3 = 1;
  4533  0ECF  1585               	bsf	5,3
  4534                           
  4535                           ;modular.c: 253: PAMOD54 = PAMOD54 & 0x0F | 0x90;
  4536  0ED0  1683               	bsf	3,5	;RP0=1, select bank1
  4537  0ED1  0807               	movf	7,w
  4538  0ED2  390F               	andlw	15
  4539  0ED3  3890               	iorlw	144
  4540  0ED4  0087               	movwf	7	;volatile
  4541                           
  4542                           ;modular.c: 254: PAD3 = 1;
  4543  0ED5  1283               	bcf	3,5	;RP0=0, select bank0
  4544  0ED6  300F               	movlw	15
  4545  0ED7  1585               	bsf	5,3
  4546                           
  4547                           ;modular.c: 256: if(LoadValue >= 4090) LoadValue = 0xFFFF;
  4548  0ED8  0263               	subwf	ReadLoadRes@LoadValue+1,w
  4549  0ED9  30FA               	movlw	250
  4550  0EDA  1903               	skipnz
  4551  0EDB  0262               	subwf	ReadLoadRes@LoadValue,w
  4552  0EDC  1C03               	skipc
  4553  0EDD  2EE2               	goto	l16147
  4554  0EDE  30FF               	movlw	255
  4555  0EDF  00E2               	movwf	ReadLoadRes@LoadValue
  4556  0EE0  00E3               	movwf	ReadLoadRes@LoadValue+1
  4557  0EE1  2F14               	goto	l16153
  4558  0EE2                     l16147:	
  4559                           
  4560                           ;modular.c: 257: else if(LoadValue < 30) LoadValue = 0;
  4561  0EE2  3000               	movlw	0
  4562  0EE3  0263               	subwf	ReadLoadRes@LoadValue+1,w
  4563  0EE4  301E               	movlw	30
  4564  0EE5  1903               	skipnz
  4565  0EE6  0262               	subwf	ReadLoadRes@LoadValue,w
  4566  0EE7  1803               	skipnc
  4567  0EE8  2EEC               	goto	l16151
  4568  0EE9  01E2               	clrf	ReadLoadRes@LoadValue
  4569  0EEA  01E3               	clrf	ReadLoadRes@LoadValue+1
  4570  0EEB  2F14               	goto	l16153
  4571  0EEC                     l16151:	
  4572                           
  4573                           ;modular.c: 258: else LoadValue = ((unsigned long)LoadValue*4700)/(4096-LoadValue);
  4574  0EEC  3010               	movlw	16
  4575  0EED  01E0               	clrf	??_ReadLoadRes
  4576  0EEE  00E1               	movwf	??_ReadLoadRes+1
  4577  0EEF  0862               	movf	ReadLoadRes@LoadValue,w
  4578  0EF0  0260               	subwf	??_ReadLoadRes,w
  4579  0EF1  00D1               	movwf	?___lldiv
  4580  0EF2  0863               	movf	ReadLoadRes@LoadValue+1,w
  4581  0EF3  1C03               	skipc
  4582  0EF4  0A63               	incf	ReadLoadRes@LoadValue+1,w
  4583  0EF5  0261               	subwf	??_ReadLoadRes+1,w
  4584  0EF6  00D2               	movwf	?___lldiv+1
  4585  0EF7  01D3               	clrf	?___lldiv+2
  4586  0EF8  01D4               	clrf	?___lldiv+3
  4587  0EF9  0862               	movf	ReadLoadRes@LoadValue,w
  4588  0EFA  00C5               	movwf	?___lmul
  4589  0EFB  0863               	movf	ReadLoadRes@LoadValue+1,w
  4590  0EFC  00C6               	movwf	?___lmul+1
  4591  0EFD  3012               	movlw	18
  4592  0EFE  01C7               	clrf	?___lmul+2
  4593  0EFF  01C8               	clrf	?___lmul+3
  4594  0F00  01CC               	clrf	?___lmul+7
  4595  0F01  01CB               	clrf	?___lmul+6
  4596  0F02  00CA               	movwf	?___lmul+5
  4597  0F03  305C               	movlw	92
  4598  0F04  00C9               	movwf	?___lmul+4
  4599  0F05  2783  158A         	fcall	___lmul
  4600  0F07  0848               	movf	?___lmul+3,w
  4601  0F08  00D8               	movwf	?___lldiv+7
  4602  0F09  0847               	movf	?___lmul+2,w
  4603  0F0A  00D7               	movwf	?___lldiv+6
  4604  0F0B  0846               	movf	?___lmul+1,w
  4605  0F0C  00D6               	movwf	?___lldiv+5
  4606  0F0D  0845               	movf	?___lmul,w
  4607  0F0E  00D5               	movwf	?___lldiv+4
  4608  0F0F  27B6               	fcall	___lldiv
  4609  0F10  0852               	movf	?___lldiv+1,w
  4610  0F11  00E3               	movwf	ReadLoadRes@LoadValue+1
  4611  0F12  0851               	movf	?___lldiv,w
  4612  0F13  00E2               	movwf	ReadLoadRes@LoadValue
  4613  0F14                     l16153:	
  4614                           
  4615                           ;modular.c: 260: return LoadValue;
  4616  0F14  0863               	movf	ReadLoadRes@LoadValue+1,w
  4617  0F15  00DF               	movwf	?_ReadLoadRes+1
  4618  0F16  0862               	movf	ReadLoadRes@LoadValue,w
  4619  0F17  00DE               	movwf	?_ReadLoadRes
  4620  0F18  0008               	return
  4621  0F19                     __end_of_ReadLoadRes:	
  4622  0F19                     __ptext750:	
  4623 ;; =============== function _UpdateElectricityGrade ends ============
  4624                           
  4625                           
  4626 ;; *************** function _HAL_ADC_Sample *****************
  4627 ;; Defined at:
  4628 ;;		line 47 in file "E:\workSpace\git_work\jm\P2\code\modular.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;  ADC_CHx         1    wreg     unsigned char 
  4631 ;;  Filter          1    0[BANK0 ] unsigned char 
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  ADC_CHx         1    4[BANK0 ] unsigned char 
  4634 ;;  Value           2   12[BANK0 ] unsigned int 
  4635 ;;  Value_Max       2   10[BANK0 ] unsigned int 
  4636 ;;  Value_Min       2    8[BANK0 ] unsigned int 
  4637 ;;  Value_Sum       2    5[BANK0 ] unsigned int 
  4638 ;;  i_max           1    7[BANK0 ] unsigned char 
  4639 ;; Return value:  Size  Location     Type
  4640 ;;                  2    0[BANK0 ] unsigned int 
  4641 ;; Registers used:
  4642 ;;		wreg, status,2, status,0
  4643 ;; Tracked objects:
  4644 ;;		On entry : 60/0
  4645 ;;		On exit  : 60/0
  4646 ;;		Unchanged: FFF9F/0
  4647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  4648 ;;      Params:         0       2       0       0       0       0
  4649 ;;      Locals:         0      10       0       0       0       0
  4650 ;;      Temps:          0       2       0       0       0       0
  4651 ;;      Totals:         0      14       0       0       0       0
  4652 ;;Total ram usage:       14 bytes
  4653 ;; Hardware stack levels used:    1
  4654 ;; Hardware stack levels required when called:    3
  4655 ;; This function calls:
  4656 ;;		Nothing
  4657 ;; This function is called by:
  4658 ;;		_main
  4659 ;;		_ReadLoadRes
  4660 ;;		_PowerProgress
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663  0F19                     _HAL_ADC_Sample:	
  4664                           
  4665                           ; Regs used in _HAL_ADC_Sample: [wreg+status,2+status,0]
  4666                           ;HAL_ADC_Sample@ADC_CHx stored from wreg
  4667  0F19  00C9               	movwf	HAL_ADC_Sample@ADC_CHx
  4668  0F1A  3010               	movlw	16
  4669  0F1B  01CD               	clrf	HAL_ADC_Sample@Value_Min
  4670  0F1C  00CE               	movwf	HAL_ADC_Sample@Value_Min+1
  4671  0F1D  30E0               	movlw	224
  4672  0F1E  01CF               	clrf	HAL_ADC_Sample@Value_Max
  4673  0F1F  01D0               	clrf	HAL_ADC_Sample@Value_Max+1
  4674  0F20  01CA               	clrf	HAL_ADC_Sample@Value_Sum
  4675  0F21  01CB               	clrf	HAL_ADC_Sample@Value_Sum+1
  4676                           
  4677                           ;modular.c: 49: unsigned char i_max = 0;
  4678  0F22  01CC               	clrf	HAL_ADC_Sample@i_max
  4679                           
  4680                           ;modular.c: 51: ADCTL2 &= 0xE0;
  4681  0F23  0599               	andwf	25,f	;volatile
  4682                           
  4683                           ;modular.c: 52: ADCTL2 |= ADC_CHx;
  4684  0F24  0849               	movf	HAL_ADC_Sample@ADC_CHx,w
  4685  0F25  0499               	iorwf	25,f	;volatile
  4686  0F26                     l15349:	
  4687                           
  4688                           ;modular.c: 55: {
  4689                           ;modular.c: 56: ADST = 1;
  4690  0F26  1598               	bsf	24,3
  4691  0F27                     l8393:	
  4692                           ;modular.c: 57: while(ADST != 0);
  4693                           
  4694  0F27  1998               	btfsc	24,3
  4695  0F28  2F27               	goto	l8393
  4696                           
  4697                           ;modular.c: 58: Value = ADCDH;
  4698  0F29  0817               	movf	23,w	;volatile
  4699  0F2A  00D1               	movwf	HAL_ADC_Sample@Value
  4700  0F2B  30F0               	movlw	240
  4701  0F2C  01D2               	clrf	HAL_ADC_Sample@Value+1
  4702                           
  4703                           ;modular.c: 59: Value <<= 4;
  4704  0F2D  0ED1               	swapf	HAL_ADC_Sample@Value,f
  4705  0F2E  0ED2               	swapf	HAL_ADC_Sample@Value+1,f
  4706  0F2F  05D2               	andwf	HAL_ADC_Sample@Value+1,f
  4707  0F30  0851               	movf	HAL_ADC_Sample@Value,w
  4708  0F31  390F               	andlw	15
  4709  0F32  04D2               	iorwf	HAL_ADC_Sample@Value+1,f
  4710  0F33  30F0               	movlw	240
  4711  0F34  05D1               	andwf	HAL_ADC_Sample@Value,f
  4712                           
  4713                           ;modular.c: 60: Value |= (ADCTL>>4);
  4714  0F35  0E18               	swapf	24,w	;volatile
  4715  0F36  390F               	andlw	15
  4716  0F37  04D1               	iorwf	HAL_ADC_Sample@Value,f
  4717                           
  4718                           ;modular.c: 62: if(Value < Value_Min) Value_Min = Value;
  4719  0F38  084E               	movf	HAL_ADC_Sample@Value_Min+1,w
  4720  0F39  0252               	subwf	HAL_ADC_Sample@Value+1,w
  4721  0F3A  1D03               	skipz
  4722  0F3B  2F3E               	goto	u2375
  4723  0F3C  084D               	movf	HAL_ADC_Sample@Value_Min,w
  4724  0F3D  0251               	subwf	HAL_ADC_Sample@Value,w
  4725  0F3E                     u2375:	
  4726  0F3E  1803               	skipnc
  4727  0F3F  2F44               	goto	l8396
  4728  0F40  0852               	movf	HAL_ADC_Sample@Value+1,w
  4729  0F41  00CE               	movwf	HAL_ADC_Sample@Value_Min+1
  4730  0F42  0851               	movf	HAL_ADC_Sample@Value,w
  4731  0F43  00CD               	movwf	HAL_ADC_Sample@Value_Min
  4732  0F44                     l8396:	
  4733                           
  4734                           ;modular.c: 63: if(Value >= Value_Max) Value_Max = Value;
  4735  0F44  0850               	movf	HAL_ADC_Sample@Value_Max+1,w
  4736  0F45  0252               	subwf	HAL_ADC_Sample@Value+1,w
  4737  0F46  1D03               	skipz
  4738  0F47  2F4A               	goto	u2385
  4739  0F48  084F               	movf	HAL_ADC_Sample@Value_Max,w
  4740  0F49  0251               	subwf	HAL_ADC_Sample@Value,w
  4741  0F4A                     u2385:	
  4742  0F4A  1C03               	skipc
  4743  0F4B  2F50               	goto	l8397
  4744  0F4C  0852               	movf	HAL_ADC_Sample@Value+1,w
  4745  0F4D  00D0               	movwf	HAL_ADC_Sample@Value_Max+1
  4746  0F4E  0851               	movf	HAL_ADC_Sample@Value,w
  4747  0F4F  00CF               	movwf	HAL_ADC_Sample@Value_Max
  4748  0F50                     l8397:	
  4749                           
  4750                           ;modular.c: 64: Value_Sum += Value;
  4751  0F50  0851               	movf	HAL_ADC_Sample@Value,w
  4752  0F51  07CA               	addwf	HAL_ADC_Sample@Value_Sum,f
  4753  0F52  1803               	skipnc
  4754  0F53  0ACB               	incf	HAL_ADC_Sample@Value_Sum+1,f
  4755  0F54  0852               	movf	HAL_ADC_Sample@Value+1,w
  4756  0F55  07CB               	addwf	HAL_ADC_Sample@Value_Sum+1,f
  4757                           
  4758                           ;modular.c: 66: if(Filter != 0)
  4759  0F56  0845               	movf	HAL_ADC_Sample@Filter,w
  4760  0F57  1903               	btfsc	3,2
  4761  0F58  2F5E               	goto	l15367
  4762  0F59  3006               	movlw	6
  4763                           
  4764                           ;modular.c: 67: {
  4765                           ;modular.c: 68: i_max++;
  4766  0F5A  0ACC               	incf	HAL_ADC_Sample@i_max,f
  4767                           
  4768                           ;modular.c: 69: if(i_max>=6) break;
  4769  0F5B  024C               	subwf	HAL_ADC_Sample@i_max,w
  4770  0F5C  1C03               	skipc
  4771  0F5D  2F26               	goto	l15349
  4772  0F5E                     l15367:	
  4773                           
  4774                           ;modular.c: 72: }
  4775                           ;modular.c: 74: if(Filter != 0) Value = (Value_Sum-Value_Min-Value_Max)>>2;
  4776  0F5E  0845               	movf	HAL_ADC_Sample@Filter,w
  4777  0F5F  1903               	btfsc	3,2
  4778  0F60  2F7E               	goto	l15373
  4779  0F61  084F               	movf	HAL_ADC_Sample@Value_Max,w
  4780  0F62  074D               	addwf	HAL_ADC_Sample@Value_Min,w
  4781  0F63  00C7               	movwf	??_HAL_ADC_Sample
  4782  0F64  0850               	movf	HAL_ADC_Sample@Value_Max+1,w
  4783  0F65  1803               	skipnc
  4784  0F66  0A50               	incf	HAL_ADC_Sample@Value_Max+1,w
  4785  0F67  074E               	addwf	HAL_ADC_Sample@Value_Min+1,w
  4786  0F68  00C8               	movwf	??_HAL_ADC_Sample+1
  4787  0F69  09C7               	comf	??_HAL_ADC_Sample,f
  4788  0F6A  09C8               	comf	??_HAL_ADC_Sample+1,f
  4789  0F6B  0AC7               	incf	??_HAL_ADC_Sample,f
  4790  0F6C  1903               	skipnz
  4791  0F6D  0AC8               	incf	??_HAL_ADC_Sample+1,f
  4792  0F6E  0847               	movf	??_HAL_ADC_Sample,w
  4793  0F6F  00D1               	movwf	HAL_ADC_Sample@Value
  4794  0F70  0848               	movf	??_HAL_ADC_Sample+1,w
  4795  0F71  00D2               	movwf	HAL_ADC_Sample@Value+1
  4796  0F72  084A               	movf	HAL_ADC_Sample@Value_Sum,w
  4797  0F73  07D1               	addwf	HAL_ADC_Sample@Value,f
  4798  0F74  1803               	skipnc
  4799  0F75  0AD2               	incf	HAL_ADC_Sample@Value+1,f
  4800  0F76  084B               	movf	HAL_ADC_Sample@Value_Sum+1,w
  4801  0F77  07D2               	addwf	HAL_ADC_Sample@Value+1,f
  4802  0F78  1003               	clrc
  4803  0F79  0CD2               	rrf	HAL_ADC_Sample@Value+1,f
  4804  0F7A  0CD1               	rrf	HAL_ADC_Sample@Value,f
  4805  0F7B  1003               	clrc
  4806  0F7C  0CD2               	rrf	HAL_ADC_Sample@Value+1,f
  4807  0F7D  0CD1               	rrf	HAL_ADC_Sample@Value,f
  4808  0F7E                     l15373:	
  4809                           
  4810                           ;modular.c: 76: return Value;
  4811  0F7E  0852               	movf	HAL_ADC_Sample@Value+1,w
  4812  0F7F  00C6               	movwf	?_HAL_ADC_Sample+1
  4813  0F80  0851               	movf	HAL_ADC_Sample@Value,w
  4814  0F81  00C5               	movwf	?_HAL_ADC_Sample
  4815  0F82  0008               	return
  4816  0F83                     __end_of_HAL_ADC_Sample:	
  4817  0F83                     __ptext743:	
  4818 ;; =============== function ___lldiv ends ============
  4819                           
  4820                           
  4821 ;; *************** function ___lmul *****************
  4822 ;; Defined at:
  4823 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lmul.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4826 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  product         4    8[BANK0 ] unsigned long 
  4829 ;; Return value:  Size  Location     Type
  4830 ;;                  4    0[BANK0 ] unsigned long 
  4831 ;; Registers used:
  4832 ;;		wreg, status,2, status,0
  4833 ;; Tracked objects:
  4834 ;;		On entry : 60/0
  4835 ;;		On exit  : 60/0
  4836 ;;		Unchanged: FFF9F/0
  4837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  4838 ;;      Params:         0       8       0       0       0       0
  4839 ;;      Locals:         0       4       0       0       0       0
  4840 ;;      Temps:          0       0       0       0       0       0
  4841 ;;      Totals:         0      12       0       0       0       0
  4842 ;;Total ram usage:       12 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; Hardware stack levels required when called:    3
  4845 ;; This function calls:
  4846 ;;		Nothing
  4847 ;; This function is called by:
  4848 ;;		_ReadLoadRes
  4849 ;;		_PowerProgress
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852  0F83                     ___lmul:	
  4853                           
  4854                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4855  0F83  01CD               	clrf	___lmul@product
  4856  0F84  01CE               	clrf	___lmul@product+1
  4857  0F85  01CF               	clrf	___lmul@product+2
  4858  0F86  01D0               	clrf	___lmul@product+3
  4859  0F87                     l13007:	
  4860  0F87  1C45               	btfss	___lmul@multiplier,0
  4861  0F88  2F9D               	goto	l15799
  4862  0F89  0849               	movf	___lmul@multiplicand,w
  4863  0F8A  07CD               	addwf	___lmul@product,f
  4864  0F8B  084A               	movf	___lmul@multiplicand+1,w
  4865  0F8C  1103               	clrz
  4866  0F8D  1803               	skipnc
  4867  0F8E  3E01               	addlw	1
  4868  0F8F  1D03               	btfss	3,2
  4869  0F90  07CE               	addwf	___lmul@product+1,f
  4870  0F91  084B               	movf	___lmul@multiplicand+2,w
  4871  0F92  1103               	clrz
  4872  0F93  1803               	skipnc
  4873  0F94  3E01               	addlw	1
  4874  0F95  1D03               	btfss	3,2
  4875  0F96  07CF               	addwf	___lmul@product+2,f
  4876  0F97  084C               	movf	___lmul@multiplicand+3,w
  4877  0F98  1103               	clrz
  4878  0F99  1803               	skipnc
  4879  0F9A  3E01               	addlw	1
  4880  0F9B  1D03               	btfss	3,2
  4881  0F9C  07D0               	addwf	___lmul@product+3,f
  4882  0F9D                     l15799:	
  4883  0F9D  1003               	clrc
  4884  0F9E  0DC9               	rlf	___lmul@multiplicand,f
  4885  0F9F  0DCA               	rlf	___lmul@multiplicand+1,f
  4886  0FA0  0DCB               	rlf	___lmul@multiplicand+2,f
  4887  0FA1  0DCC               	rlf	___lmul@multiplicand+3,f
  4888  0FA2  1003               	clrc
  4889  0FA3  0CC8               	rrf	___lmul@multiplier+3,f
  4890  0FA4  0CC7               	rrf	___lmul@multiplier+2,f
  4891  0FA5  0CC6               	rrf	___lmul@multiplier+1,f
  4892  0FA6  0CC5               	rrf	___lmul@multiplier,f
  4893  0FA7  0848               	movf	___lmul@multiplier+3,w
  4894  0FA8  0447               	iorwf	___lmul@multiplier+2,w
  4895  0FA9  0446               	iorwf	___lmul@multiplier+1,w
  4896  0FAA  0445               	iorwf	___lmul@multiplier,w
  4897  0FAB  1D03               	skipz
  4898  0FAC  2F87               	goto	l13007
  4899  0FAD  0850               	movf	___lmul@product+3,w
  4900  0FAE  00C8               	movwf	?___lmul+3
  4901  0FAF  084F               	movf	___lmul@product+2,w
  4902  0FB0  00C7               	movwf	?___lmul+2
  4903  0FB1  084E               	movf	___lmul@product+1,w
  4904  0FB2  00C6               	movwf	?___lmul+1
  4905  0FB3  084D               	movf	___lmul@product,w
  4906  0FB4  00C5               	movwf	?___lmul
  4907  0FB5  0008               	return
  4908  0FB6                     __end_of___lmul:	
  4909  0FB6                     __ptext742:	
  4910 ;; =============== function ___aldiv ends ============
  4911                           
  4912                           
  4913 ;; *************** function ___lldiv *****************
  4914 ;; Defined at:
  4915 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lldiv.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;  divisor         4   12[BANK0 ] unsigned long 
  4918 ;;  dividend        4   16[BANK0 ] unsigned long 
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  quotient        4   20[BANK0 ] unsigned long 
  4921 ;;  counter         1   24[BANK0 ] unsigned char 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  4   12[BANK0 ] unsigned long 
  4924 ;; Registers used:
  4925 ;;		wreg, status,2, status,0
  4926 ;; Tracked objects:
  4927 ;;		On entry : 60/0
  4928 ;;		On exit  : 60/0
  4929 ;;		Unchanged: FFF9F/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  4931 ;;      Params:         0       8       0       0       0       0
  4932 ;;      Locals:         0       5       0       0       0       0
  4933 ;;      Temps:          0       0       0       0       0       0
  4934 ;;      Totals:         0      13       0       0       0       0
  4935 ;;Total ram usage:       13 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    3
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		_ReadLoadRes
  4942 ;;		_PowerProgress
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945  0FB6                     ___lldiv:	
  4946                           
  4947                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4948  0FB6  01D9               	clrf	___lldiv@quotient
  4949  0FB7  01DA               	clrf	___lldiv@quotient+1
  4950  0FB8  01DB               	clrf	___lldiv@quotient+2
  4951  0FB9  01DC               	clrf	___lldiv@quotient+3
  4952  0FBA  0854               	movf	___lldiv@divisor+3,w
  4953  0FBB  0453               	iorwf	___lldiv@divisor+2,w
  4954  0FBC  0452               	iorwf	___lldiv@divisor+1,w
  4955  0FBD  0451               	iorwf	___lldiv@divisor,w
  4956  0FBE  1903               	skipnz
  4957  0FBF  2FF5               	goto	l15829
  4958  0FC0  01DD               	clrf	___lldiv@counter
  4959  0FC1                     L9:	
  4960  0FC1  0ADD               	incf	___lldiv@counter,f
  4961  0FC2  1BD4               	btfsc	___lldiv@divisor+3,7
  4962  0FC3  2FCA               	goto	l15817
  4963  0FC4  1003               	clrc
  4964  0FC5  0DD1               	rlf	___lldiv@divisor,f
  4965  0FC6  0DD2               	rlf	___lldiv@divisor+1,f
  4966  0FC7  0DD3               	rlf	___lldiv@divisor+2,f
  4967  0FC8  0DD4               	rlf	___lldiv@divisor+3,f
  4968  0FC9  2FC1               	goto	L9
  4969  0FCA                     l15817:	
  4970  0FCA  1003               	clrc
  4971  0FCB  0DD9               	rlf	___lldiv@quotient,f
  4972  0FCC  0DDA               	rlf	___lldiv@quotient+1,f
  4973  0FCD  0DDB               	rlf	___lldiv@quotient+2,f
  4974  0FCE  0DDC               	rlf	___lldiv@quotient+3,f
  4975  0FCF  0854               	movf	___lldiv@divisor+3,w
  4976  0FD0  0258               	subwf	___lldiv@dividend+3,w
  4977  0FD1  1D03               	skipz
  4978  0FD2  2FDD               	goto	u3295
  4979  0FD3  0853               	movf	___lldiv@divisor+2,w
  4980  0FD4  0257               	subwf	___lldiv@dividend+2,w
  4981  0FD5  1D03               	skipz
  4982  0FD6  2FDD               	goto	u3295
  4983  0FD7  0852               	movf	___lldiv@divisor+1,w
  4984  0FD8  0256               	subwf	___lldiv@dividend+1,w
  4985  0FD9  1D03               	skipz
  4986  0FDA  2FDD               	goto	u3295
  4987  0FDB  0851               	movf	___lldiv@divisor,w
  4988  0FDC  0255               	subwf	___lldiv@dividend,w
  4989  0FDD                     u3295:	
  4990  0FDD  1C03               	skipc
  4991  0FDE  2FEF               	goto	L10
  4992  0FDF  0851               	movf	___lldiv@divisor,w
  4993  0FE0  02D5               	subwf	___lldiv@dividend,f
  4994  0FE1  0852               	movf	___lldiv@divisor+1,w
  4995  0FE2  1C03               	skipc
  4996  0FE3  0F52               	incfsz	___lldiv@divisor+1,w
  4997  0FE4  02D6               	subwf	___lldiv@dividend+1,f
  4998  0FE5  0853               	movf	___lldiv@divisor+2,w
  4999  0FE6  1C03               	skipc
  5000  0FE7  0F53               	incfsz	___lldiv@divisor+2,w
  5001  0FE8  02D7               	subwf	___lldiv@dividend+2,f
  5002  0FE9  0854               	movf	___lldiv@divisor+3,w
  5003  0FEA  1C03               	skipc
  5004  0FEB  0F54               	incfsz	___lldiv@divisor+3,w
  5005  0FEC  02D8               	subwf	___lldiv@dividend+3,f
  5006  0FED  1459               	bsf	___lldiv@quotient,0
  5007  0FEE  1003               	clrc
  5008  0FEF                     L10:	
  5009  0FEF  0CD4               	rrf	___lldiv@divisor+3,f
  5010  0FF0  0CD3               	rrf	___lldiv@divisor+2,f
  5011  0FF1  0CD2               	rrf	___lldiv@divisor+1,f
  5012  0FF2  0CD1               	rrf	___lldiv@divisor,f
  5013  0FF3  0BDD               	decfsz	___lldiv@counter,f
  5014  0FF4  2FCA               	goto	l15817
  5015  0FF5                     l15829:	
  5016  0FF5  085C               	movf	___lldiv@quotient+3,w
  5017  0FF6  00D4               	movwf	?___lldiv+3
  5018  0FF7  085B               	movf	___lldiv@quotient+2,w
  5019  0FF8  00D3               	movwf	?___lldiv+2
  5020  0FF9  085A               	movf	___lldiv@quotient+1,w
  5021  0FFA  00D2               	movwf	?___lldiv+1
  5022  0FFB  0859               	movf	___lldiv@quotient,w
  5023  0FFC  00D1               	movwf	?___lldiv
  5024  0FFD  0008               	return
  5025  0FFE                     __end_of___lldiv:	
  5026                           
  5027                           	psect	text736
  5028  0B64                     __ptext736:	
  5029 ;; =============== function _ReadLoadRes ends ============
  5030                           
  5031                           
  5032 ;; *************** function _gearSwitch *****************
  5033 ;; Defined at:
  5034 ;;		line 25 in file "E:\workSpace\git_work\jm\P2\code\key.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;		None
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;		None
  5039 ;; Return value:  Size  Location     Type
  5040 ;;		None               void
  5041 ;; Registers used:
  5042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5043 ;; Tracked objects:
  5044 ;;		On entry : 60/20
  5045 ;;		On exit  : 60/0
  5046 ;;		Unchanged: FFE9F/0
  5047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  5048 ;;      Params:         0       0       0       0       0       0
  5049 ;;      Locals:         0       0       0       0       0       0
  5050 ;;      Temps:          0       0       0       0       0       0
  5051 ;;      Totals:         0       0       0       0       0       0
  5052 ;;Total ram usage:        0 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    4
  5055 ;; This function calls:
  5056 ;;		_SetOffNotifyLED
  5057 ;;		_SetShowLED
  5058 ;;		_SetWarnEvent
  5059 ;;		_ShowSegmentLED
  5060 ;;		_SetShowBatLxLED
  5061 ;; This function is called by:
  5062 ;;		_PortScan
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065  0B64                     _gearSwitch:	
  5066                           
  5067                           ;key.c: 26: switch (GetADC.Vout_Lx)
  5068                           
  5069                           ; Regs used in _gearSwitch: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5070  0B64  2B6D               	goto	l16101
  5071  0B65                     l4924:	
  5072                           ;key.c: 27: {
  5073                           ;key.c: 28: case 0x00:
  5074                           
  5075                           
  5076                           ;key.c: 29: GetADC.Vout_Lx = 0x01;
  5077  0B65  01B1               	clrf	_GetADC+3
  5078  0B66  0AB1               	incf	_GetADC+3,f
  5079                           
  5080                           ;key.c: 30: break;
  5081  0B67  2B79               	goto	l4925
  5082  0B68                     l16095:	
  5083                           
  5084                           ;key.c: 32: GetADC.Vout_Lx = 0x80;
  5085  0B68  3080               	movlw	128
  5086  0B69  00B1               	movwf	_GetADC+3
  5087                           
  5088                           ;key.c: 33: break;
  5089  0B6A  2B79               	goto	l4925
  5090  0B6B                     l16097:	
  5091                           
  5092                           ;key.c: 35: GetADC.Vout_Lx = 0x00;
  5093  0B6B  01B1               	clrf	_GetADC+3
  5094                           
  5095                           ;key.c: 36: break;
  5096  0B6C  2B79               	goto	l4925
  5097  0B6D                     l16101:	
  5098  0B6D  1283               	bcf	3,5	;RP0=0, select bank0
  5099  0B6E  0831               	movf	_GetADC+3,w
  5100                           
  5101                           ; Switch size 1, requested type "space"
  5102                           ; Number of cases is 3, Range of values is 0 to 128
  5103                           ; switch strategies available:
  5104                           ; Name         Instructions Cycles
  5105                           ; simple_byte           10     6 (average)
  5106                           ; jumptable            260     6 (fixed)
  5107                           ; rangetable           133     6 (fixed)
  5108                           ; spacedrange          264     9 (fixed)
  5109                           ; locatedrange         129     3 (fixed)
  5110                           ;	Chosen strategy is simple_byte
  5111  0B6F  3A00               	xorlw	0	; case 0
  5112  0B70  1903               	skipnz
  5113  0B71  2B65               	goto	l4924
  5114  0B72  3A01               	xorlw	1	; case 1
  5115  0B73  1903               	skipnz
  5116  0B74  2B68               	goto	l16095
  5117  0B75  3A81               	xorlw	129	; case 128
  5118  0B76  1903               	skipnz
  5119  0B77  2B6B               	goto	l16097
  5120  0B78  2B79               	goto	l4925
  5121  0B79                     l4925:	
  5122  0B79  3007               	movlw	7
  5123                           
  5124                           ;key.c: 39: SysInfoFlag.bits.b1 = 1;
  5125  0B7A  14AB               	bsf	_SysInfoFlag,1
  5126                           
  5127                           ;key.c: 41: if(RunEventLED.EmEvent < 7 || RunEventLED.EmEvent == 10 || RunEventLED.EmEve
      +                          nt == 17)
  5128  0B7B  0244               	subwf	_RunEventLED+3,w
  5129  0B7C  1C03               	skipc
  5130  0B7D  2B86               	goto	l16109
  5131  0B7E  0844               	movf	_RunEventLED+3,w
  5132  0B7F  3A0A               	xorlw	10
  5133  0B80  1903               	skipnz
  5134  0B81  2B86               	goto	l16109
  5135  0B82  0844               	movf	_RunEventLED+3,w
  5136  0B83  3A11               	xorlw	17
  5137  0B84  1D03               	skipz
  5138  0B85  0008               	return
  5139  0B86                     l16109:	
  5140                           
  5141                           ;key.c: 42: {
  5142                           ;key.c: 43: SetOffNotifyLED();
  5143  0B86  118A  2384  158A   	fcall	_SetOffNotifyLED
  5144                           
  5145                           ;key.c: 44: SetShowLED(0x00);
  5146  0B89  3000               	movlw	0
  5147                           
  5148                           ;key.c: 45: SetWarnEvent(&RunEventLED,10,25,6);
  5149  0B8A  300A               	movlw	10
  5150  0B8B  00C5               	movwf	?_SetWarnEvent
  5151  0B8C  3019               	movlw	25
  5152  0B8D  00C6               	movwf	?_SetWarnEvent+1
  5153  0B8E  3006               	movlw	6
  5154  0B8F  00C7               	movwf	?_SetWarnEvent+2
  5155  0B90  3041               	movlw	_RunEventLED& (0+255)
  5156  0B91  118A  238D  158A   	fcall	_SetWarnEvent
  5157                           
  5158                           ;key.c: 46: if(SysInfoFlag.bits.b2 == 0 || RunEventLED.EmEvent == 17)
  5159  0B94  1D2B               	btfss	_SysInfoFlag,2
  5160  0B95  2B9A               	goto	l16117
  5161  0B96  0844               	movf	_RunEventLED+3,w
  5162  0B97  3A11               	xorlw	17
  5163  0B98  1D03               	skipz
  5164  0B99  0008               	return
  5165  0B9A                     l16117:	
  5166                           
  5167                           ;key.c: 47: {
  5168                           ;key.c: 48: ShowSegmentLED(0x00);
  5169  0B9A  3000               	movlw	0
  5170  0B9B  118A  2319  158A   	fcall	_ShowSegmentLED
  5171                           
  5172                           ;key.c: 49: LedsInfoFlag.bits.b3 = 0;
  5173                           
  5174                           ;key.c: 50: RunLED.ShowBatLxCnt = 0x00;
  5175                           
  5176                           ;key.c: 51: RunLED.TaskBatLx = 0;
  5177  0B9E  118A  23C6         	fcall	PL8	;call to abstracted procedure
  5178                           
  5179                           ;key.c: 52: SetShowBatLxLED(0x00);
  5180  0BA0  118A  2B81         	ljmp	l15677
  5181  0BA2                     __end_of_gearSwitch:	
  5182                           
  5183                           	psect	text738
  5184  0BA2                     __ptext738:	
  5185 ;; =============== function _ShowWarnLED ends ============
  5186                           
  5187                           
  5188 ;; *************** function _PlugProgress *****************
  5189 ;; Defined at:
  5190 ;;		line 341 in file "E:\workSpace\git_work\jm\P2\code\task.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;		None
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;		None
  5195 ;; Return value:  Size  Location     Type
  5196 ;;		None               void
  5197 ;; Registers used:
  5198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 20/0
  5202 ;;		Unchanged: FFE9F/0
  5203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  5204 ;;      Params:         0       0       0       0       0       0
  5205 ;;      Locals:         0       0       0       0       0       0
  5206 ;;      Temps:          0       0       0       0       0       0
  5207 ;;      Totals:         0       0       0       0       0       0
  5208 ;;Total ram usage:        0 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    4
  5211 ;; This function calls:
  5212 ;;		_SetWarnEvent
  5213 ;; This function is called by:
  5214 ;;		_main
  5215 ;; This function uses a non-reentrant model
  5216 ;;
  5217  0BA2                     _PlugProgress:	
  5218                           
  5219                           ;task.c: 342: if(SysInfoFlag.bits.b2 != 0)
  5220                           
  5221                           ; Regs used in _PlugProgress: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5222  0BA2  1283               	bcf	3,5	;RP0=0, select bank0
  5223  0BA3  1303               	bcf	3,6	;RP1=0, select bank0
  5224  0BA4  1D2B               	btfss	_SysInfoFlag,2
  5225  0BA5  2BF7               	goto	l15977
  5226                           
  5227                           ;task.c: 343: {
  5228                           ;task.c: 344: if(RunEventLED.EmEvent == 0)
  5229  0BA6  08C4               	movf	_RunEventLED+3,f
  5230  0BA7  1D03               	skipz
  5231  0BA8  2BB1               	goto	l15937
  5232                           
  5233                           ;task.c: 345: {
  5234                           ;task.c: 346: SetWarnEvent(&RunEventLED,4,25,20);
  5235  0BA9  3004               	movlw	4
  5236  0BAA  240A               	fcall	PL5	;call to abstracted procedure
  5237  0BAB  118A  238D  158A   	fcall	_SetWarnEvent
  5238                           
  5239                           ;task.c: 347: RunLED.ShowEventOld = 0x00;
  5240  0BAE  01A4               	clrf	_RunLED+4
  5241                           
  5242                           ;task.c: 348: RunEventLED.ShowTask = 0;
  5243  0BAF  01C3               	clrf	_RunEventLED+2
  5244                           
  5245                           ;task.c: 349: LedsInfoFlag.bits.b3 = 1;
  5246  0BB0  15AA               	bsf	_LedsInfoFlag,3
  5247  0BB1                     l15937:	
  5248                           
  5249                           ;task.c: 350: }
  5250                           ;task.c: 352: if(SysInfoFlag.bits.b3 == 0)
  5251  0BB1  19AB               	btfsc	_SysInfoFlag,3
  5252  0BB2  2BDB               	goto	l15959
  5253                           
  5254                           ;task.c: 353: {
  5255                           ;task.c: 354: if(GetADC.BatteryVoltage >= 3950)
  5256  0BB3  300F               	movlw	15
  5257  0BB4  0233               	subwf	_GetADC+5,w
  5258  0BB5  306E               	movlw	110
  5259  0BB6  1903               	skipnz
  5260  0BB7  0232               	subwf	_GetADC+4,w
  5261  0BB8  1C03               	skipc
  5262  0BB9  2BD7               	goto	l15955
  5263                           
  5264                           ;task.c: 355: {
  5265                           ;task.c: 356: if(GetADC.BatteryVoltage >= 4220 || PAD6 == 1 || GetADC.BatteryPercent >= 
      +                          100)
  5266  0BBA  3010               	movlw	16
  5267  0BBB  0233               	subwf	_GetADC+5,w
  5268  0BBC  307C               	movlw	124
  5269  0BBD  1903               	skipnz
  5270  0BBE  0232               	subwf	_GetADC+4,w
  5271  0BBF  1C03               	btfss	3,0
  5272  0BC0  1B05               	btfsc	5,6
  5273  0BC1  2BC6               	goto	l15947
  5274  0BC2  3064               	movlw	100
  5275  0BC3  023A               	subwf	_GetADC+12,w
  5276  0BC4  1C03               	skipc
  5277  0BC5  2BD7               	goto	l15955
  5278  0BC6                     l15947:	
  5279                           
  5280                           ;task.c: 357: {
  5281                           ;task.c: 358: if(TimeCnt.RechgFullTime < 20) TimeCnt.RechgFullTime++;
  5282  0BC6  3000               	movlw	0
  5283  0BC7  1703               	bsf	3,6	;RP1=1, select bank2
  5284  0BC8  025B               	subwf	91,w
  5285  0BC9  3014               	movlw	20
  5286  0BCA  1903               	skipnz
  5287  0BCB  025A               	subwf	90,w
  5288  0BCC  1803               	skipnc
  5289  0BCD  2BD2               	goto	l15951
  5290  0BCE  0ADA               	incf	90,f
  5291  0BCF  1903               	skipnz
  5292  0BD0  0ADB               	incf	91,f
  5293  0BD1  0008               	return
  5294  0BD2                     l15951:	
  5295                           
  5296                           ;task.c: 359: else
  5297                           ;task.c: 360: {
  5298                           ;task.c: 361: TimeCnt.RechgFullTime = 0;
  5299  0BD2  01DA               	clrf	90
  5300  0BD3  01DB               	clrf	91
  5301                           
  5302                           ;task.c: 362: SysInfoFlag.bits.b3 = 1;
  5303  0BD4  1303               	bcf	3,6	;RP1=0, select bank0
  5304  0BD5  15AB               	bsf	_SysInfoFlag,3
  5305  0BD6  0008               	return
  5306  0BD7                     l15955:	
  5307                           
  5308                           ;task.c: 365: else TimeCnt.RechgFullTime = 0;
  5309  0BD7  1703               	bsf	3,6	;RP1=1, select bank2
  5310  0BD8  01DA               	clrf	90
  5311  0BD9  01DB               	clrf	91
  5312  0BDA  0008               	return
  5313  0BDB                     l15959:	
  5314                           
  5315                           ;task.c: 369: else
  5316                           ;task.c: 370: {
  5317                           ;task.c: 371: if(RunEventLED.EmEvent == 4 && GetADC.BatteryPercent == 100)
  5318  0BDB  0844               	movf	_RunEventLED+3,w
  5319  0BDC  3A04               	xorlw	4
  5320  0BDD  1D03               	skipz
  5321  0BDE  0008               	return
  5322  0BDF  083A               	movf	_GetADC+12,w
  5323  0BE0  3A64               	xorlw	100
  5324  0BE1  1D03               	skipz
  5325  0BE2  0008               	return
  5326                           
  5327                           ;task.c: 372: {
  5328                           ;task.c: 373: SetWarnEvent(&RunEventLED,5,25,40);
  5329  0BE3  3005               	movlw	5
  5330  0BE4  00C5               	movwf	?_SetWarnEvent
  5331  0BE5  3019               	movlw	25
  5332  0BE6  00C6               	movwf	?_SetWarnEvent+1
  5333  0BE7  3028               	movlw	40
  5334  0BE8  00C7               	movwf	?_SetWarnEvent+2
  5335  0BE9  3041               	movlw	_RunEventLED& (0+255)
  5336  0BEA  118A  238D         	fcall	_SetWarnEvent
  5337                           
  5338                           ;task.c: 374: GetADC.BatteryLevel = GetADC.BatteryPercent;
  5339  0BEC  083A               	movf	_GetADC+12,w
  5340  0BED  00AF               	movwf	_GetADC+1
  5341                           
  5342                           ;task.c: 375: RunEventLED.ShowTask = 0;
  5343  0BEE  01C3               	clrf	_RunEventLED+2
  5344                           
  5345                           ;task.c: 376: TimeCnt.RechgFullTime = 0;
  5346  0BEF  1703               	bsf	3,6	;RP1=1, select bank2
  5347  0BF0  01DA               	clrf	90
  5348  0BF1  01DB               	clrf	91
  5349                           
  5350                           ;task.c: 377: LedsInfoFlag.bits.b3 = 0;
  5351  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  5352  0BF3  11AA               	bcf	_LedsInfoFlag,3
  5353                           
  5354                           ;task.c: 378: RunLED.ShowBatLxCnt = 0x00;
  5355  0BF4  01A5               	clrf	_RunLED+5
  5356                           
  5357                           ;task.c: 379: RunLED.TaskBatLx = 0;
  5358  0BF5  01A6               	clrf	_RunLED+6
  5359  0BF6  0008               	return
  5360  0BF7                     l15977:	
  5361                           
  5362                           ;task.c: 383: else
  5363                           ;task.c: 384: {
  5364                           ;task.c: 385: if(RunEventLED.EmEvent == 0 && LedsInfoFlag.bits.b0 == 0)
  5365  0BF7  08C4               	movf	_RunEventLED+3,f
  5366  0BF8  1903               	btfsc	3,2
  5367  0BF9  182A               	btfsc	_LedsInfoFlag,0
  5368  0BFA  0008               	return
  5369                           
  5370                           ;task.c: 386: {
  5371                           ;task.c: 387: if(TimeCnt.SleepTime<300) TimeCnt.SleepTime++;
  5372  0BFB  3001               	movlw	1
  5373  0BFC  1703               	bsf	3,6	;RP1=1, select bank2
  5374  0BFD  025D               	subwf	93,w
  5375  0BFE  302C               	movlw	44
  5376  0BFF  1903               	skipnz
  5377  0C00  025C               	subwf	92,w
  5378  0C01  1803               	skipnc
  5379  0C02  2C07               	goto	l10177
  5380  0C03  0ADC               	incf	92,f
  5381  0C04  1903               	skipnz
  5382  0C05  0ADD               	incf	93,f
  5383  0C06  0008               	return
  5384  0C07                     l10177:	
  5385                           
  5386                           ;task.c: 388: else SysInfoFlag.bits.b0 = 0;
  5387  0C07  1303               	bcf	3,6	;RP1=0, select bank0
  5388  0C08  102B               	bcf	_SysInfoFlag,0
  5389  0C09  0008               	return
  5390  0C0A                     __end_of_PlugProgress:	
  5391  0C0A                     PL5:	
  5392  0C0A  00C5               	movwf	?_SetWarnEvent
  5393  0C0B  3019               	movlw	25
  5394  0C0C  00C6               	movwf	?_SetWarnEvent+1
  5395  0C0D  3014               	movlw	20
  5396  0C0E  00C7               	movwf	?_SetWarnEvent+2
  5397  0C0F  3441               	retlw	_RunEventLED& (0+255)
  5398                           
  5399                           	psect	text741
  5400  075C                     __ptext741:	
  5401 ;; =============== function _SystemClockInit ends ============
  5402                           
  5403                           
  5404 ;; *************** function ___aldiv *****************
  5405 ;; Defined at:
  5406 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\aldiv.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;  divisor         4    0[BANK0 ] long 
  5409 ;;  dividend        4    4[BANK0 ] long 
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;  quotient        4   10[BANK0 ] long 
  5412 ;;  sign            1    9[BANK0 ] unsigned char 
  5413 ;;  counter         1    8[BANK0 ] unsigned char 
  5414 ;; Return value:  Size  Location     Type
  5415 ;;                  4    0[BANK0 ] long 
  5416 ;; Registers used:
  5417 ;;		wreg, status,2, status,0
  5418 ;; Tracked objects:
  5419 ;;		On entry : 60/0
  5420 ;;		On exit  : 60/0
  5421 ;;		Unchanged: FFF9F/0
  5422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  5423 ;;      Params:         0       8       0       0       0       0
  5424 ;;      Locals:         0       6       0       0       0       0
  5425 ;;      Temps:          0       0       0       0       0       0
  5426 ;;      Totals:         0      14       0       0       0       0
  5427 ;;Total ram usage:       14 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; Hardware stack levels required when called:    3
  5430 ;; This function calls:
  5431 ;;		Nothing
  5432 ;; This function is called by:
  5433 ;;		_main
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436  075C                     ___aldiv:	
  5437                           
  5438                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5439  075C  01CE               	clrf	___aldiv@sign
  5440  075D  1FC8               	btfss	___aldiv@divisor+3,7
  5441  075E  2F6C               	goto	l13222
  5442  075F  09C5               	comf	___aldiv@divisor,f
  5443  0760  09C6               	comf	___aldiv@divisor+1,f
  5444  0761  09C7               	comf	___aldiv@divisor+2,f
  5445  0762  09C8               	comf	___aldiv@divisor+3,f
  5446  0763  0AC5               	incf	___aldiv@divisor,f
  5447  0764  1903               	skipnz
  5448  0765  0AC6               	incf	___aldiv@divisor+1,f
  5449  0766  1903               	skipnz
  5450  0767  0AC7               	incf	___aldiv@divisor+2,f
  5451  0768  1903               	skipnz
  5452  0769  0AC8               	incf	___aldiv@divisor+3,f
  5453  076A  01CE               	clrf	___aldiv@sign
  5454  076B  0ACE               	incf	___aldiv@sign,f
  5455  076C                     l13222:	
  5456  076C  1FCC               	btfss	___aldiv@dividend+3,7
  5457  076D  2F7B               	goto	l15843
  5458  076E  09C9               	comf	___aldiv@dividend,f
  5459  076F  09CA               	comf	___aldiv@dividend+1,f
  5460  0770  09CB               	comf	___aldiv@dividend+2,f
  5461  0771  09CC               	comf	___aldiv@dividend+3,f
  5462  0772  0AC9               	incf	___aldiv@dividend,f
  5463  0773  1903               	skipnz
  5464  0774  0ACA               	incf	___aldiv@dividend+1,f
  5465  0775  1903               	skipnz
  5466  0776  0ACB               	incf	___aldiv@dividend+2,f
  5467  0777  1903               	skipnz
  5468  0778  0ACC               	incf	___aldiv@dividend+3,f
  5469  0779  3001               	movlw	1
  5470  077A  06CE               	xorwf	___aldiv@sign,f
  5471  077B                     l15843:	
  5472  077B  01CF               	clrf	___aldiv@quotient
  5473  077C  01D0               	clrf	___aldiv@quotient+1
  5474  077D  01D1               	clrf	___aldiv@quotient+2
  5475  077E  01D2               	clrf	___aldiv@quotient+3
  5476  077F  0848               	movf	___aldiv@divisor+3,w
  5477  0780  0447               	iorwf	___aldiv@divisor+2,w
  5478  0781  0446               	iorwf	___aldiv@divisor+1,w
  5479  0782  0445               	iorwf	___aldiv@divisor,w
  5480  0783  1903               	skipnz
  5481  0784  2FBA               	goto	l15865
  5482  0785  01CD               	clrf	___aldiv@counter
  5483  0786                     L7:	
  5484  0786  0ACD               	incf	___aldiv@counter,f
  5485  0787  1BC8               	btfsc	___aldiv@divisor+3,7
  5486  0788  2F8F               	goto	l15853
  5487  0789  1003               	clrc
  5488  078A  0DC5               	rlf	___aldiv@divisor,f
  5489  078B  0DC6               	rlf	___aldiv@divisor+1,f
  5490  078C  0DC7               	rlf	___aldiv@divisor+2,f
  5491  078D  0DC8               	rlf	___aldiv@divisor+3,f
  5492  078E  2F86               	goto	L7
  5493  078F                     l15853:	
  5494  078F  1003               	clrc
  5495  0790  0DCF               	rlf	___aldiv@quotient,f
  5496  0791  0DD0               	rlf	___aldiv@quotient+1,f
  5497  0792  0DD1               	rlf	___aldiv@quotient+2,f
  5498  0793  0DD2               	rlf	___aldiv@quotient+3,f
  5499  0794  0848               	movf	___aldiv@divisor+3,w
  5500  0795  024C               	subwf	___aldiv@dividend+3,w
  5501  0796  1D03               	skipz
  5502  0797  2FA2               	goto	u3355
  5503  0798  0847               	movf	___aldiv@divisor+2,w
  5504  0799  024B               	subwf	___aldiv@dividend+2,w
  5505  079A  1D03               	skipz
  5506  079B  2FA2               	goto	u3355
  5507  079C  0846               	movf	___aldiv@divisor+1,w
  5508  079D  024A               	subwf	___aldiv@dividend+1,w
  5509  079E  1D03               	skipz
  5510  079F  2FA2               	goto	u3355
  5511  07A0  0845               	movf	___aldiv@divisor,w
  5512  07A1  0249               	subwf	___aldiv@dividend,w
  5513  07A2                     u3355:	
  5514  07A2  1C03               	skipc
  5515  07A3  2FB4               	goto	L8
  5516  07A4  0845               	movf	___aldiv@divisor,w
  5517  07A5  02C9               	subwf	___aldiv@dividend,f
  5518  07A6  0846               	movf	___aldiv@divisor+1,w
  5519  07A7  1C03               	skipc
  5520  07A8  0F46               	incfsz	___aldiv@divisor+1,w
  5521  07A9  02CA               	subwf	___aldiv@dividend+1,f
  5522  07AA  0847               	movf	___aldiv@divisor+2,w
  5523  07AB  1C03               	skipc
  5524  07AC  0F47               	incfsz	___aldiv@divisor+2,w
  5525  07AD  02CB               	subwf	___aldiv@dividend+2,f
  5526  07AE  0848               	movf	___aldiv@divisor+3,w
  5527  07AF  1C03               	skipc
  5528  07B0  0F48               	incfsz	___aldiv@divisor+3,w
  5529  07B1  02CC               	subwf	___aldiv@dividend+3,f
  5530  07B2  144F               	bsf	___aldiv@quotient,0
  5531  07B3  1003               	clrc
  5532  07B4                     L8:	
  5533  07B4  0CC8               	rrf	___aldiv@divisor+3,f
  5534  07B5  0CC7               	rrf	___aldiv@divisor+2,f
  5535  07B6  0CC6               	rrf	___aldiv@divisor+1,f
  5536  07B7  0CC5               	rrf	___aldiv@divisor,f
  5537  07B8  0BCD               	decfsz	___aldiv@counter,f
  5538  07B9  2F8F               	goto	l15853
  5539  07BA                     l15865:	
  5540  07BA  084E               	movf	___aldiv@sign,w
  5541  07BB  1903               	btfsc	3,2
  5542  07BC  2FC8               	goto	l15869
  5543  07BD  09CF               	comf	___aldiv@quotient,f
  5544  07BE  09D0               	comf	___aldiv@quotient+1,f
  5545  07BF  09D1               	comf	___aldiv@quotient+2,f
  5546  07C0  09D2               	comf	___aldiv@quotient+3,f
  5547  07C1  0ACF               	incf	___aldiv@quotient,f
  5548  07C2  1903               	skipnz
  5549  07C3  0AD0               	incf	___aldiv@quotient+1,f
  5550  07C4  1903               	skipnz
  5551  07C5  0AD1               	incf	___aldiv@quotient+2,f
  5552  07C6  1903               	skipnz
  5553  07C7  0AD2               	incf	___aldiv@quotient+3,f
  5554  07C8                     l15869:	
  5555  07C8  0852               	movf	___aldiv@quotient+3,w
  5556  07C9  00C8               	movwf	?___aldiv+3
  5557  07CA  0851               	movf	___aldiv@quotient+2,w
  5558  07CB  00C7               	movwf	?___aldiv+2
  5559  07CC  0850               	movf	___aldiv@quotient+1,w
  5560  07CD  00C6               	movwf	?___aldiv+1
  5561  07CE  084F               	movf	___aldiv@quotient,w
  5562  07CF  00C5               	movwf	?___aldiv
  5563  07D0  0008               	return
  5564  07D1                     __end_of___aldiv:	
  5565                           
  5566                           	psect	text748
  5567  0B26                     __ptext748:	
  5568 ;; =============== function _Delay_16nop ends ============
  5569                           
  5570                           
  5571 ;; *************** function _ScanShowBatLxLED *****************
  5572 ;; Defined at:
  5573 ;;		line 715 in file "E:\workSpace\git_work\jm\P2\code\LED.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;		None
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;		None
  5578 ;; Return value:  Size  Location     Type
  5579 ;;		None               void
  5580 ;; Registers used:
  5581 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5582 ;; Tracked objects:
  5583 ;;		On entry : 60/0
  5584 ;;		On exit  : 60/0
  5585 ;;		Unchanged: FFF9F/0
  5586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  5587 ;;      Params:         0       0       0       0       0       0
  5588 ;;      Locals:         0       0       0       0       0       0
  5589 ;;      Temps:          0       0       0       0       0       0
  5590 ;;      Totals:         0       0       0       0       0       0
  5591 ;;Total ram usage:        0 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    3
  5594 ;; This function calls:
  5595 ;;		Nothing
  5596 ;; This function is called by:
  5597 ;;		_main
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600  0B26                     _ScanShowBatLxLED:	
  5601                           
  5602                           ;LED.c: 716: if(LedsInfoFlag.bits.b3 != 0)
  5603                           
  5604                           ; Regs used in _ScanShowBatLxLED: [wreg-fsr0h+status,2+status,0]
  5605  0B26  1DAA               	btfss	_LedsInfoFlag,3
  5606  0B27  0008               	return
  5607                           
  5608                           ;LED.c: 717: {
  5609                           ;LED.c: 718: if(RunLED.TaskBatLx) RunLED.TaskBatLx--;
  5610  0B28  0826               	movf	_RunLED+6,w
  5611  0B29  1903               	btfsc	3,2
  5612  0B2A  2B2D               	goto	l15503
  5613  0B2B  03A6               	decf	_RunLED+6,f
  5614  0B2C  0008               	return
  5615  0B2D                     l15503:	
  5616                           
  5617                           ;LED.c: 719: else
  5618                           ;LED.c: 720: {
  5619                           ;LED.c: 721: RunLED.TaskBatLx = 10;
  5620  0B2D  300A               	movlw	10
  5621  0B2E  00A6               	movwf	_RunLED+6
  5622                           
  5623                           ;LED.c: 723: switch(RunLED.ShowBatLxCnt)
  5624  0B2F  2B32               	goto	l15509
  5625  0B30                     l15505:	
  5626                           
  5627                           ;LED.c: 751: RunLED.ShowBatLxCnt = 0x00;
  5628  0B30  01A5               	clrf	_RunLED+5
  5629                           
  5630                           ;LED.c: 752: break;
  5631  0B31  2B4C               	goto	l6771
  5632  0B32                     l15509:	
  5633  0B32  0825               	movf	_RunLED+5,w
  5634                           
  5635                           ; Switch size 1, requested type "space"
  5636                           ; Number of cases is 8, Range of values is 1 to 8
  5637                           ; switch strategies available:
  5638                           ; Name         Instructions Cycles
  5639                           ; simple_byte           25    13 (average)
  5640                           ; direct_byte           26    10 (fixed)
  5641                           ; jumptable            263     9 (fixed)
  5642                           ;	Chosen strategy is simple_byte
  5643  0B33  3A01               	xorlw	1	; case 1
  5644  0B34  1903               	skipnz
  5645  0B35  2B4C               	goto	l6771
  5646  0B36  3A03               	xorlw	3	; case 2
  5647  0B37  1903               	skipnz
  5648  0B38  2B4C               	goto	l6771
  5649  0B39  3A01               	xorlw	1	; case 3
  5650  0B3A  1903               	skipnz
  5651  0B3B  2B4C               	goto	l6771
  5652  0B3C  3A07               	xorlw	7	; case 4
  5653  0B3D  1903               	skipnz
  5654  0B3E  2B4C               	goto	l6771
  5655  0B3F  3A01               	xorlw	1	; case 5
  5656  0B40  1903               	skipnz
  5657  0B41  2B4C               	goto	l6771
  5658  0B42  3A03               	xorlw	3	; case 6
  5659  0B43  1903               	skipnz
  5660  0B44  2B4C               	goto	l6771
  5661  0B45  3A01               	xorlw	1	; case 7
  5662  0B46  1903               	skipnz
  5663  0B47  2B4C               	goto	l6771
  5664  0B48  3A0F               	xorlw	15	; case 8
  5665  0B49  1903               	skipnz
  5666  0B4A  2B4C               	goto	l6771
  5667  0B4B  2B30               	goto	l15505
  5668  0B4C                     l6771:	
  5669                           
  5670                           ;LED.c: 755: if(LedsInfoFlag.bits.b7 != 0 && LedsInfoFlag.bits.b1 != 0)
  5671  0B4C  1BAA               	btfsc	_LedsInfoFlag,7
  5672  0B4D  1CAA               	btfss	_LedsInfoFlag,1
  5673  0B4E  2B55               	goto	l6780
  5674                           
  5675                           ;LED.c: 756: {
  5676                           ;LED.c: 757: if(RunLED.ShowBatLxCnt < 8) RunLED.ShowBatLxCnt++;
  5677  0B4F  3008               	movlw	8
  5678  0B50  0225               	subwf	_RunLED+5,w
  5679  0B51  1803               	skipnc
  5680  0B52  0008               	return
  5681  0B53                     l15515:	
  5682  0B53  0AA5               	incf	_RunLED+5,f
  5683  0B54  0008               	return
  5684  0B55                     l6780:	
  5685                           
  5686                           ;LED.c: 759: else if(LedsInfoFlag.bits.b7 != 0 && LedsInfoFlag.bits.b2 != 0)
  5687  0B55  1BAA               	btfsc	_LedsInfoFlag,7
  5688  0B56  1D2A               	btfss	_LedsInfoFlag,2
  5689  0B57  2B5C               	goto	l6783
  5690                           
  5691                           ;LED.c: 760: {
  5692                           ;LED.c: 761: if(RunLED.ShowBatLxCnt) RunLED.ShowBatLxCnt--;
  5693  0B58  0825               	movf	_RunLED+5,w
  5694  0B59  1D03               	skipz
  5695  0B5A  03A5               	decf	_RunLED+5,f
  5696  0B5B  0008               	return
  5697  0B5C                     l6783:	
  5698                           
  5699                           ;LED.c: 763: else if(SysInfoFlag.bits.b2 != 0)
  5700  0B5C  1D2B               	btfss	_SysInfoFlag,2
  5701  0B5D  0008               	return
  5702                           
  5703                           ;LED.c: 764: {
  5704                           ;LED.c: 765: if(RunLED.ShowBatLxCnt < 8) RunLED.ShowBatLxCnt++;
  5705  0B5E  3008               	movlw	8
  5706  0B5F  0225               	subwf	_RunLED+5,w
  5707  0B60  1C03               	btfss	3,0
  5708  0B61  2B53               	goto	l15515
  5709                           
  5710                           ;LED.c: 766: else RunLED.ShowBatLxCnt = 0x00;
  5711  0B62  01A5               	clrf	_RunLED+5
  5712  0B63  0008               	return
  5713  0B64                     __end_of_ScanShowBatLxLED:	
  5714                           
  5715                           	psect	text749
  5716  0DA6                     __ptext749:	
  5717 ;; =============== function _ScanShowBatLxLED ends ============
  5718                           
  5719                           
  5720 ;; *************** function _UpdateElectricityGrade *****************
  5721 ;; Defined at:
  5722 ;;		line 88 in file "E:\workSpace\git_work\jm\P2\code\modular.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;		None
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;  temp_TimeUp     2    3[BANK0 ] unsigned int 
  5727 ;;  temp_Percent    1    5[BANK0 ] unsigned char 
  5728 ;; Return value:  Size  Location     Type
  5729 ;;		None               void
  5730 ;; Registers used:
  5731 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5732 ;; Tracked objects:
  5733 ;;		On entry : 60/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: FFE00/0
  5736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  5737 ;;      Params:         0       0       0       0       0       0
  5738 ;;      Locals:         0       3       0       0       0       0
  5739 ;;      Temps:          0       3       0       0       0       0
  5740 ;;      Totals:         0       6       0       0       0       0
  5741 ;;Total ram usage:        6 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    3
  5744 ;; This function calls:
  5745 ;;		Nothing
  5746 ;; This function is called by:
  5747 ;;		_main
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750  0DA6                     _UpdateElectricityGrade:	
  5751                           
  5752                           ;modular.c: 89: uint8_t temp_Percent;
  5753                           ;modular.c: 90: uint16_t temp_TimeUp;
  5754                           ;modular.c: 91: if(SysInfoFlag.bits.b5 != 0)
  5755                           
  5756                           ; Regs used in _UpdateElectricityGrade: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5757  0DA6  1EAB               	btfss	_SysInfoFlag,5
  5758  0DA7  2E82               	goto	l15477
  5759                           
  5760                           ;modular.c: 92: {
  5761                           ;modular.c: 97: if(VoutInfoFlag.bits.b7 != 0)
  5762  0DA8  1FAC               	btfss	_VoutInfoFlag,7
  5763  0DA9  2DAF               	goto	l8408
  5764                           
  5765                           ;modular.c: 98: {
  5766                           ;modular.c: 99: GetADC.PercentAddCount = 0;
  5767  0DAA  01BB               	clrf	_GetADC+13
  5768  0DAB  01BC               	clrf	_GetADC+14
  5769                           
  5770                           ;modular.c: 100: GetADC.PercentSubCount = 0;
  5771  0DAC  01BD               	clrf	_GetADC+15
  5772  0DAD  01BE               	clrf	_GetADC+16
  5773                           
  5774                           ;modular.c: 102: }
  5775  0DAE  0008               	return
  5776  0DAF                     l8408:	
  5777                           
  5778                           ;modular.c: 103: else
  5779                           ;modular.c: 104: {
  5780                           ;modular.c: 105: if(SysInfoFlag.bits.b2 != 0)
  5781  0DAF  1D2B               	btfss	_SysInfoFlag,2
  5782  0DB0  2E11               	goto	l15429
  5783                           
  5784                           ;modular.c: 106: {
  5785                           ;modular.c: 107: if((GetADC.BatteryVoltage + 20) < GetADC.BatteryVoltageOld && SysInfoFl
      +                          ag.bits.b1 == 0)
  5786  0DB1  0832               	movf	_GetADC+4,w
  5787  0DB2  3E14               	addlw	20
  5788  0DB3  00C5               	movwf	??_UpdateElectricityGrade
  5789  0DB4  0833               	movf	_GetADC+5,w
  5790  0DB5  1803               	skipnc
  5791  0DB6  3E01               	addlw	1
  5792  0DB7  00C6               	movwf	??_UpdateElectricityGrade+1
  5793  0DB8  0840               	movf	_GetADC+18,w
  5794  0DB9  0246               	subwf	??_UpdateElectricityGrade+1,w
  5795  0DBA  1D03               	skipz
  5796  0DBB  2DBE               	goto	u2455
  5797  0DBC  083F               	movf	_GetADC+17,w
  5798  0DBD  0245               	subwf	??_UpdateElectricityGrade,w
  5799  0DBE                     u2455:	
  5800  0DBE  1C03               	btfss	3,0
  5801  0DBF  18AB               	btfsc	_SysInfoFlag,1
  5802  0DC0  2DCC               	goto	l15395
  5803                           
  5804                           ;modular.c: 108: {
  5805                           ;modular.c: 109: GetADC.PercentAddCount = 0;
  5806  0DC1  01BB               	clrf	_GetADC+13
  5807  0DC2  01BC               	clrf	_GetADC+14
  5808                           
  5809                           ;modular.c: 110: GetADC.PercentSubCount++;
  5810                           
  5811                           ;modular.c: 111: if(GetADC.PercentSubCount >= 100)
  5812  0DC3  26B4  158A         	fcall	PL7	;call to abstracted procedure
  5813  0DC5  1903               	skipnz
  5814  0DC6  023D               	subwf	_GetADC+15,w
  5815  0DC7  1C03               	skipc
  5816  0DC8  2DF0               	goto	l15411
  5817                           
  5818                           ;modular.c: 112: {
  5819                           ;modular.c: 113: GetADC.PercentSubCount = 0;
  5820  0DC9  01BD               	clrf	_GetADC+15
  5821  0DCA  01BE               	clrf	_GetADC+16
  5822  0DCB  2DF0               	goto	l15411
  5823  0DCC                     l15395:	
  5824                           
  5825                           ;modular.c: 117: else
  5826                           ;modular.c: 118: {
  5827                           ;modular.c: 119: GetADC.PercentSubCount = 0;
  5828  0DCC  01BD               	clrf	_GetADC+15
  5829  0DCD  01BE               	clrf	_GetADC+16
  5830                           
  5831                           ;modular.c: 121: SysInfoFlag.bits.b1 = 1;
  5832  0DCE  14AB               	bsf	_SysInfoFlag,1
  5833                           
  5834                           ;modular.c: 123: if(SysInfoFlag.bits.b3 == 0 && GetADC.BatteryVoltage < 4020)
  5835  0DCF  19AB               	btfsc	_SysInfoFlag,3
  5836  0DD0  2DEA               	goto	l15405
  5837  0DD1  300F               	movlw	15
  5838  0DD2  0233               	subwf	_GetADC+5,w
  5839  0DD3  30B4               	movlw	180
  5840  0DD4  1903               	skipnz
  5841  0DD5  0232               	subwf	_GetADC+4,w
  5842  0DD6  1803               	skipnc
  5843  0DD7  2DEA               	goto	l15405
  5844                           
  5845                           ;modular.c: 124: {
  5846                           ;modular.c: 125: if(GetADC.BatteryVoltage >= (D_BatVol_Table[GetADC.BatteryPercent] ))
  5847  0DD8  1003               	clrc
  5848  0DD9  0D3A               	rlf	_GetADC+12,w
  5849  0DDA  26AD               	fcall	PL3	;call to abstracted procedure
  5850  0DDB  118A  2600  158A   	fcall	stringtab
  5851  0DDE  00C5               	movwf	??_UpdateElectricityGrade
  5852  0DDF  118A  2600  158A   	fcall	stringtab
  5853  0DE2  00C6               	movwf	??_UpdateElectricityGrade+1
  5854  0DE3  0233               	subwf	_GetADC+5,w
  5855  0DE4  1D03               	skipz
  5856  0DE5  2DE8               	goto	u2505
  5857  0DE6  0845               	movf	??_UpdateElectricityGrade,w
  5858  0DE7  0232               	subwf	_GetADC+4,w
  5859  0DE8                     u2505:	
  5860  0DE8  1C03               	skipc
  5861  0DE9  2DEE               	goto	l15407
  5862  0DEA                     l15405:	
  5863                           
  5864                           ;modular.c: 126: {
  5865                           ;modular.c: 127: GetADC.PercentAddCount++;
  5866  0DEA  0ABB               	incf	_GetADC+13,f
  5867  0DEB  1903               	skipnz
  5868  0DEC  0ABC               	incf	_GetADC+14,f
  5869                           
  5870                           ;modular.c: 128: }
  5871  0DED  2DF0               	goto	l15411
  5872  0DEE                     l15407:	
  5873                           
  5874                           ;modular.c: 129: else
  5875                           ;modular.c: 130: {
  5876                           ;modular.c: 131: GetADC.PercentAddCount = 0;
  5877  0DEE  01BB               	clrf	_GetADC+13
  5878  0DEF  01BC               	clrf	_GetADC+14
  5879  0DF0                     l15411:	
  5880                           
  5881                           ;modular.c: 137: }
  5882                           ;modular.c: 138: }
  5883                           ;modular.c: 140: if(GetADC.BatteryPercent >= 10 && GetADC.BatteryPercent < 90) temp_Time
      +                          Up = 3000;
  5884  0DF0  300A               	movlw	10
  5885  0DF1  023A               	subwf	_GetADC+12,w
  5886  0DF2  1C03               	skipc
  5887  0DF3  2DFC               	goto	l15417
  5888  0DF4  305A               	movlw	90
  5889  0DF5  023A               	subwf	_GetADC+12,w
  5890  0DF6  1803               	skipnc
  5891  0DF7  2DFC               	goto	l15417
  5892  0DF8  30B8               	movlw	184
  5893  0DF9  00C8               	movwf	UpdateElectricityGrade@temp_TimeUp
  5894  0DFA  300B               	movlw	11
  5895  0DFB  2DFF               	goto	L12
  5896  0DFC                     l15417:	
  5897                           
  5898                           ;modular.c: 141: else temp_TimeUp = 4000;
  5899  0DFC  30A0               	movlw	160
  5900  0DFD  00C8               	movwf	UpdateElectricityGrade@temp_TimeUp
  5901  0DFE  300F               	movlw	15
  5902  0DFF                     L12:	
  5903  0DFF  00C9               	movwf	UpdateElectricityGrade@temp_TimeUp+1
  5904                           
  5905                           ;modular.c: 142: if(GetADC.PercentAddCount >= temp_TimeUp)
  5906  0E00  023C               	subwf	_GetADC+14,w
  5907  0E01  1D03               	skipz
  5908  0E02  2E05               	goto	u2535
  5909  0E03  0848               	movf	UpdateElectricityGrade@temp_TimeUp,w
  5910  0E04  023B               	subwf	_GetADC+13,w
  5911  0E05                     u2535:	
  5912  0E05  1C03               	skipc
  5913  0E06  0008               	return
  5914  0E07  3064               	movlw	100
  5915                           
  5916                           ;modular.c: 143: {
  5917                           ;modular.c: 144: GetADC.PercentAddCount = 0;
  5918  0E08  01BB               	clrf	_GetADC+13
  5919  0E09  01BC               	clrf	_GetADC+14
  5920                           
  5921                           ;modular.c: 145: if(GetADC.BatteryPercent < 100) GetADC.BatteryPercent++;
  5922  0E0A  023A               	subwf	_GetADC+12,w
  5923  0E0B  1C03               	btfss	3,0
  5924  0E0C  0ABA               	incf	_GetADC+12,f
  5925                           
  5926                           ;modular.c: 147: if(GetADC.BatteryPercent) VoutInfoFlag.bits.b3 = 0;
  5927  0E0D  083A               	movf	_GetADC+12,w
  5928  0E0E  1D03               	skipz
  5929  0E0F  11AC               	bcf	_VoutInfoFlag,3
  5930  0E10  0008               	return
  5931  0E11                     l15429:	
  5932  0E11  3002               	movlw	2
  5933                           
  5934                           ;modular.c: 150: else
  5935                           ;modular.c: 151: {
  5936                           ;modular.c: 152: GetADC.PercentAddCount = 0;
  5937  0E12  01BB               	clrf	_GetADC+13
  5938  0E13  01BC               	clrf	_GetADC+14
  5939                           
  5940                           ;modular.c: 154: if(GetADC.BatteryPercent >= 2)
  5941  0E14  023A               	subwf	_GetADC+12,w
  5942  0E15  1C03               	skipc
  5943  0E16  2E71               	goto	l15459
  5944                           
  5945                           ;modular.c: 155: {
  5946                           ;modular.c: 156: if(GetADC.BatteryVoltage < D_BatVol_Table[GetADC.BatteryPercent])
  5947  0E17  1003               	clrc
  5948  0E18  0D3A               	rlf	_GetADC+12,w
  5949  0E19  26AD               	fcall	PL3	;call to abstracted procedure
  5950  0E1A  118A  2600  158A   	fcall	stringtab
  5951  0E1D  00C5               	movwf	??_UpdateElectricityGrade
  5952  0E1E  118A  2600  158A   	fcall	stringtab
  5953  0E21  00C6               	movwf	??_UpdateElectricityGrade+1
  5954  0E22  0233               	subwf	_GetADC+5,w
  5955  0E23  1D03               	skipz
  5956  0E24  2E27               	goto	u2575
  5957  0E25  0845               	movf	??_UpdateElectricityGrade,w
  5958  0E26  0232               	subwf	_GetADC+4,w
  5959  0E27                     u2575:	
  5960  0E27  1803               	skipnc
  5961  0E28  2E2D               	goto	l15437
  5962                           
  5963                           ;modular.c: 157: {
  5964                           ;modular.c: 158: GetADC.PercentSubCount++;
  5965  0E29  0ABD               	incf	_GetADC+15,f
  5966  0E2A  1903               	skipnz
  5967  0E2B  0ABE               	incf	_GetADC+16,f
  5968                           
  5969                           ;modular.c: 159: }
  5970  0E2C  2E2F               	goto	l15439
  5971  0E2D                     l15437:	
  5972                           
  5973                           ;modular.c: 160: else
  5974                           ;modular.c: 161: {
  5975                           ;modular.c: 162: GetADC.PercentSubCount = 0;
  5976  0E2D  01BD               	clrf	_GetADC+15
  5977  0E2E  01BE               	clrf	_GetADC+16
  5978  0E2F                     l15439:	
  5979                           
  5980                           ;modular.c: 163: }
  5981                           ;modular.c: 165: if(GetADC.PercentSubCount >= 100)
  5982  0E2F  3000               	movlw	0
  5983  0E30  023E               	subwf	_GetADC+16,w
  5984  0E31  3064               	movlw	100
  5985  0E32  1903               	skipnz
  5986  0E33  023D               	subwf	_GetADC+15,w
  5987  0E34  1C03               	skipc
  5988  0E35  0008               	return
  5989                           
  5990                           ;modular.c: 166: {
  5991                           ;modular.c: 167: GetADC.PercentSubCount = 0;
  5992  0E36  01BD               	clrf	_GetADC+15
  5993  0E37  01BE               	clrf	_GetADC+16
  5994                           
  5995                           ;modular.c: 169: temp_Percent = GetADC.BatteryPercent;
  5996  0E38  083A               	movf	_GetADC+12,w
  5997  0E39  00CA               	movwf	UpdateElectricityGrade@temp_Percent
  5998  0E3A                     l15451:	
  5999                           ;modular.c: 170: while(temp_Percent)
  6000                           
  6001  0E3A  08CA               	movf	UpdateElectricityGrade@temp_Percent,f
  6002  0E3B  1903               	btfsc	3,2
  6003  0E3C  2E50               	goto	l15453
  6004                           
  6005                           ;modular.c: 171: {
  6006                           ;modular.c: 172: temp_Percent--;
  6007  0E3D  03CA               	decf	UpdateElectricityGrade@temp_Percent,f
  6008                           
  6009                           ;modular.c: 173: if(GetADC.BatteryVoltage >= D_BatVol_Table[temp_Percent]) break;
  6010  0E3E  1003               	clrc
  6011  0E3F  0D4A               	rlf	UpdateElectricityGrade@temp_Percent,w
  6012  0E40  26AD               	fcall	PL3	;call to abstracted procedure
  6013  0E41  118A  2600  158A   	fcall	stringtab
  6014  0E44  00C5               	movwf	??_UpdateElectricityGrade
  6015  0E45  118A  2600  158A   	fcall	stringtab
  6016  0E48  00C6               	movwf	??_UpdateElectricityGrade+1
  6017  0E49  0233               	subwf	_GetADC+5,w
  6018  0E4A  1D03               	skipz
  6019  0E4B  2E4E               	goto	u2595
  6020  0E4C  0845               	movf	??_UpdateElectricityGrade,w
  6021  0E4D  0232               	subwf	_GetADC+4,w
  6022  0E4E                     u2595:	
  6023  0E4E  1C03               	skipc
  6024  0E4F  2E3A               	goto	l15451
  6025  0E50                     l15453:	
  6026                           
  6027                           ;modular.c: 174: }
  6028                           ;modular.c: 176: if((temp_Percent + 30) < GetADC.BatteryPercent)
  6029  0E50  084A               	movf	UpdateElectricityGrade@temp_Percent,w
  6030  0E51  3E1E               	addlw	30
  6031  0E52  00C5               	movwf	??_UpdateElectricityGrade
  6032  0E53  3000               	movlw	0
  6033  0E54  1803               	skipnc
  6034  0E55  3001               	movlw	1
  6035  0E56  00C6               	movwf	??_UpdateElectricityGrade+1
  6036  0E57  3A80               	xorlw	128
  6037  0E58  00C7               	movwf	??_UpdateElectricityGrade+2
  6038  0E59  3080               	movlw	128
  6039  0E5A  0247               	subwf	??_UpdateElectricityGrade+2,w
  6040  0E5B  1D03               	skipz
  6041  0E5C  2E5F               	goto	u2615
  6042  0E5D  083A               	movf	_GetADC+12,w
  6043  0E5E  0245               	subwf	??_UpdateElectricityGrade,w
  6044  0E5F                     u2615:	
  6045  0E5F  1803               	skipnc
  6046  0E60  0008               	return
  6047                           
  6048                           ;modular.c: 177: {
  6049                           ;modular.c: 178: GetADC.BatteryPercent = temp_Percent;
  6050  0E61  1283               	bcf	3,5	;RP0=0, select bank0
  6051  0E62  1303               	bcf	3,6	;RP1=0, select bank0
  6052  0E63  084A               	movf	UpdateElectricityGrade@temp_Percent,w
  6053  0E64  00BA               	movwf	_GetADC+12
  6054  0E65  2E6F               	goto	l15457
  6055  0E66                     l15461:	
  6056                           
  6057                           ;modular.c: 189: {
  6058                           ;modular.c: 190: GetADC.PercentSubCount++;
  6059                           
  6060                           ;modular.c: 191: if(GetADC.PercentSubCount >= 100)
  6061  0E66  26B4  158A         	fcall	PL7	;call to abstracted procedure
  6062  0E68  1903               	skipnz
  6063  0E69  023D               	subwf	_GetADC+15,w
  6064  0E6A  1C03               	skipc
  6065  0E6B  0008               	return
  6066                           
  6067                           ;modular.c: 192: {
  6068                           ;modular.c: 193: GetADC.PercentSubCount = 0;
  6069  0E6C  01BD               	clrf	_GetADC+15
  6070  0E6D  01BE               	clrf	_GetADC+16
  6071  0E6E                     L13:	
  6072                           
  6073                           ;modular.c: 194: GetADC.BatteryPercent = 0;
  6074  0E6E  01BA               	clrf	_GetADC+12
  6075  0E6F                     l15457:	
  6076                           
  6077                           ;modular.c: 180: SysInfoFlag.bits.b1 = 1;
  6078  0E6F  14AB               	bsf	_SysInfoFlag,1
  6079  0E70  0008               	return
  6080  0E71                     l15459:	
  6081                           
  6082                           ;modular.c: 186: else
  6083                           ;modular.c: 187: {
  6084                           ;modular.c: 188: if(GetADC.BatteryVoltage < 3250)
  6085  0E71  300C               	movlw	12
  6086  0E72  0233               	subwf	_GetADC+5,w
  6087  0E73  30B2               	movlw	178
  6088  0E74  1903               	skipnz
  6089  0E75  0232               	subwf	_GetADC+4,w
  6090  0E76  1C03               	btfss	3,0
  6091  0E77  2E66               	goto	l15461
  6092  0E78  300C               	movlw	12
  6093                           
  6094                           ;modular.c: 199: else
  6095                           ;modular.c: 200: {
  6096                           ;modular.c: 201: GetADC.PercentSubCount = 0;
  6097  0E79  01BD               	clrf	_GetADC+15
  6098  0E7A  01BE               	clrf	_GetADC+16
  6099                           
  6100                           ;modular.c: 202: if(GetADC.BatteryVoltage < 3300 )
  6101  0E7B  0233               	subwf	_GetADC+5,w
  6102  0E7C  30E4               	movlw	228
  6103  0E7D  1903               	skipnz
  6104  0E7E  0232               	subwf	_GetADC+4,w
  6105  0E7F  1803               	skipnc
  6106  0E80  0008               	return
  6107  0E81  2E6E               	goto	L13
  6108  0E82                     l15477:	
  6109                           ;modular.c: 207: }
  6110                           ;modular.c: 208: }
  6111                           ;modular.c: 209: }
  6112                           ;modular.c: 210: }
  6113                           ;modular.c: 211: }
  6114                           ;modular.c: 212: }
  6115                           
  6116                           ;modular.c: 203: {
  6117                           ;modular.c: 204: GetADC.BatteryPercent = 0;
  6118                           
  6119                           
  6120                           ;modular.c: 213: else
  6121                           ;modular.c: 214: {
  6122                           ;modular.c: 215: if(RunEventLED.EmEvent != 16)
  6123  0E82  0844               	movf	_RunEventLED+3,w
  6124  0E83  3A10               	xorlw	16
  6125  0E84  1903               	skipnz
  6126  0E85  2EA8               	goto	l15495
  6127                           
  6128                           ;modular.c: 216: {
  6129                           ;modular.c: 217: SysInfoFlag.bits.b5 = 1;
  6130  0E86  16AB               	bsf	_SysInfoFlag,5
  6131                           
  6132                           ;modular.c: 218: GetADC.PercentAddCount = 0;
  6133  0E87  01BB               	clrf	_GetADC+13
  6134  0E88  01BC               	clrf	_GetADC+14
  6135                           
  6136                           ;modular.c: 219: GetADC.PercentSubCount = 0;
  6137  0E89  01BD               	clrf	_GetADC+15
  6138  0E8A  01BE               	clrf	_GetADC+16
  6139                           
  6140                           ;modular.c: 220: SysInfoFlag.bits.b1 = 1;
  6141  0E8B  14AB               	bsf	_SysInfoFlag,1
  6142                           
  6143                           ;modular.c: 221: for(GetADC.BatteryPercent = 0;GetADC.BatteryPercent<100;GetADC.BatteryP
      +                          ercent++)
  6144  0E8C  01BA               	clrf	_GetADC+12
  6145  0E8D                     l15491:	
  6146  0E8D  3064               	movlw	100
  6147  0E8E  023A               	subwf	_GetADC+12,w
  6148  0E8F  1803               	btfsc	3,0
  6149  0E90  2EA5               	goto	l15493
  6150                           
  6151                           ;modular.c: 222: {
  6152                           ;modular.c: 223: if(GetADC.BatteryVoltageOld < D_BatVol_Table[GetADC.BatteryPercent]) br
      +                          eak;
  6153  0E91  1003               	clrc
  6154  0E92  0D3A               	rlf	_GetADC+12,w
  6155  0E93  26AD               	fcall	PL3	;call to abstracted procedure
  6156  0E94  118A  2600  158A   	fcall	stringtab
  6157  0E97  00C5               	movwf	??_UpdateElectricityGrade
  6158  0E98  118A  2600  158A   	fcall	stringtab
  6159  0E9B  00C6               	movwf	??_UpdateElectricityGrade+1
  6160  0E9C  0240               	subwf	_GetADC+18,w
  6161  0E9D  1D03               	skipz
  6162  0E9E  2EA1               	goto	u2665
  6163  0E9F  0845               	movf	??_UpdateElectricityGrade,w
  6164  0EA0  023F               	subwf	_GetADC+17,w
  6165  0EA1                     u2665:	
  6166  0EA1  1C03               	btfss	3,0
  6167  0EA2  2EA5               	goto	l15493
  6168  0EA3  0ABA               	incf	_GetADC+12,f
  6169  0EA4  2E8D               	goto	l15491
  6170  0EA5                     l15493:	
  6171                           
  6172                           ;modular.c: 224: }
  6173                           ;modular.c: 226: GetADC.BatteryLevel = GetADC.BatteryPercent;
  6174  0EA5  083A               	movf	_GetADC+12,w
  6175  0EA6  00AF               	movwf	_GetADC+1
  6176                           
  6177                           ;modular.c: 227: }
  6178  0EA7  0008               	return
  6179  0EA8                     l15495:	
  6180                           
  6181                           ;modular.c: 228: else
  6182                           ;modular.c: 229: {
  6183                           ;modular.c: 230: GetADC.BatteryVoltageOld = GetADC.BatteryVoltage;
  6184  0EA8  0833               	movf	_GetADC+5,w
  6185  0EA9  00C0               	movwf	_GetADC+18
  6186  0EAA  0832               	movf	_GetADC+4,w
  6187  0EAB  00BF               	movwf	_GetADC+17
  6188  0EAC  0008               	return
  6189  0EAD                     __end_of_UpdateElectricityGrade:	
  6190  0EAD                     PL3:	
  6191  0EAD  3E12               	addlw	low (_D_BatVol_Table| (0+32768))
  6192  0EAE  0084               	movwf	4
  6193  0EAF  3086               	movlw	high (_D_BatVol_Table| (0+32768))
  6194  0EB0  1803               	skipnc
  6195  0EB1  3E01               	addlw	1
  6196  0EB2  00FF               	movwf	127
  6197  0EB3  0008               	return
  6198  0EB4                     PL7:	
  6199  0EB4  0ABD               	incf	_GetADC+15,f
  6200  0EB5  1903               	skipnz
  6201  0EB6  0ABE               	incf	_GetADC+16,f
  6202  0EB7  3000               	movlw	0
  6203  0EB8  023E               	subwf	_GetADC+16,w
  6204  0EB9  3464               	retlw	100
  6205                           
  6206                           	psect	text751
  6207  07D1                     __ptext751:	
  6208 ;; =============== function _HAL_ADC_Sample ends ============
  6209                           
  6210                           
  6211 ;; *************** function _ClearAllRAM *****************
  6212 ;; Defined at:
  6213 ;;		line 247 in file "E:\workSpace\git_work\jm\P2\code\init.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;		None
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;		None
  6218 ;; Return value:  Size  Location     Type
  6219 ;;		None               void
  6220 ;; Registers used:
  6221 ;;		wreg, status,2, status,0
  6222 ;; Tracked objects:
  6223 ;;		On entry : 60/40
  6224 ;;		On exit  : 20/0
  6225 ;;		Unchanged: FFF9F/0
  6226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  6227 ;;      Params:         0       0       0       0       0       0
  6228 ;;      Locals:         0       0       0       0       0       0
  6229 ;;      Temps:          0       0       0       0       0       0
  6230 ;;      Totals:         0       0       0       0       0       0
  6231 ;;Total ram usage:        0 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; Hardware stack levels required when called:    3
  6234 ;; This function calls:
  6235 ;;		Nothing
  6236 ;; This function is called by:
  6237 ;;		_main
  6238 ;; This function uses a non-reentrant model
  6239 ;;
  6240  07D1                     _ClearAllRAM:	
  6241  07D1  3020               	movlw	32
  6242                           
  6243                           ;init.c: 248: IRP = 0;
  6244                           
  6245                           ; Regs used in _ClearAllRAM: [wreg+status,2+status,0]
  6246  07D2  1383               	bcf	3,7
  6247                           
  6248                           ;init.c: 249: for(FSR = 0x20; FSR < 0x80; FSR++)
  6249  07D3  0084               	movwf	4	;volatile
  6250  07D4                     L14:	
  6251  07D4  3080               	movlw	128
  6252  07D5  0204               	subwf	4,w	;volatile
  6253  07D6  1803               	btfsc	3,0
  6254  07D7  2FDC               	goto	l15315
  6255                           
  6256                           ;init.c: 250: {
  6257                           ;init.c: 251: INDF = 0;
  6258  07D8  1303               	bcf	3,6	;RP1=0, select bank0
  6259  07D9  0180               	clrf	0	;volatile
  6260  07DA  0A84               	incf	4,f	;volatile
  6261  07DB  2FD4               	goto	L14
  6262  07DC                     l15315:	
  6263                           
  6264                           ;init.c: 252: }
  6265                           ;init.c: 254: for(FSR = 0xA0; FSR < 0xF0; FSR++)
  6266  07DC  30A0               	movlw	160
  6267  07DD  0084               	movwf	4	;volatile
  6268  07DE                     L15:	
  6269  07DE  30F0               	movlw	240
  6270  07DF  0204               	subwf	4,w	;volatile
  6271  07E0  1803               	btfsc	3,0
  6272  07E1  2FE6               	goto	l3299
  6273                           
  6274                           ;init.c: 255: {
  6275                           ;init.c: 256: INDF = 0;
  6276  07E2  1303               	bcf	3,6	;RP1=0, select bank0
  6277  07E3  0180               	clrf	0	;volatile
  6278  07E4  0A84               	incf	4,f	;volatile
  6279  07E5  2FDE               	goto	L15
  6280  07E6                     l3299:	
  6281  07E6  3020               	movlw	32
  6282                           
  6283                           ;init.c: 257: }
  6284                           ;init.c: 259: IRP = 1;
  6285  07E7  1783               	bsf	3,7
  6286                           
  6287                           ;init.c: 260: for(FSR = 0x20; FSR < 0x60; FSR++)
  6288  07E8  0084               	movwf	4	;volatile
  6289  07E9                     L16:	
  6290  07E9  3060               	movlw	96
  6291  07EA  0204               	subwf	4,w	;volatile
  6292  07EB  1803               	btfsc	3,0
  6293  07EC  2FF1               	goto	l3301
  6294                           
  6295                           ;init.c: 261: {
  6296                           ;init.c: 262: INDF = 0;
  6297  07ED  1303               	bcf	3,6	;RP1=0, select bank0
  6298  07EE  0180               	clrf	0	;volatile
  6299  07EF  0A84               	incf	4,f	;volatile
  6300  07F0  2FE9               	goto	L16
  6301  07F1                     l3301:	
  6302                           
  6303                           ;init.c: 263: }
  6304                           ;init.c: 266: IRP = 0;RP0 = 0;RP1 = 0;
  6305  07F1  1383               	bcf	3,7
  6306  07F2  1283               	bcf	3,5
  6307  07F3  1303               	bcf	3,6
  6308  07F4  0008               	return
  6309  07F5                     __end_of_ClearAllRAM:	
  6310                           
  6311                           	psect	text758
  6312  040D                     __ptext758:	
  6313 ;; =============== function _InitGpio ends ============
  6314                           
  6315                           
  6316 ;; *************** function _Interrupt_ISR *****************
  6317 ;; Defined at:
  6318 ;;		line 180 in file "E:\workSpace\git_work\jm\P2\code\main.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;		None
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;		None
  6323 ;; Return value:  Size  Location     Type
  6324 ;;		None               void
  6325 ;; Registers used:
  6326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 60/0
  6330 ;;		Unchanged: FFE9F/0
  6331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  6332 ;;      Params:         0       0       0       0       0       0
  6333 ;;      Locals:         0       0       0       0       0       0
  6334 ;;      Temps:          4       0       0       0       0       0
  6335 ;;      Totals:         4       0       0       0       0       0
  6336 ;;Total ram usage:        4 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    2
  6339 ;; This function calls:
  6340 ;;		_led_matrix_run
  6341 ;;		_SmokeOut
  6342 ;; This function is called by:
  6343 ;;		Interrupt level 1
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346  040D                     _Interrupt_ISR:	
  6347                           
  6348                           ;main.c: 181: if(CMPIF != 0)
  6349  040D  1E0E               	btfss	14,4
  6350  040E  2C17               	goto	i1l1671
  6351                           
  6352                           ;main.c: 182: {
  6353                           ;main.c: 183: if(VoutInfoFlag.bits.b7 != 0 && VoutInfoFlag.bits.b6 == 0)
  6354  040F  1BAC               	btfsc	_VoutInfoFlag,7
  6355  0410  1B2C               	btfsc	_VoutInfoFlag,6
  6356  0411  2C15               	goto	i1l1672
  6357                           
  6358                           ;main.c: 184: {
  6359                           ;main.c: 185: PAD4 = 1;
  6360  0412  1605               	bsf	5,4
  6361                           
  6362                           ;main.c: 186: PAD2 = 1;
  6363  0413  1505               	bsf	5,2
  6364                           
  6365                           ;main.c: 187: VoutInfoFlag.bits.b6 = 1;
  6366  0414  172C               	bsf	_VoutInfoFlag,6
  6367  0415                     i1l1672:	
  6368                           
  6369                           ;main.c: 188: }
  6370                           ;main.c: 190: CMPIF = 0;
  6371  0415  120E               	bcf	14,4
  6372                           
  6373                           ;main.c: 191: }
  6374  0416  2C47               	goto	i1l1690
  6375  0417                     i1l1671:	
  6376                           
  6377                           ;main.c: 192: else if(LVDIF != 0)
  6378  0417  1C0E               	btfss	14,0
  6379  0418  2C24               	goto	i1l1674
  6380                           
  6381                           ;main.c: 193: {
  6382                           ;main.c: 194: if(((VoutInfoFlag.bits.b7 != 0) || (LVDIE != 0)) && VoutInfoFlag.bits.b6 =
      +                          = 0)
  6383  0419  1BAC               	btfsc	_VoutInfoFlag,7
  6384  041A  2C1D               	goto	i1l1677
  6385  041B  1C0D               	btfss	13,0
  6386  041C  2C22               	goto	i1l1675
  6387  041D                     i1l1677:	
  6388  041D  1B2C               	btfsc	_VoutInfoFlag,6
  6389  041E  2C22               	goto	i1l1675
  6390                           
  6391                           ;main.c: 195: {
  6392                           ;main.c: 196: PAD4 = 1;
  6393  041F  1605               	bsf	5,4
  6394                           
  6395                           ;main.c: 197: PAD2 = 1;
  6396  0420  1505               	bsf	5,2
  6397                           
  6398                           ;main.c: 198: VoutInfoFlag.bits.b6 = 1;
  6399  0421  172C               	bsf	_VoutInfoFlag,6
  6400  0422                     i1l1675:	
  6401                           
  6402                           ;main.c: 199: }
  6403                           ;main.c: 201: LVDIF = 0;
  6404  0422  100E               	bcf	14,0
  6405                           
  6406                           ;main.c: 202: }
  6407  0423  2C47               	goto	i1l1690
  6408  0424                     i1l1674:	
  6409                           
  6410                           ;main.c: 203: else if(TM0IF != 0)
  6411  0424  1E0C               	btfss	12,4
  6412  0425  2C38               	goto	i1l1679
  6413  0426  3064               	movlw	100
  6414                           
  6415                           ;main.c: 204: {
  6416                           ;main.c: 205: TimeCnt.TimeBase++;
  6417  0427  1703               	bsf	3,6	;RP1=1, select bank2
  6418  0428  0AD9               	incf	89,f
  6419                           
  6420                           ;main.c: 206: if(TimeCnt.TimeBase >= 100)
  6421  0429  0259               	subwf	89,w
  6422  042A  1C03               	skipc
  6423  042B  2C2F               	goto	i1l15551
  6424                           
  6425                           ;main.c: 207: {
  6426                           ;main.c: 208: TimeCnt.TimeBase = 0;
  6427  042C  01D9               	clrf	89
  6428                           
  6429                           ;main.c: 209: SysInfoFlag.bits.b6 = 1;
  6430  042D  1303               	bcf	3,6	;RP1=0, select bank0
  6431  042E  172B               	bsf	_SysInfoFlag,6
  6432  042F                     i1l15551:	
  6433                           
  6434                           ;main.c: 210: }
  6435                           ;main.c: 217: led_matrix_run();
  6436  042F  246F  118A         	fcall	_led_matrix_run
  6437                           
  6438                           ;main.c: 218: if(VoutInfoFlag.bits.b7 != 0 && VoutInfoFlag.bits.b6 == 0) SmokeOut();
  6439  0431  1BAC               	btfsc	_VoutInfoFlag,7
  6440  0432  1B2C               	btfsc	_VoutInfoFlag,6
  6441  0433  2C36               	goto	i1l15559
  6442  0434  2452  118A         	fcall	_SmokeOut
  6443  0436                     i1l15559:	
  6444                           
  6445                           ;main.c: 222: TM0IF = 0;
  6446  0436  120C               	bcf	12,4
  6447                           
  6448                           ;main.c: 223: }
  6449  0437  2C47               	goto	i1l1690
  6450  0438                     i1l1679:	
  6451                           
  6452                           ;main.c: 224: else if(INT0IF != 0)
  6453  0438  1C0C               	btfss	12,0
  6454  0439  2C3C               	goto	i1l1683
  6455                           
  6456                           ;main.c: 225: {
  6457                           ;main.c: 226: INT0IF = 0;
  6458  043A  100C               	bcf	12,0
  6459                           
  6460                           ;main.c: 227: }
  6461  043B  2C47               	goto	i1l1690
  6462  043C                     i1l1683:	
  6463                           
  6464                           ;main.c: 228: else if(INT1IF != 0)
  6465  043C  1C8C               	btfss	12,1
  6466  043D  2C40               	goto	i1l1685
  6467                           
  6468                           ;main.c: 229: {
  6469                           ;main.c: 230: INT1IF = 0;
  6470  043E  108C               	bcf	12,1
  6471                           
  6472                           ;main.c: 231: }
  6473  043F  2C47               	goto	i1l1690
  6474  0440                     i1l1685:	
  6475                           
  6476                           ;main.c: 232: else if(INT2IF != 0)
  6477  0440  1D0C               	btfss	12,2
  6478  0441  2C44               	goto	i1l1687
  6479                           
  6480                           ;main.c: 233: {
  6481                           ;main.c: 234: INT2IF = 0;
  6482  0442  110C               	bcf	12,2
  6483                           
  6484                           ;main.c: 235: }
  6485  0443  2C47               	goto	i1l1690
  6486  0444                     i1l1687:	
  6487                           
  6488                           ;main.c: 236: else if (WKTIF != 0)
  6489  0444  1D8C               	btfss	12,3
  6490  0445  2C47               	goto	i1l1690
  6491                           
  6492                           ;main.c: 237: {
  6493                           ;main.c: 238: WKTIF = 0;
  6494  0446  118C               	bcf	12,3
  6495  0447                     i1l1690:	
  6496  0447  087D               	movf	??_Interrupt_ISR+3,w
  6497  0448  00FF               	movwf	127
  6498  0449  087C               	movf	??_Interrupt_ISR+2,w
  6499  044A  008A               	movwf	10
  6500  044B  087B               	movf	??_Interrupt_ISR+1,w
  6501  044C  0084               	movwf	4
  6502  044D  0E7A               	swapf	??_Interrupt_ISR^(0+-128),w
  6503  044E  0083               	movwf	3
  6504  044F  0EFE               	swapf	126,f
  6505  0450  0E7E               	swapf	126,w
  6506  0451  0009               	retfie
  6507  0452                     __end_of_Interrupt_ISR:	
  6508  0452                     __ptext763:	
  6509 ;; =============== function _led_set_io_od ends ============
  6510                           
  6511                           
  6512 ;; *************** function _SmokeOut *****************
  6513 ;; Defined at:
  6514 ;;		line 273 in file "E:\workSpace\git_work\jm\P2\code\modular.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;		None
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;		None
  6519 ;; Return value:  Size  Location     Type
  6520 ;;		None               void
  6521 ;; Registers used:
  6522 ;;		wreg, status,2, status,0
  6523 ;; Tracked objects:
  6524 ;;		On entry : 60/0
  6525 ;;		On exit  : 60/0
  6526 ;;		Unchanged: FFF9F/0
  6527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  6528 ;;      Params:         0       0       0       0       0       0
  6529 ;;      Locals:         0       0       0       0       0       0
  6530 ;;      Temps:          0       0       0       0       0       0
  6531 ;;      Totals:         0       0       0       0       0       0
  6532 ;;Total ram usage:        0 bytes
  6533 ;; Hardware stack levels used:    1
  6534 ;; This function calls:
  6535 ;;		Nothing
  6536 ;; This function is called by:
  6537 ;;		_Interrupt_ISR
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540  0452                     _SmokeOut:	
  6541                           
  6542                           ;modular.c: 274: if(RunPWM.BuckPwmCycleCnt >= 200)
  6543                           
  6544                           ; Regs used in _SmokeOut: [wreg+status,2+status,0]
  6545  0452  30C8               	movlw	200
  6546  0453  0227               	subwf	_RunPWM,w
  6547  0454  1C03               	skipc
  6548  0455  2C5E               	goto	i1l15617
  6549                           
  6550                           ;modular.c: 275: {
  6551                           ;modular.c: 276: RunPWM.BuckPwmCycleCnt = 0;
  6552  0456  01A7               	clrf	_RunPWM
  6553                           
  6554                           ;modular.c: 277: RunPWM.BuckPwmDuty = RunPWM.BuckPwmDutyBuff;
  6555  0457  0829               	movf	_RunPWM+2,w
  6556  0458  00A8               	movwf	_RunPWM+1
  6557                           
  6558                           ;modular.c: 279: if(RunPWM.BuckPwmDuty) PAD4 = 0;
  6559  0459  0828               	movf	_RunPWM+1,w
  6560  045A  1903               	btfsc	3,2
  6561  045B  2C6C               	goto	L17
  6562  045C  1205               	bcf	5,4
  6563  045D  2C6D               	goto	i1l15627
  6564  045E                     i1l15617:	
  6565                           ;modular.c: 280: else PAD4 = 1;
  6566                           
  6567                           
  6568                           ;modular.c: 282: else if(RunPWM.BuckPwmCycleCnt)
  6569  045E  0827               	movf	_RunPWM,w
  6570  045F  1903               	btfsc	3,2
  6571  0460  2C6D               	goto	i1l15627
  6572                           
  6573                           ;modular.c: 283: {
  6574                           ;modular.c: 284: if(RunPWM.BuckPwmCycleCnt < RunPWM.BuckPwmDuty)
  6575  0461  0828               	movf	_RunPWM+1,w
  6576  0462  0227               	subwf	_RunPWM,w
  6577  0463  1803               	skipnc
  6578  0464  2C67               	goto	i1l15623
  6579                           
  6580                           ;modular.c: 285: {
  6581                           ;modular.c: 286: VoutInfoFlag.bits.b1 = 1;
  6582  0465  14AC               	bsf	_VoutInfoFlag,1
  6583                           
  6584                           ;modular.c: 287: }
  6585  0466  2C6D               	goto	i1l15627
  6586  0467                     i1l15623:	
  6587                           
  6588                           ;modular.c: 288: else if(RunPWM.BuckPwmCycleCnt == RunPWM.BuckPwmDuty)
  6589  0467  0828               	movf	_RunPWM+1,w
  6590  0468  0627               	xorwf	_RunPWM,w
  6591  0469  1D03               	skipz
  6592  046A  2C6D               	goto	i1l15627
  6593                           
  6594                           ;modular.c: 289: {
  6595                           ;modular.c: 290: VoutInfoFlag.bits.b1 = 0;
  6596  046B  10AC               	bcf	_VoutInfoFlag,1
  6597  046C                     L17:	
  6598                           
  6599                           ;modular.c: 291: PAD4 = 1;
  6600  046C  1605               	bsf	5,4
  6601  046D                     i1l15627:	
  6602                           
  6603                           ;modular.c: 292: }
  6604                           ;modular.c: 293: }
  6605                           ;modular.c: 294: RunPWM.BuckPwmCycleCnt++;
  6606  046D  0AA7               	incf	_RunPWM,f
  6607  046E  0008               	return
  6608  046F                     __end_of_SmokeOut:	
  6609  046F                     __ptext759:	
  6610 ;; =============== function _Interrupt_ISR ends ============
  6611                           
  6612                           
  6613 ;; *************** function _led_matrix_run *****************
  6614 ;; Defined at:
  6615 ;;		line 58 in file "E:\workSpace\git_work\jm\P2\code\tyw_led.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;		None
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;  rowCount        1    9[COMMON] unsigned char 
  6620 ;;  y               1    8[COMMON] unsigned char 
  6621 ;;  x               1    7[COMMON] unsigned char 
  6622 ;; Return value:  Size  Location     Type
  6623 ;;		None               void
  6624 ;; Registers used:
  6625 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6626 ;; Tracked objects:
  6627 ;;		On entry : 20/40
  6628 ;;		On exit  : 60/0
  6629 ;;		Unchanged: FFE9F/0
  6630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  6631 ;;      Params:         0       0       0       0       0       0
  6632 ;;      Locals:         3       0       0       0       0       0
  6633 ;;      Temps:          4       0       0       0       0       0
  6634 ;;      Totals:         7       0       0       0       0       0
  6635 ;;Total ram usage:        7 bytes
  6636 ;; Hardware stack levels used:    1
  6637 ;; Hardware stack levels required when called:    1
  6638 ;; This function calls:
  6639 ;;		_led_set_io_od
  6640 ;;		___bmul
  6641 ;;		_led_set_io_pp
  6642 ;; This function is called by:
  6643 ;;		_Interrupt_ISR
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646  046F                     _led_matrix_run:	
  6647                           
  6648                           ; Regs used in _led_matrix_run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6649  046F  01F8               	clrf	led_matrix_run@y
  6650                           
  6651                           ;tyw_led.c: 62: uint8_t rowCount = 0;
  6652  0470  01F9               	clrf	led_matrix_run@rowCount
  6653                           
  6654                           ;tyw_led.c: 64: for (rowCount = 0; rowCount < 8; rowCount++)
  6655  0471  01F9               	clrf	led_matrix_run@rowCount
  6656  0472                     i1l15575:	
  6657                           
  6658                           ;tyw_led.c: 65: {
  6659                           ;tyw_led.c: 66: led_set_io_od(rowCount);
  6660  0472  0879               	movf	led_matrix_run@rowCount,w
  6661  0473  256D  118A         	fcall	_led_set_io_od
  6662  0475  3008               	movlw	8
  6663  0476  0AF9               	incf	led_matrix_run@rowCount,f
  6664  0477  0279               	subwf	led_matrix_run@rowCount,w
  6665  0478  1C03               	skipc
  6666  0479  2C72               	goto	i1l15575
  6667                           
  6668                           ;tyw_led.c: 67: }
  6669                           ;tyw_led.c: 69: for (rowCount = 0; rowCount < 3; rowCount++)
  6670  047A  01F9               	clrf	led_matrix_run@rowCount
  6671  047B                     i1l15587:	
  6672                           
  6673                           ;tyw_led.c: 70: {
  6674                           ;tyw_led.c: 72: if (ledShowIndex[row][rowCount][0] == 0)
  6675  047B  3006               	movlw	6
  6676  047C  00F0               	movwf	?___bmul
  6677  047D  1283               	bcf	3,5	;RP0=0, select bank0
  6678  047E  1303               	bcf	3,6	;RP1=0, select bank0
  6679  047F  082D               	movf	led_matrix_run@row,w
  6680  0480  24D8  118A         	fcall	___bmul
  6681  0482  25C4  118A         	fcall	PL2	;call to abstracted procedure
  6682  0484  25CE               	fcall	PL9	;call to abstracted procedure
  6683  0485  118A  2600  118A   	fcall	stringtab
  6684  0488  3800               	iorlw	0
  6685  0489  1903               	btfsc	3,2
  6686  048A  2CD0               	goto	i1l15601
  6687                           
  6688                           ;tyw_led.c: 75: x = ledShowIndex[row][rowCount][0] - 1;
  6689  048B  3006               	movlw	6
  6690  048C  00F0               	movwf	?___bmul
  6691  048D  082D               	movf	led_matrix_run@row,w
  6692  048E  24D8  118A         	fcall	___bmul
  6693  0490  25C4  118A         	fcall	PL2	;call to abstracted procedure
  6694  0492  25CE               	fcall	PL9	;call to abstracted procedure
  6695  0493  118A  2600  118A   	fcall	stringtab
  6696  0496  3EFF               	addlw	255
  6697  0497  00F7               	movwf	led_matrix_run@x
  6698                           
  6699                           ;tyw_led.c: 76: y = ledShowIndex[row][rowCount][1] - 1;
  6700  0498  3006               	movlw	6
  6701  0499  00F0               	movwf	?___bmul
  6702  049A  082D               	movf	led_matrix_run@row,w
  6703  049B  24D8  118A         	fcall	___bmul
  6704  049D  25C4               	fcall	PL2	;call to abstracted procedure
  6705  049E  00F5               	movwf	??_led_matrix_run+2
  6706  049F  0874               	movf	??_led_matrix_run+1,w
  6707  04A0  1803               	skipnc
  6708  04A1  3E01               	addlw	1
  6709  04A2  00F6               	movwf	??_led_matrix_run+3
  6710  04A3  3001               	movlw	1
  6711  04A4  0775               	addwf	??_led_matrix_run+2,w
  6712  04A5  0084               	movwf	4
  6713  04A6  0876               	movf	??_led_matrix_run+3,w
  6714  04A7  1803               	skipnc
  6715  04A8  0A76               	incf	??_led_matrix_run+3,w
  6716  04A9  00FF               	movwf	127
  6717  04AA  118A  2600  118A   	fcall	stringtab
  6718  04AD  3EFF               	addlw	255
  6719  04AE  00F8               	movwf	led_matrix_run@y
  6720                           
  6721                           ;tyw_led.c: 78: if(led_duty_cycles[x][y])
  6722  04AF  0877               	movf	led_matrix_run@x,w
  6723  04B0  00F3               	movwf	??_led_matrix_run
  6724  04B1  30A0               	movlw	_led_duty_cycles& (0+255)
  6725  04B2  1003               	clrc
  6726  04B3  0DF3               	rlf	??_led_matrix_run,f
  6727  04B4  1003               	clrc
  6728  04B5  0DF3               	rlf	??_led_matrix_run,f
  6729  04B6  1003               	clrc
  6730  04B7  0DF3               	rlf	??_led_matrix_run,f
  6731  04B8  0773               	addwf	??_led_matrix_run,w
  6732  04B9  00F4               	movwf	??_led_matrix_run+1
  6733  04BA  0878               	movf	led_matrix_run@y,w
  6734  04BB  0774               	addwf	??_led_matrix_run+1,w
  6735  04BC  00F5               	movwf	??_led_matrix_run+2
  6736  04BD  0084               	movwf	4
  6737  04BE  1783               	bsf	3,7	;select IRP bank3
  6738  04BF  0880               	movf	0,f
  6739  04C0  1903               	skipnz
  6740  04C1  2CCB               	goto	i1l15597
  6741                           
  6742                           ;tyw_led.c: 79: {
  6743                           ;tyw_led.c: 80: led_set_io_pp(x, 0);
  6744  04C2  01F0               	clrf	?_led_set_io_pp
  6745  04C3  0877               	movf	led_matrix_run@x,w
  6746  04C4  24E6  118A         	fcall	_led_set_io_pp
  6747                           
  6748                           ;tyw_led.c: 81: led_set_io_pp(y, 1);
  6749  04C6  01F0               	clrf	?_led_set_io_pp
  6750  04C7  0AF0               	incf	?_led_set_io_pp,f
  6751  04C8  0878               	movf	led_matrix_run@y,w
  6752  04C9  24E6  118A         	fcall	_led_set_io_pp
  6753  04CB                     i1l15597:	
  6754  04CB  3003               	movlw	3
  6755  04CC  0AF9               	incf	led_matrix_run@rowCount,f
  6756  04CD  0279               	subwf	led_matrix_run@rowCount,w
  6757  04CE  1C03               	skipc
  6758  04CF  2C7B               	goto	i1l15587
  6759  04D0                     i1l15601:	
  6760                           
  6761                           ;tyw_led.c: 82: }
  6762                           ;tyw_led.c: 84: }
  6763                           ;tyw_led.c: 85: row++;
  6764  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  6765  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  6766  04D2  0AAD               	incf	led_matrix_run@row,f
  6767                           
  6768                           ;tyw_led.c: 86: if (row == 18)
  6769  04D3  082D               	movf	led_matrix_run@row,w
  6770  04D4  3A12               	xorlw	18
  6771  04D5  1903               	btfsc	3,2
  6772                           
  6773                           ;tyw_led.c: 87: {
  6774                           ;tyw_led.c: 88: row = 0;
  6775  04D6  01AD               	clrf	led_matrix_run@row
  6776  04D7  0008               	return
  6777  04D8                     __end_of_led_matrix_run:	
  6778  04D8                     __ptext760:	
  6779 ;; =============== function _led_matrix_run ends ============
  6780                           
  6781                           
  6782 ;; *************** function ___bmul *****************
  6783 ;; Defined at:
  6784 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\bmul.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;  multiplier      1    wreg     unsigned char 
  6787 ;;  multiplicand    1    0[COMMON] unsigned char 
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;  multiplier      1    2[COMMON] unsigned char 
  6790 ;;  product         1    1[COMMON] unsigned char 
  6791 ;; Return value:  Size  Location     Type
  6792 ;;                  1    wreg      unsigned char 
  6793 ;; Registers used:
  6794 ;;		wreg, status,2, status,0
  6795 ;; Tracked objects:
  6796 ;;		On entry : 60/0
  6797 ;;		On exit  : 60/0
  6798 ;;		Unchanged: FFF9F/0
  6799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  6800 ;;      Params:         1       0       0       0       0       0
  6801 ;;      Locals:         2       0       0       0       0       0
  6802 ;;      Temps:          0       0       0       0       0       0
  6803 ;;      Totals:         3       0       0       0       0       0
  6804 ;;Total ram usage:        3 bytes
  6805 ;; Hardware stack levels used:    1
  6806 ;; This function calls:
  6807 ;;		Nothing
  6808 ;; This function is called by:
  6809 ;;		_led_matrix_run
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812  04D8                     ___bmul:	
  6813                           
  6814                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6815                           ;___bmul@multiplier stored from wreg
  6816  04D8  00F2               	movwf	___bmul@multiplier
  6817  04D9  01F1               	clrf	___bmul@product
  6818  04DA                     i1l15765:	
  6819  04DA  0870               	movf	___bmul@multiplicand,w
  6820  04DB  1872               	btfsc	___bmul@multiplier,0
  6821  04DC  07F1               	addwf	___bmul@product,f
  6822  04DD  1003               	clrc
  6823  04DE  0DF0               	rlf	___bmul@multiplicand,f
  6824  04DF  1003               	clrc
  6825  04E0  0CF2               	rrf	___bmul@multiplier,f
  6826  04E1  08F2               	movf	___bmul@multiplier,f
  6827  04E2  1D03               	skipz
  6828  04E3  2CDA               	goto	i1l15765
  6829  04E4  0871               	movf	___bmul@product,w
  6830  04E5  0008               	return
  6831  04E6                     __end_of___bmul:	
  6832  04E6                     __ptext761:	
  6833 ;; =============== function ___bmul ends ============
  6834                           
  6835                           
  6836 ;; *************** function _led_set_io_pp *****************
  6837 ;; Defined at:
  6838 ;;		line 210 in file "E:\workSpace\git_work\jm\P2\code\tyw_led.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  io_num          1    wreg     unsigned char 
  6841 ;;  type            1    0[COMMON] unsigned char 
  6842 ;; Auto vars:     Size  Location     Type
  6843 ;;  io_num          1    1[COMMON] unsigned char 
  6844 ;; Return value:  Size  Location     Type
  6845 ;;		None               void
  6846 ;; Registers used:
  6847 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6848 ;; Tracked objects:
  6849 ;;		On entry : 100/100
  6850 ;;		On exit  : 100/100
  6851 ;;		Unchanged: FFE9F/0
  6852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  6853 ;;      Params:         1       0       0       0       0       0
  6854 ;;      Locals:         1       0       0       0       0       0
  6855 ;;      Temps:          0       0       0       0       0       0
  6856 ;;      Totals:         2       0       0       0       0       0
  6857 ;;Total ram usage:        2 bytes
  6858 ;; Hardware stack levels used:    1
  6859 ;; This function calls:
  6860 ;;		Nothing
  6861 ;; This function is called by:
  6862 ;;		_led_matrix_run
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865  04E6                     _led_set_io_pp:	
  6866                           
  6867                           ; Regs used in _led_set_io_pp: [wreg-fsr0h+status,2+status,0]
  6868                           ;led_set_io_pp@io_num stored from wreg
  6869  04E6  00F1               	movwf	led_set_io_pp@io_num
  6870                           
  6871                           ;tyw_led.c: 211: switch(io_num)
  6872  04E7  2D60               	goto	i1l15757
  6873  04E8                     i1l15707:	
  6874                           
  6875                           ;tyw_led.c: 214: {PBMOD32= PBMOD32 & 0x0F | 0x60; if(type)PBD3=1;else PBD3=0;};
  6876  04E8  1683               	bsf	3,5	;RP0=1, select bank1
  6877  04E9  1303               	bcf	3,6	;RP1=0, select bank1
  6878  04EA  080D               	movf	13,w
  6879  04EB  390F               	andlw	15
  6880  04EC  3860               	iorlw	96
  6881  04ED  008D               	movwf	13	;volatile
  6882  04EE  0870               	movf	led_set_io_pp@type,w
  6883  04EF  1903               	btfsc	3,2
  6884  04F0  2CF4               	goto	i1l11883
  6885  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  6886  04F2  1586               	bsf	6,3
  6887  04F3  0008               	return
  6888  04F4                     i1l11883:	
  6889  04F4  1283               	bcf	3,5	;RP0=0, select bank0
  6890  04F5  1186               	bcf	6,3
  6891  04F6  0008               	return
  6892  04F7                     i1l15713:	
  6893                           
  6894                           ;tyw_led.c: 218: {PDMOD10= PDMOD10 & 0xF0 | 0x06; if(type)PDD0=1;else PDD0=0;};
  6895  04F7  1683               	bsf	3,5	;RP0=1, select bank1
  6896  04F8  1303               	bcf	3,6	;RP1=0, select bank1
  6897  04F9  0810               	movf	16,w
  6898  04FA  39F0               	andlw	240
  6899  04FB  3806               	iorlw	6
  6900  04FC  0090               	movwf	16	;volatile
  6901  04FD  0870               	movf	led_set_io_pp@type,w
  6902  04FE  1903               	btfsc	3,2
  6903  04FF  2D03               	goto	i1l11887
  6904  0500  1283               	bcf	3,5	;RP0=0, select bank0
  6905  0501  1407               	bsf	7,0
  6906  0502  0008               	return
  6907  0503                     i1l11887:	
  6908  0503  1283               	bcf	3,5	;RP0=0, select bank0
  6909  0504  1007               	bcf	7,0
  6910  0505  0008               	return
  6911  0506                     i1l15719:	
  6912                           
  6913                           ;tyw_led.c: 221: {PDMOD10= PDMOD10 & 0x0F | 0x60; if(type)PDD1=1;else PDD1=0;};
  6914  0506  1683               	bsf	3,5	;RP0=1, select bank1
  6915  0507  1303               	bcf	3,6	;RP1=0, select bank1
  6916  0508  0810               	movf	16,w
  6917  0509  390F               	andlw	15
  6918  050A  3860               	iorlw	96
  6919  050B  0090               	movwf	16	;volatile
  6920  050C  0870               	movf	led_set_io_pp@type,w
  6921  050D  1903               	btfsc	3,2
  6922  050E  2D12               	goto	i1l11890
  6923  050F  1283               	bcf	3,5	;RP0=0, select bank0
  6924  0510  1487               	bsf	7,1
  6925  0511  0008               	return
  6926  0512                     i1l11890:	
  6927  0512  1283               	bcf	3,5	;RP0=0, select bank0
  6928  0513  1087               	bcf	7,1
  6929  0514  0008               	return
  6930  0515                     i1l15725:	
  6931                           
  6932                           ;tyw_led.c: 224: {PBMOD54= PBMOD54 & 0xF0 | 0x06; if(type)PBD4=1;else PBD4=0;};
  6933  0515  1683               	bsf	3,5	;RP0=1, select bank1
  6934  0516  1303               	bcf	3,6	;RP1=0, select bank1
  6935  0517  080E               	movf	14,w
  6936  0518  39F0               	andlw	240
  6937  0519  3806               	iorlw	6
  6938  051A  008E               	movwf	14	;volatile
  6939  051B  0870               	movf	led_set_io_pp@type,w
  6940  051C  1903               	btfsc	3,2
  6941  051D  2D21               	goto	i1l11893
  6942  051E  1283               	bcf	3,5	;RP0=0, select bank0
  6943  051F  1606               	bsf	6,4
  6944  0520  0008               	return
  6945  0521                     i1l11893:	
  6946  0521  1283               	bcf	3,5	;RP0=0, select bank0
  6947  0522  1206               	bcf	6,4
  6948  0523  0008               	return
  6949  0524                     i1l15731:	
  6950                           
  6951                           ;tyw_led.c: 227: {PBMOD54= PBMOD54 & 0x0F | 0x60; if(type)PBD5=1;else PBD5=0;};
  6952  0524  1683               	bsf	3,5	;RP0=1, select bank1
  6953  0525  1303               	bcf	3,6	;RP1=0, select bank1
  6954  0526  080E               	movf	14,w
  6955  0527  390F               	andlw	15
  6956  0528  3860               	iorlw	96
  6957  0529  008E               	movwf	14	;volatile
  6958  052A  0870               	movf	led_set_io_pp@type,w
  6959  052B  1903               	btfsc	3,2
  6960  052C  2D30               	goto	i1l11896
  6961  052D  1283               	bcf	3,5	;RP0=0, select bank0
  6962  052E  1686               	bsf	6,5
  6963  052F  0008               	return
  6964  0530                     i1l11896:	
  6965  0530  1283               	bcf	3,5	;RP0=0, select bank0
  6966  0531  1286               	bcf	6,5
  6967  0532  0008               	return
  6968  0533                     i1l15737:	
  6969                           
  6970                           ;tyw_led.c: 230: {PBMOD76= PBMOD76 & 0xF0 | 0x06; if(type)PBD6=1;else PBD6=0;};
  6971  0533  1683               	bsf	3,5	;RP0=1, select bank1
  6972  0534  1303               	bcf	3,6	;RP1=0, select bank1
  6973  0535  080F               	movf	15,w
  6974  0536  39F0               	andlw	240
  6975  0537  3806               	iorlw	6
  6976  0538  008F               	movwf	15	;volatile
  6977  0539  0870               	movf	led_set_io_pp@type,w
  6978  053A  1903               	btfsc	3,2
  6979  053B  2D3F               	goto	i1l11899
  6980  053C  1283               	bcf	3,5	;RP0=0, select bank0
  6981  053D  1706               	bsf	6,6
  6982  053E  0008               	return
  6983  053F                     i1l11899:	
  6984  053F  1283               	bcf	3,5	;RP0=0, select bank0
  6985  0540  1306               	bcf	6,6
  6986  0541  0008               	return
  6987  0542                     i1l15743:	
  6988                           
  6989                           ;tyw_led.c: 233: {PBMOD76= PBMOD76 & 0x0F | 0x60; if(type)PBD7=1;else PBD7=0;};
  6990  0542  1683               	bsf	3,5	;RP0=1, select bank1
  6991  0543  1303               	bcf	3,6	;RP1=0, select bank1
  6992  0544  080F               	movf	15,w
  6993  0545  390F               	andlw	15
  6994  0546  3860               	iorlw	96
  6995  0547  008F               	movwf	15	;volatile
  6996  0548  0870               	movf	led_set_io_pp@type,w
  6997  0549  1903               	btfsc	3,2
  6998  054A  2D4E               	goto	i1l11902
  6999  054B  1283               	bcf	3,5	;RP0=0, select bank0
  7000  054C  1786               	bsf	6,7
  7001  054D  0008               	return
  7002  054E                     i1l11902:	
  7003  054E  1283               	bcf	3,5	;RP0=0, select bank0
  7004  054F  1386               	bcf	6,7
  7005  0550  0008               	return
  7006  0551                     i1l15749:	
  7007                           
  7008                           ;tyw_led.c: 236: {PBMOD10= PBMOD10 & 0xF0 | 0x06; if(type)PBD0=1;else PBD0=0;};
  7009  0551  1683               	bsf	3,5	;RP0=1, select bank1
  7010  0552  1303               	bcf	3,6	;RP1=0, select bank1
  7011  0553  080C               	movf	12,w
  7012  0554  39F0               	andlw	240
  7013  0555  3806               	iorlw	6
  7014  0556  008C               	movwf	12	;volatile
  7015  0557  0870               	movf	led_set_io_pp@type,w
  7016  0558  1903               	btfsc	3,2
  7017  0559  2D5D               	goto	i1l11905
  7018  055A  1283               	bcf	3,5	;RP0=0, select bank0
  7019  055B  1406               	bsf	6,0
  7020  055C  0008               	return
  7021  055D                     i1l11905:	
  7022  055D  1283               	bcf	3,5	;RP0=0, select bank0
  7023  055E  1006               	bcf	6,0
  7024  055F  0008               	return
  7025  0560                     i1l15757:	
  7026  0560  0871               	movf	led_set_io_pp@io_num,w
  7027                           
  7028                           ; Switch size 1, requested type "space"
  7029                           ; Number of cases is 8, Range of values is 0 to 7
  7030                           ; switch strategies available:
  7031                           ; Name         Instructions Cycles
  7032                           ; direct_byte           23     7 (fixed)
  7033                           ; simple_byte           25    13 (average)
  7034                           ; jumptable            260     6 (fixed)
  7035                           ; rangetable            12     6 (fixed)
  7036                           ; spacedrange           22     9 (fixed)
  7037                           ; locatedrange           8     3 (fixed)
  7038                           ;	Chosen strategy is direct_byte
  7039  0561  0084               	movwf	4
  7040  0562  3008               	movlw	8
  7041  0563  0204               	subwf	4,w
  7042  0564  1803               	skipnc
  7043  0565  0008               	return
  7044  0566  3005               	movlw	high i1S16677
  7045  0567  008A               	movwf	10
  7046  0568  1003               	clrc
  7047  0569  0D04               	rlf	4,w
  7048  056A  3EEA               	addlw	low i1S16677
  7049  056B  0082               	movwf	2
  7050  056C  0008               	return
  7051  056D                     __end_of_led_set_io_pp:	
  7052  056D                     __ptext762:	
  7053 ;; =============== function _led_set_io_pp ends ============
  7054                           
  7055                           
  7056 ;; *************** function _led_set_io_od *****************
  7057 ;; Defined at:
  7058 ;;		line 175 in file "E:\workSpace\git_work\jm\P2\code\tyw_led.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;  io_num          1    wreg     unsigned char 
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;  io_num          1    0[COMMON] unsigned char 
  7063 ;; Return value:  Size  Location     Type
  7064 ;;		None               void
  7065 ;; Registers used:
  7066 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/40
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: FFF9F/0
  7071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3  BANK2h  BANK2l
  7072 ;;      Params:         0       0       0       0       0       0
  7073 ;;      Locals:         1       0       0       0       0       0
  7074 ;;      Temps:          0       0       0       0       0       0
  7075 ;;      Totals:         1       0       0       0       0       0
  7076 ;;Total ram usage:        1 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; This function calls:
  7079 ;;		Nothing
  7080 ;; This function is called by:
  7081 ;;		_led_matrix_run
  7082 ;; This function uses a non-reentrant model
  7083 ;;
  7084  056D                     _led_set_io_od:	
  7085                           
  7086                           ; Regs used in _led_set_io_od: [wreg-fsr0h+status,2+status,0]
  7087                           ;led_set_io_od@io_num stored from wreg
  7088  056D  00F0               	movwf	led_set_io_od@io_num
  7089                           
  7090                           ;tyw_led.c: 176: switch(io_num)
  7091  056E  2DB7               	goto	i1l15699
  7092  056F                     i1l11868:	
  7093                           ;tyw_led.c: 177: {
  7094                           ;tyw_led.c: 178: case 0:
  7095                           
  7096                           
  7097                           ;tyw_led.c: 179: {PBD3=1;PBMOD32= PBMOD32 & 0x0F | 0x10; };
  7098  056F  1283               	bcf	3,5	;RP0=0, select bank0
  7099  0570  1303               	bcf	3,6	;RP1=0, select bank0
  7100  0571  1586               	bsf	6,3
  7101  0572  1683               	bsf	3,5	;RP0=1, select bank1
  7102  0573  080D               	movf	13,w
  7103  0574  390F               	andlw	15
  7104  0575  3810               	iorlw	16
  7105  0576  008D               	movwf	13	;volatile
  7106                           
  7107                           ;tyw_led.c: 180: break;
  7108  0577  0008               	return
  7109  0578                     i1l11870:	
  7110                           ;tyw_led.c: 181: case 1:
  7111                           
  7112                           
  7113                           ;tyw_led.c: 182: {PDD0=1; PDMOD10= PDMOD10 & 0xF0 | 0x01; };
  7114  0578  1283               	bcf	3,5	;RP0=0, select bank0
  7115  0579  1303               	bcf	3,6	;RP1=0, select bank0
  7116  057A  1407               	bsf	7,0
  7117  057B  1683               	bsf	3,5	;RP0=1, select bank1
  7118  057C  0810               	movf	16,w
  7119  057D  39F0               	andlw	240
  7120  057E  3801               	iorlw	1
  7121  057F  0090               	movwf	16	;volatile
  7122                           
  7123                           ;tyw_led.c: 183: break;
  7124  0580  0008               	return
  7125  0581                     i1l11871:	
  7126                           ;tyw_led.c: 184: case 2:
  7127                           
  7128                           
  7129                           ;tyw_led.c: 185: {PDD1=1; PDMOD10= PDMOD10 & 0x0F | 0x10; };
  7130  0581  1283               	bcf	3,5	;RP0=0, select bank0
  7131  0582  1303               	bcf	3,6	;RP1=0, select bank0
  7132  0583  1487               	bsf	7,1
  7133  0584  1683               	bsf	3,5	;RP0=1, select bank1
  7134  0585  0810               	movf	16,w
  7135  0586  390F               	andlw	15
  7136  0587  3810               	iorlw	16
  7137  0588  0090               	movwf	16	;volatile
  7138                           
  7139                           ;tyw_led.c: 186: break;
  7140  0589  0008               	return
  7141  058A                     i1l11872:	
  7142                           ;tyw_led.c: 187: case 3:
  7143                           
  7144                           
  7145                           ;tyw_led.c: 188: {PBD4=1; PBMOD54= PBMOD54 & 0xF0 | 0x01; };
  7146  058A  1283               	bcf	3,5	;RP0=0, select bank0
  7147  058B  1303               	bcf	3,6	;RP1=0, select bank0
  7148  058C  1606               	bsf	6,4
  7149  058D  1683               	bsf	3,5	;RP0=1, select bank1
  7150  058E  080E               	movf	14,w
  7151  058F  39F0               	andlw	240
  7152  0590  3801               	iorlw	1
  7153  0591  008E               	movwf	14	;volatile
  7154                           
  7155                           ;tyw_led.c: 189: break;
  7156  0592  0008               	return
  7157  0593                     i1l11873:	
  7158                           ;tyw_led.c: 190: case 4:
  7159                           
  7160                           
  7161                           ;tyw_led.c: 191: {PBD5=1; PBMOD54= PBMOD54 & 0x0F| 0x10; };
  7162  0593  1283               	bcf	3,5	;RP0=0, select bank0
  7163  0594  1303               	bcf	3,6	;RP1=0, select bank0
  7164  0595  1686               	bsf	6,5
  7165  0596  1683               	bsf	3,5	;RP0=1, select bank1
  7166  0597  080E               	movf	14,w
  7167  0598  390F               	andlw	15
  7168  0599  3810               	iorlw	16
  7169  059A  008E               	movwf	14	;volatile
  7170                           
  7171                           ;tyw_led.c: 192: break;
  7172  059B  0008               	return
  7173  059C                     i1l11874:	
  7174                           ;tyw_led.c: 193: case 5:
  7175                           
  7176                           
  7177                           ;tyw_led.c: 194: {PBD6=1; PBMOD76= PBMOD76 & 0xF0 | 0x01; };
  7178  059C  1283               	bcf	3,5	;RP0=0, select bank0
  7179  059D  1303               	bcf	3,6	;RP1=0, select bank0
  7180  059E  1706               	bsf	6,6
  7181  059F  1683               	bsf	3,5	;RP0=1, select bank1
  7182  05A0  080F               	movf	15,w
  7183  05A1  39F0               	andlw	240
  7184  05A2  3801               	iorlw	1
  7185  05A3  008F               	movwf	15	;volatile
  7186                           
  7187                           ;tyw_led.c: 195: break;
  7188  05A4  0008               	return
  7189  05A5                     i1l11875:	
  7190                           ;tyw_led.c: 196: case 6:
  7191                           
  7192                           
  7193                           ;tyw_led.c: 197: {PBD7=1; PBMOD76= PBMOD76 & 0x0F | 0x10; };
  7194  05A5  1283               	bcf	3,5	;RP0=0, select bank0
  7195  05A6  1303               	bcf	3,6	;RP1=0, select bank0
  7196  05A7  1786               	bsf	6,7
  7197  05A8  1683               	bsf	3,5	;RP0=1, select bank1
  7198  05A9  080F               	movf	15,w
  7199  05AA  390F               	andlw	15
  7200  05AB  3810               	iorlw	16
  7201  05AC  008F               	movwf	15	;volatile
  7202                           
  7203                           ;tyw_led.c: 198: break;
  7204  05AD  0008               	return
  7205  05AE                     i1l11876:	
  7206                           ;tyw_led.c: 199: case 7:
  7207                           
  7208                           
  7209                           ;tyw_led.c: 200: {PBD0=1; PBMOD10= PBMOD10 & 0xF0 | 0x01; };
  7210  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  7211  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  7212  05B0  1406               	bsf	6,0
  7213  05B1  1683               	bsf	3,5	;RP0=1, select bank1
  7214  05B2  080C               	movf	12,w
  7215  05B3  39F0               	andlw	240
  7216  05B4  3801               	iorlw	1
  7217  05B5  008C               	movwf	12	;volatile
  7218                           
  7219                           ;tyw_led.c: 201: break;
  7220  05B6  0008               	return
  7221  05B7                     i1l15699:	
  7222  05B7  0870               	movf	led_set_io_od@io_num,w
  7223                           
  7224                           ; Switch size 1, requested type "space"
  7225                           ; Number of cases is 8, Range of values is 0 to 7
  7226                           ; switch strategies available:
  7227                           ; Name         Instructions Cycles
  7228                           ; direct_byte           23     7 (fixed)
  7229                           ; simple_byte           25    13 (average)
  7230                           ; jumptable            260     6 (fixed)
  7231                           ; rangetable            12     6 (fixed)
  7232                           ; spacedrange           22     9 (fixed)
  7233                           ; locatedrange           8     3 (fixed)
  7234                           ;	Chosen strategy is direct_byte
  7235  05B8  0084               	movwf	4
  7236  05B9  3008               	movlw	8
  7237  05BA  0204               	subwf	4,w
  7238  05BB  1803               	skipnc
  7239  05BC  0008               	return
  7240  05BD  3008               	movlw	high i1S16679
  7241  05BE  008A               	movwf	10
  7242  05BF  1003               	clrc
  7243  05C0  0D04               	rlf	4,w
  7244  05C1  3E00               	addlw	low i1S16679
  7245  05C2  0082               	movwf	2
  7246  05C3  0008               	return
  7247  05C4                     __end_of_led_set_io_od:	
  7248  05C4                     PL2:	
  7249  05C4  3EDC               	addlw	low (_ledShowIndex| (0+32768))
  7250  05C5  00F3               	movwf	??_led_matrix_run
  7251  05C6  3086               	movlw	high (_ledShowIndex| (0+32768))
  7252  05C7  1803               	skipnc
  7253  05C8  3E01               	addlw	1
  7254  05C9  00F4               	movwf	??_led_matrix_run+1
  7255  05CA  1003               	clrc
  7256  05CB  0D79               	rlf	led_matrix_run@rowCount,w
  7257  05CC  0773               	addwf	??_led_matrix_run,w
  7258  05CD  0008               	return
  7259  05CE                     PL9:	
  7260  05CE  0084               	movwf	4
  7261  05CF  0874               	movf	??_led_matrix_run+1,w
  7262  05D0  1803               	skipnc
  7263  05D1  0A74               	incf	??_led_matrix_run+1,w
  7264  05D2  00FF               	movwf	127
  7265  05D3  0008               	return
  7266                           
  7267                           	psect	intentry
  7268  0004                     __pintentry:	
  7269                           ; Regs used in _Interrupt_ISR: [allreg]
  7270                           
  7271  0004                     interrupt_function:	
  7272  007E                     saved_w	set	btemp
  7273  0004  00FE               	movwf	btemp
  7274  0005  0E03               	swapf	3,w
  7275  0006  00FA               	movwf	??_Interrupt_ISR
  7276  0007  0804               	movf	4,w
  7277  0008  00FB               	movwf	??_Interrupt_ISR+1
  7278  0009  080A               	movf	10,w
  7279  000A  00FC               	movwf	??_Interrupt_ISR+2
  7280  000B  1283               	bcf	3,5	;RP0=0, select bank0
  7281  000C  1303               	bcf	3,6	;RP1=0, select bank0
  7282  000D  087F               	movf	btemp+1,w
  7283  000E  00FD               	movwf	??_Interrupt_ISR+3
  7284  000F  118A  2C0D         	ljmp	_Interrupt_ISR
  7285                           
  7286                           	psect	swtext1
  7287  05EA                     __pswtext1:	
  7288  05EA                     i1S16677:	
  7289  05EA  118A  2CE8         	ljmp	i1l15707
  7290  05EC  118A  2CF7         	ljmp	i1l15713
  7291  05EE  118A  2D06         	ljmp	i1l15719
  7292  05F0  118A  2D15         	ljmp	i1l15725
  7293  05F2  118A  2D24         	ljmp	i1l15731
  7294  05F4  118A  2D33         	ljmp	i1l15737
  7295  05F6  118A  2D42         	ljmp	i1l15743
  7296  05F8  118A  2D51         	ljmp	i1l15749
  7297                           
  7298                           	psect	swtext2
  7299  0800                     __pswtext2:	
  7300  0800                     i1S16679:	
  7301  0800  118A  2D6F         	ljmp	i1l11868
  7302  0802  118A  2D78         	ljmp	i1l11870
  7303  0804  118A  2D81         	ljmp	i1l11871
  7304  0806  118A  2D8A         	ljmp	i1l11872
  7305  0808  118A  2D93         	ljmp	i1l11873
  7306  080A  118A  2D9C         	ljmp	i1l11874
  7307  080C  118A  2DA5         	ljmp	i1l11875
  7308  080E  118A  2DAE         	ljmp	i1l11876
  7309                           
  7310                           	psect	text764
  7311  0000                     __ptext764:	
  7312 ;; =============== function _SmokeOut ends ============
  7313                           
  7314  007E                     btemp	set	126	;btemp
  7315  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sat Apr 27 15:38:15 2024

                                 pc 0002                      ___bmul@product 0071  
          __size_of_SystemClockInit 000F                                  fsr 0004  
                   _led_duty_cycles 01A0                                 _PAD 0005  
                               _PBD 0006                                 _PDD 0007  
                     _led_set_io_od 056D                                 _FSR 0004  
                               _RP0 001D                                 _IRP 001F  
                               _RP1 001E                                 _TM0 0001  
                               _TM1 0012                       _led_set_io_pp 04E6  
                               fsr0 0004                                 indf 0000  
                     ?_Init_BOD_WDT 0070                      _KeyUpStopSmoke 03A2  
                    _D_BatVol_Table 0612                                l3301 07F1  
                              l3302 0000                                l1661 0D8A  
                              l3281 0000                                l3290 0000  
                              l1658 0D72                                l3284 0000  
                              l3293 0000                                l3287 0000  
                              l3299 07E6                                l6600 0000  
                              l6603 0000                                l4924 0B65  
                              l6621 0278                                l4925 0B79  
                              l6606 0000                                l4943 0039  
                              l6624 0285                                l4960 0095  
                              l4944 003D                                l6609 0000  
                              l4937 0019                                l4962 00A2  
                              l4946 0049                                l4938 001B  
                              l6651 0312                                l6635 02AC  
                              l4939 0021                                l8404 0000  
                              l6628 028E                                l4974 03F5  
                              l6671 0335             __size_of_HAL_ADC_Sample 006A  
                              l8408 0DAF                                l6664 031E  
                              l6771 0B4C                                l6780 0B55  
                              l8452 0000                                l6677 0362  
                              l6783 0B5C                                l6679 0000  
                              l8393 0F27                                l8396 0F44  
                              l8397 0F50                                _ADST 00C3  
                              _PAD2 002A                                _T2IE 005E  
                              _PAD3 002B                                _T2IF 0066  
                              _PBD0 0030                                _PAD4 002C  
                              _PBD2 0032                                _PAD6 002E  
                              _PBD3 0033                                _PAD7 002F  
                              _PBD4 0034                                _PBD5 0035  
                              _PBD6 0036                                _PBD7 0037  
                              _PDD0 0038                                _PDD1 0039  
                              _INDF 0000                                u3105 034A  
                              u3115 035C                                u2505 0DE8  
                              u2375 0F3E                                u2615 0E5F  
                              u2535 0E05                                u2455 0DBE  
                              u2385 0F4A                                u3355 07A2  
                              u4340 0000                                u2575 0E27  
                              u3295 0FDD                                u2665 0EA1  
                              u4345 01DB                                u2595 0E4E  
                              _main 0CCA                                btemp 007E  
                 led_set_io_pp@type 0070                                start 0011  
            __end_of_led_matrix_run 04D8                   ___bmul@multiplier 0072  
                     ??_ReadLoadRes 0060                        _VoutInfoFlag 002C  
                             l10121 00EB                               l10115 0146  
                             l10118 00D0                               l10139 019F  
                             l10177 0C07                               l13010 0000  
                             l13007 0F87                               l13206 0000  
                             l13222 076C                               l13232 0000  
                             l16001 026B                               l15211 0000  
                             l16003 0000                               l15213 0000  
                             l15221 0000                               l15301 0000  
                             l16013 0000                               l16005 0000  
                             l16101 0B6D                               l15215 0000  
                             l15207 0000                               l15231 0000  
                             l15223 0000                               l15311 0000  
                             l15303 0000                               l16031 0000  
                             l16023 0289                               l16015 027F  
                             l16007 0000                               l16111 0000  
                             l16103 0000                               l15217 0000  
                             l15209 0000                               l15233 0000  
                             l15225 0000                               l15241 0000  
                             l15321 0000                               l15313 0000  
                             l15305 0000                               l16033 0000  
                             l16041 02A4                               l16017 0000  
                             l16121 0000                               l16113 0000  
                             l16201 0000                               l15219 0000  
                             l15235 0000                               l15227 0000  
                             l15251 0000                               l15243 0000  
                             l15331 0000                               l15323 0000  
                             l15315 07DC                               l15411 0DF0  
                             l16051 02B2                               l16043 0000  
                             l16035 029C                               l16019 0000  
                             l16123 0000                               l16131 0000  
                             l16203 0000                               l15229 0000  
                             l15261 0000                               l15253 0000  
                             l15245 0000                               l15237 0CAD  
                             l15333 0000                               l15325 0000  
                             l15341 0000                               l15421 0000  
                             l15405 0DEA                               l15501 0000  
                             l16061 0000                               l16053 0000  
                             l16045 0000                               l16037 0000  
                             l16125 0000                               l16117 0B9A  
                             l16109 0B86                               l16141 0000  
                             l16133 0000                               l16301 00BC  
                             l16221 0000                               l15263 0000  
                             l15255 0000                               l15247 0000  
                             l15239 0000                               l15271 0000  
                             l15343 0000                               l15335 0000  
                             l15431 0000                               l15407 0DEE  
                             l15503 0B2D                               l16055 0000  
                             l16039 0000                               l16119 0000  
                             l16151 0EEC                               l16143 0000  
                             l16135 0000                               l16127 0000  
                             l16223 0000                               l16231 005D  
                             l16303 0000                               l15265 0000  
                             l15257 0000                               l15249 0000  
                             l15281 0000                               l15273 0000  
                             l15361 0000                               l15353 0000  
                             l15345 0000                               l15337 0000  
                             l15417 0DFC                               l15521 0000  
                             l15505 0B30                               l16081 0307  
                             l16073 02F8                               l16057 02BA  
                             l16049 02B0                               l16065 02C5  
                             l16153 0F14                               l16137 0000  
                             l16129 0000                               l16225 0053  
                             l16233 005E                               l16321 0000  
                             l15259 0000                               l15291 0000  
                             l15283 0000                               l15275 0000  
                             l15267 0000                               l15371 0000  
                             l15363 0000                               l15355 0000  
                             l15347 0000                               l15339 0000  
                             l15451 0E3A                               l15443 0000  
                             l15427 0000                               l15515 0B53  
                             l16091 0317                               l16083 030B  
                             l16075 02FB                               l16059 02BE  
                             l16067 02EE                               l16147 0EE2  
                             l16139 0000                               l16171 0000  
                             l16163 0000                               l16251 0000  
                             l16235 0000                               l16227 0000  
                             l16403 0000                               l16331 0000  
                             l16323 0000                               l16307 0000  
                             l15293 0000                               l15285 0000  
                             l15277 0000                               l15373 0F7E  
                             l15349 0F26                               l15461 0E66  
                             l15453 0E50                               l15437 0E2D  
                             l15429 0E11                               l15509 0B32  
                             l16069 02F0                               l16093 0000  
                             l16173 0000                               l16165 0000  
                             l16157 0000                               l16253 0000  
                             l16245 0000                               l16261 0082  
                             l16237 0063                               l16229 0000  
                             l16501 0000                               l16421 0000  
                             l16413 014D                               l16341 0000  
                             l16333 0000                               l16325 0000  
                             l16317 0000                               l15287 0000  
                             l15279 0000                               l15295 0000  
                             l15367 0F5E                               l15471 0000  
                             l15463 0000                               l15447 0000  
                             l15439 0E2F                               l15391 0000  
                             l15631 0000                               l16087 0000  
                             l16095 0B68                               l16175 0000  
                             l16167 0000                               l16271 0000  
                             l16255 0000                               l16263 0084  
                             l16511 0000                               l16503 0000  
                             l16423 0000                               l16431 0164  
                             l16351 0109                               l16343 0000  
                             l16327 0000                               l16319 00D8  
                             l15289 0000                               l15297 0000  
                             l15369 0000                               l15481 0000  
                             l15457 0E6F                               l15377 0000  
                             l15641 0329                               l15633 0000  
                             l15801 0000                               l16089 0000  
                             l16097 0B6B                               l16177 0000  
                             l16169 0000                               l16281 0000  
                             l16273 0000                               l16257 0000  
                             l16249 0077                               l16185 0023  
                             l16521 0000                               l16505 0000  
                             l16441 0000                               l16425 0000  
                             l16417 0000                               l16361 0000  
                             l16353 0000                               l16345 0000  
                             l16337 0000                               l16329 0000  
                             l15299 0000                               l15491 0E8D  
                             l15483 0000                               l15459 0E71  
                             l15395 0DCC                               l16291 0000  
                             l16275 0000                               l16259 0000  
                             l16179 0000                               l16523 0000  
                             l16515 0000                               l16507 0000  
                             l16443 0000                               l16427 0000  
                             l16419 0000                               l16371 0000  
                             l16363 0114                               l16339 0000  
                             l16347 00FB                               l16611 0000  
                             l15493 0EA5                               l15397 0000  
                             l15389 0000                               l15477 0E82  
                             l15629 0C5A                               l15653 0000  
                             l15901 03E7                               l16293 0000  
                             l16285 0000                               l16277 0000  
                             l16269 0000                               l16197 0000  
                             l16189 0000                               l16525 0000  
                             l16509 0000                               l16461 0000  
                             l16453 0000                               l16445 0000  
                             l16437 0000                               l16429 0000  
                             l16381 0000                               l16373 0000  
                             l16365 0000                               l16357 0000  
                             l16349 0000                               l16541 0000  
                             l16605 0D58                               l16621 0D8D  
                             l15495 0EA8                               l15399 0000  
                             l15663 034E                               l15671 037C  
                             l15647 032A                               l15639 0000  
                             l15823 0000                               l15807 0000  
                             l15911 0000                               l15903 0000  
                             l16295 0000                               l16287 0000  
                             l16279 0000                               l16199 0000  
                             l16527 0000                               l16519 0000  
                             l16471 01B7                               l16455 0000  
                             l16439 0000                               l16447 0180  
                             l16391 0000                               l16383 0000  
                             l16367 0000                               l16359 0000  
                             l16543 0C1C                               l16623 0000  
                             l16607 0D59                               l16631 0D9C  
                             l16551 0000                               l15497 0000  
                             l15673 0000                               l15817 0FCA  
                             l15809 0000                               l15841 0000  
                             l15833 0000                               l15921 0000  
                             l15905 0000                               l15913 03F2  
                             l16289 0000                               l16297 00B3  
                             l16473 01BA                               l16465 0000  
                             l16457 0000                               l16393 0000  
                             l16385 0000                               l16377 0000  
                             l16369 0000                               l16537 0000  
                             l16529 0000                               l16625 0D94  
                             l16561 0000                               l16553 0000  
                             l16545 0000                               l15675 0000  
                             l15827 0000                               l15819 0000  
                             l15843 077B                               l15835 0000  
                             l15907 0000                               l15931 0000  
                             l16491 0224                               l16459 0000  
                             l16395 0000                               l16387 0000  
                             l16379 0132                               l16635 0DA2  
                             l16627 0000                               l16619 0D84  
                             l16571 0CFC                               l16563 0000  
                             l16555 0000                               l16547 0000  
                             l15669 0365                               l15677 0381  
                             l15829 0FF5                               l15853 078F  
                             l15845 0000                               l15917 0000  
                             l15909 0000                               l15933 0000  
                             l15925 0000                               l16485 0206  
                             l16477 0000                               l16397 0000  
                             l16389 0000                               l16629 0D99  
                             l16581 0000                               l16573 0000  
                             l16565 0000                               l16557 0000  
                             l16549 0000                               l15863 0000  
                             l15855 0000                               l15951 0BD2  
                             l15935 0000                               l16495 022E  
                             l16479 0000                               l16583 0000  
                             l16575 0000                               l15865 07BA  
                             l15881 0000                               l15873 0000  
                             l15953 0000                               l15937 0BB1  
                             l16497 0231                               l16593 0000  
                             l16585 0000                               l16577 0D07  
                             l15795 0000                               l15867 0000  
                             l15859 0000                               l15883 0000  
                             l15875 0000                               l15891 0000  
                             l15971 0000                               l15947 0BC6  
                             l15955 0BD7                               l16595 0000  
                             l16587 0000                               l16579 0000  
                             l15869 07C8                               l15877 0000  
                             l15885 0000                               l15973 0000  
                             l15965 0000                               l16597 0000  
                             l16589 0D25                               l15799 0F9D  
                             l15879 0000                               l15895 0000  
                             l15975 0000                               l15967 0000  
                             l15959 0BDB                               l15991 025B  
                             l15897 0000                               l15969 0000  
                             l15977 0BF7                               l15985 0000  
                             l15995 0000                               l15987 0000  
                             l15997 0000                               l15999 0267  
                   __end_of___aldiv 07D1                     led_matrix_run@x 0077  
                   led_matrix_run@y 0078                      ?_led_set_io_od 0070  
                             _ADCDH 0017                      ?_led_set_io_pp 0070  
                             ?_main 0070                               _ADCTL 0018  
                  ?_SetShowBatLxLED 0070                     __end_of___lldiv 0FFE  
                             _CMPIF 0074                               _T2CTL 0015  
                             _INTIE 000B              __end_of_KeyUpStopSmoke 03C0  
                             _TM0IE 005C                               _TM0IF 0064  
                             _TM1IE 005D                               _TM1IF 0065  
                             _LVDIE 0068                               _LVDIF 0070  
                             _LVCTL 0016                               _WKTIE 005B  
                             _WKTIF 0063                      ??_Init_BOD_WDT 0045  
                       _Delay_16nop 0C5A                 ___lmul@multiplicand 0049  
                       _ClearAllRAM 07D1                __end_of_IdleProgress 0C31  
                             pclath 000A                               status 0003  
                        _EnterSleep 0C40                               wtemp0 007E  
                   ?_led_matrix_run 0070            __size_of_SetOffNotifyLED 0009  
                      __end_of_main 0DA6                    __end_of_InitGpio 0C92  
                 ?_ScanShowBatLxLED 0070                  ??_ScanShowBatLxLED 0045  
                            ??_main 006A                 __end_of_ReadLoadRes 0F19  
           __size_of_ShowSegmentLED 0067                     ?_KeyUpStopSmoke 0070  
                 ??_SystemClockInit 0045                    __end_of_PortScan 00C1  
                  __end_of_SmokeOut 046F           __size_of_ReadChargerState 003C  
                            _ADCTL2 0019                      __p_szTemp_text 0FFE  
                            _CLKCTL 000F                              _INT0IF 0060  
                            _INT1IF 0061                              _INT2IF 0062  
                            i1l1671 0417                              i1l1672 0415  
                            i1l1674 0424                              i1l1690 0447  
                            i1l1683 043C                              i1l1675 0422  
                            i1l1685 0440                              i1l1677 041D  
                            i1l1687 0444                              i1l1679 0438  
                            _INTIE1 000D                              i1l8463 0000  
                        _SetShowLED 0380                              _TM0CTL 0011  
                            _TM1CTL 0014                              _TM0RLD 0010  
                            _TM1RLD 0013                              _PINMOD 0105  
                            _OPTION 0081                 led_set_io_od@io_num 0070  
                            _GetADC 002E            ??_UpdateElectricityGrade 0045  
                            _RunLED 0020                              _RunPWM 0027  
                            ___bmul 04D8                              ___lmul 0F83  
                         ??___aldiv 004D                           ??___lldiv 0059  
                   ??_led_set_io_od 0070              __size_of_Interrupt_ISR 0045  
                   ??_led_set_io_pp 0071                 led_set_io_pp@io_num 0071  
                     ??_ShowWarnLED 0049                              _szTemp 0FFE  
                            clrloop 07F6                              saved_w 007E  
           SetWarnEvent@WarnShowCnt 0047                      _HAL_ADC_Sample 0F19  
              ReadLoadRes@LoadValue 0062                         ?_EnterSleep 0070  
               ___bmul@multiplicand 0070                __end_of_Init_BOD_WDT 0CAD  
                     ?_SetWarnEvent 0045             __size_of_MCU_INIT_TIMER 001D  
                    __pcstackCOMMON 0070                         _ReadLoadRes 0EBA  
               _led_duty_cycles_tmp 00A9                   ??_SetOffNotifyLED 0045  
             __size_of_IdleProgress 0021                PowerProgress@AD_Temp 0068  
            __end_of_HAL_ADC_Sample 0F83                 __end_of_ShowWarnLED 0319  
             SetWarnEvent@WarnEvent 0045                       _Interrupt_ISR 040D  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                        __pbssBANK3 01A0                         ?_SetShowLED 0070  
                         ?_InitGpio 0070               __end_of_PowerProgress 0254  
                    ??_SetWarnEvent 0048     __size_of_UpdateElectricityGrade 0107  
                     ?_PlugProgress 0070                          __pmaintext 0CCA  
                           ?___bmul 0070                          _gearSwitch 0B64  
                         ?_PortScan 0070                             ?___lmul 0045  
                         ?_SmokeOut 0070                          __pintentry 0004  
                 led_matrix_run@row 002D                        _IdleProgress 0C10  
                           i1S16677 05EA                             i1S16679 0800  
                    ___lmul@product 004D                      _ShowSegmentLED 0319  
               __size_of_EnterSleep 001A                             i1l11902 054E  
                           i1l11905 055D                             i1l11870 0578  
                           i1l11871 0581                             i1l11872 058A  
                           i1l11873 0593                             i1l11874 059C  
                           i1l11890 0512                             i1l11875 05A5  
                           i1l11883 04F4                             i1l11876 05AE  
                           i1l11868 056F                             i1l11893 0521  
                           i1l11887 0503                             i1l11896 0530  
                           i1l12929 0000                             i1l15601 04D0  
                           i1l15611 0000                             i1l11899 053F  
                           i1l15603 0000                             i1l15613 0000  
                           i1l15623 0467                             i1l15615 0000  
                           i1l15607 0000                             i1l15711 0000  
                           i1l15551 042F                             i1l15617 045E  
                           i1l15721 0000                             i1l15713 04F7  
                           i1l15705 0000                             i1l15553 0000  
                           i1l15545 0000                             i1l15529 0000  
                           i1l15619 0000                             i1l15627 046D  
                           i1l15731 0524                             i1l15723 0000  
                           i1l15715 0000                             i1l15707 04E8  
                           i1l15741 0000                             i1l15733 0000  
                           i1l15725 0515                             i1l15717 0000  
                           i1l15709 0000                             i1l15549 0000  
                           i1l15751 0000                             i1l15743 0542  
                           i1l15735 0000                             i1l15727 0000  
                           i1l15719 0506                             i1l15575 0472  
                           i1l15559 0436                             i1l15681 0000  
                           i1l15753 0000                             i1l15745 0000  
                           i1l15737 0533                             i1l15729 0000  
                           i1l15593 0000                             i1l15577 0000  
                           i1l15569 0000                             i1l15691 0000  
                           i1l15683 0000                             i1l15747 0000  
                           i1l15739 0000                             i1l15771 0000  
                           i1l15763 0000                             i1l15587 047B  
                           i1l15579 0000                             i1l15693 0000  
                           i1l15685 0000                             i1l15749 0551  
                           i1l15757 0560                             i1l15773 0000  
                           i1l15765 04DA                             i1l15597 04CB  
                           i1l15695 0000                             i1l15687 0000  
                           i1l15679 0000                             i1l15599 0000  
                           i1l15689 0000                             i1l15699 05B7  
                           _PAMOD10 0085                             _PAMOD32 0086  
                           _PAMOD54 0087                             _PAMOD76 0088  
                           _PBMOD10 008C                             _PBMOD32 008D  
                           _PBMOD54 008E                             _PBMOD76 008F  
                           _PDMOD10 0090                HAL_ADC_Sample@Filter 0045  
                      ?_Delay_16nop 0070                     ?_HAL_ADC_Sample 0045  
                  _ReadChargerState 03CB                        ?_ClearAllRAM 0070  
                    ?_Interrupt_ISR 0070                    ??_led_matrix_run 0073  
                        ??_InitGpio 0045                      ??_PlugProgress 0049  
                           _TimeCnt 0159                          ??_PortScan 0049  
                           ___aldiv 075C                          ??_SmokeOut 0070  
                   __size_of___bmul 000E                     _SystemClockInit 0C31  
                   __size_of___lmul 0033                             ___lldiv 0FB6  
                  ??_KeyUpStopSmoke 0045              __end_of_ShowSegmentLED 0380  
               __size_of_SetShowLED 0001                         _ShowWarnLED 0254  
                      _LedsInfoFlag 002A              _UpdateElectricityGrade 0DA6  
                  ___aldiv@dividend 0049                         _RunEventLED 0041  
          __size_of_SetShowBatLxLED 0003           __size_of_ScanShowBatLxLED 003E  
              end_of_initialization 05E7                        _ledShowIndex 06DC  
             __size_of_Init_BOD_WDT 001B   UpdateElectricityGrade@temp_TimeUp 0048  
                   ___lldiv@divisor 0051              SetWarnEvent@EmRunEvent 0048  
                    _MCU_INIT_TIMER 0CAD                     ___lldiv@counter 005D  
                       ?_gearSwitch 0070            SetWarnEvent@WarnShowTime 0046  
                  ___aldiv@quotient 004F                        __pstringtext 0600  
                   ?_ShowSegmentLED 0070  UpdateElectricityGrade@temp_Percent 004A  
              __end_of_SetWarnEvent 03A2                        _Init_BOD_WDT 0C92  
                   ??_Interrupt_ISR 007A                         _SysInfoFlag 002B  
                      ??_EnterSleep 0045              __end_of_MCU_INIT_TIMER 0CCA  
           __end_of_SystemClockInit 0C40                     _SetOffNotifyLED 0384  
                         _FlagSmoke 0164                        ?_ReadLoadRes 005E  
                    __end_of___bmul 04E6                      __end_of___lmul 0FB6  
             __end_of_led_set_io_od 05C4               __end_of_led_set_io_pp 056D  
                __end_of_EnterSleep 0C5A            SetShowBatLxLED@ShowBatLx 0045  
               start_initialization 05D4                __end_of_PlugProgress 0C0A  
              __size_of_Delay_16nop 0011                 __size_of_gearSwitch 003E  
                      ??_SetShowLED 0045                __size_of_ClearAllRAM 0024  
                   ?_MCU_INIT_TIMER 0070                   ??_SetShowBatLxLED 0045  
                 __size_of_InitGpio 0027            __end_of_ReadChargerState 0407  
                          ??___bmul 0071                            ??___lmul 004D  
                 __size_of_PortScan 00AE                   __size_of_SmokeOut 001D  
                  ??_HAL_ADC_Sample 0047                  __end_of_SetShowLED 0381  
                     __pcstackBANK0 0045                    _ScanShowBatLxLED 0B26  
           __end_of_SetOffNotifyLED 038D                    ?_SystemClockInit 0070  
                          ?___aldiv 0045                           __ptext731 0C10  
                         __ptext740 0C31                           __ptext732 00C1  
                         __ptext741 075C                           __ptext733 0013  
                         __ptext750 0F19                           __ptext742 0FB6  
                         __ptext734 0C40                           __ptext751 07D1  
                         __ptext743 0F83                           __ptext735 0EBA  
                         __ptext760 04D8                           __ptext752 038D  
                         __ptext744 0381                           __ptext736 0B64  
                         __ptext761 04E6                           __ptext753 0384  
                         __ptext745 0319                           __ptext737 0254  
                         __ptext762 056D                           __ptext754 03A2  
                         __ptext746 0380                           __ptext738 0BA2  
                         __ptext763 0452                           __ptext755 0CAD  
                         __ptext747 0C5A                           __ptext739 03CB  
                         __ptext764 0000                           __ptext756 0C92  
                         __ptext748 0B26                           __ptext757 0C6B  
                         __ptext749 0DA6                           __ptext758 040D  
                         __ptext759 046F                            ?___lldiv 0051  
             HAL_ADC_Sample@ADC_CHx 0049             ?_UpdateElectricityGrade 0070  
               HAL_ADC_Sample@Value 0051               __size_of_SetWarnEvent 0015  
                         __pswtext1 05EA                           __pswtext2 0800  
                      ?_ShowWarnLED 0070                 HAL_ADC_Sample@i_max 004C  
            __size_of_PowerProgress 0193                     ___aldiv@divisor 0045  
                 interrupt_function 0004                     ___aldiv@counter 004D  
                  ??_ShowSegmentLED 0045                        _SetWarnEvent 038D  
                      ??_gearSwitch 0049      __end_of_UpdateElectricityGrade 0EAD  
              __size_of_ReadLoadRes 005F               __size_of_PlugProgress 0068  
                       __stringbase 0612                   ___lmul@multiplier 0045  
                __end_of_gearSwitch 0BA2                            _InitGpio 0C6B  
                  ?_SetOffNotifyLED 0070                            _ReadPort 00A0  
                     _PowerProgress 00C1                        _PlugProgress 0BA2  
                          _PortScan 0013             __size_of_led_matrix_run 0069  
                       _D_LCD_Table 0748                            _SmokeOut 0452  
                  __size_of___aldiv 0075                    __size_of___lldiv 0048  
                   _SetShowBatLxLED 0381             __size_of_KeyUpStopSmoke 001E  
             __end_of_Interrupt_ISR 0452                    ??_MCU_INIT_TIMER 0045  
                     __size_of_main 00DC                      ?_PowerProgress 0070  
                          clear_ram 07F5             ShowSegmentLED@ShowEvent 0048  
                 ?_ReadChargerState 0070            __end_of_ScanShowBatLxLED 0B64  
                     ?_IdleProgress 0070                  ??_ReadChargerState 0049  
                     ??_Delay_16nop 0045                __size_of_ShowWarnLED 00C5  
                     ??_ClearAllRAM 0045                            intlevel1 0000  
                  ___lldiv@dividend 0055              __size_of_led_set_io_od 0057  
            __size_of_led_set_io_pp 0087                      _szTemp_absaddr 0FFE  
                         stringcode 060A                      ??_IdleProgress 0045  
           HAL_ADC_Sample@Value_Max 004F             HAL_ADC_Sample@Value_Min 004D  
           HAL_ADC_Sample@Value_Sum 004A             __end_of_SetShowBatLxLED 0384  
                  ___lldiv@quotient 0059                            stringtab 0600  
                      ___aldiv@sign 004E              led_matrix_run@rowCount 0079  
               __end_of_Delay_16nop 0C6B                     ??_PowerProgress 0064  
               __end_of_ClearAllRAM 07F5             ShowSegmentLED@temp_seg0 0045  
           ShowSegmentLED@temp_seg2 0046             ShowSegmentLED@temp_seg3 0047  
                    _led_matrix_run 046F  
